<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java集合初始化时赋初值</title>
    <url>/2022/02/18/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/HashMap%E5%88%9D%E5%A7%8B%E5%8C%96%E6%97%B6%E8%B5%8B%E5%80%BC/</url>
    <content><![CDATA[<p>在 Java 中，HashMap、ArrayList 和 HashSet 等是常用的数据结构，如果我们想在初始化时就直接给它们赋值，该怎么写呢？（而不是创建一个空的集合后，用 put&#x2F;add 等方法添加进去）</p>
<span id="more"></span>

<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;test&quot;</span>);  </span><br><span class="line">        put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;20&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>说明：这里的双括号 <code>&#123;&#123;&#125;&#125;</code> 是什么意思？</p>
<p>第一层实际是定义了一个匿名内部类(Anonymous Inner Class)。</p>
<p>第二层实际上是一个实例初始化块(instance initializer block)，这个块在内部匿名类构造时被执行。</p>
<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            add(<span class="string">&quot;A&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="初始化时直接赋值的缺点"><a href="#初始化时直接赋值的缺点" class="headerlink" title="初始化时直接赋值的缺点"></a>初始化时直接赋值的缺点</h2><p><strong>如果这个对象要串行化，可能会导致串行化失败。</strong>原因如下：</p>
<ul>
<li><p>上述实现是匿名内部类的声明方式，所以引用中存有外部类的引用。因此，当要串行化这个集合时，外部类也会被串行化，而此时如果外部类没有实现 serialize 接口时，就会报错。</p>
<p>可以在外部类中实现 serialize 接口。</p>
</li>
<li><p>上述实现其实是声明了一个继承自 HashMap 的子类。但是有些串行化方式，例如通过 Gson 串行化为 json，或要串行化为 xml 时，类库中提供的方式无法串行化 HashSet 或者 HashMap 的子类，就会导致串行化失败。</p>
<p>解决方案：只能乖乖重新初始化集合对象 —— <code>new HashMap(map);</code></p>
</li>
</ul>
<hr>
<h2 id="2022-07-05更"><a href="#2022-07-05更" class="headerlink" title="2022-07-05更"></a>2022-07-05更</h2><p>后看到 Oracle 官网发布的 <a href="https://openjdk.org/jeps/269">JEP 269: Convenience Factory Methods for Collections (openjdk.org)</a></p>
<p>里面就有谈到，不建议使用上述的方式去初始化集合的初值，上面的方式可能会导致<strong>内存溢出</strong>或者<strong>序列化相关的问题</strong>，文档原话如下：</p>
<blockquote>
<p>Another alternative is to use the so-called “double brace” technique:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; set = Collections.unmodifiableSet(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;() &#123;&#123;</span><br><span class="line">    add(<span class="string">&quot;a&quot;</span>); add(<span class="string">&quot;b&quot;</span>); add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">&#125;&#125;);</span><br></pre></td></tr></table></figure>

<p>This uses the instance-initializer construct in an anonymous inner class, which is a bit prettier. However, it is quite obscure, and it costs an extra class at each usage. It also holds hidden references to the enclosing instance and to any captured objects. This may cause memory leaks or problems with serialization. For these reasons, this technique is best avoided.</p>
</blockquote>
<p>那么我们要怎么做呢？如果是 JDK 9 及其之后的版本，JDK 新增一些相关的方法，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; set = Set.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">List.of(a, b, c);</span><br><span class="line"></span><br><span class="line">Map.of();</span><br><span class="line">Map.of(k1, v1);</span><br><span class="line">Map.of(k1, v1, k2, v2);</span><br><span class="line">Map.of(k1, v1, k2, v2, k3, v3);</span><br><span class="line">Map.ofEntries(Map.Entry&lt;K,V&gt;...);</span><br></pre></td></tr></table></figure>

<p>但上述的方式，JDK 8 是不支持的，JDK 8 的采用如下方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; set = Collections.unmodifiableSet(Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>).collect(toSet()));</span><br><span class="line"></span><br><span class="line">Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>但可用的方法很有限，并且依旧十分 verbose，如果无法忍受，则可以用第三方的库，例如 Google 的 Guava 库，里面就提供了很多好用的 api</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA源码阅读技巧</title>
    <url>/2022/04/13/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/IDEA%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>阅读代码（源码）是我们经常需要做的事情。那么 IDEA 有什么技巧可以帮助我们更好、效率更高地去阅读代码（源码）呢？</p>
<span id="more"></span>

<p>[[toc]]</p>
<p>下面均以阅读 JpaRepository 源码为例。</p>
<h2 id="1-1-查看当前接口-类源码"><a href="#1-1-查看当前接口-类源码" class="headerlink" title="1.1 查看当前接口&#x2F;类源码"></a>1.1 查看当前接口&#x2F;类源码</h2><table>
<thead>
<tr>
<th>使用频率</th>
<th>相关快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>⭐⭐⭐⭐⭐</td>
<td><code>Ctrl+左键</code>(Win) &#x2F; <code>Command+左键</code> （Mac）</td>
</tr>
</tbody></table>
<p>平时，我们如果想要查看某个类或接口的源代码时，我们可以将鼠标移动到该类&#x2F;接口上，然后按住 Ctrl 后，鼠标左键点击，就会跳转到该类&#x2F;接口的源码。</p>
<p>或者将光标移动到该类&#x2F;接口上，然后按下 F4。</p>
<h2 id="1-2-查看当前方法-类的实现"><a href="#1-2-查看当前方法-类的实现" class="headerlink" title="1.2 查看当前方法&#x2F;类的实现"></a>1.2 查看当前方法&#x2F;类的实现</h2><table>
<thead>
<tr>
<th>使用频率</th>
<th>相关快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>⭐⭐⭐⭐⭐</td>
<td><code>Ctrl+Alt+左键</code> (Win) &#x2F; <code>Command+option+左键</code> (Mac)</td>
</tr>
</tbody></table>
<p>当我们调用一个方法&#x2F;类，想要知道它是怎么实现的时候，我们可能会习惯性地通过 <code>Ctrl+左键</code>，但发现看到的只是一个抽象方法&#x2F;抽象类，或者接口。</p>
<p>实际上，遇到这种情况，我们应该使用 <code>Ctrl + Alt + B/鼠标左键</code> (Win) &#x2F; <code>Command + option + B/鼠标左键</code> (Mac)，直接跳转到该方法&#x2F;类的实现。</p>
<p>如果对应的方法&#x2F;类只有一种实现，则会直接跳转过去，如果有多个，IDEA 则会弹框让我们进行选择要跳转的实现。此时我们根据需求进行跳转即可。</p>
<h2 id="1-3-查看当前类-接口的层次结构"><a href="#1-3-查看当前类-接口的层次结构" class="headerlink" title="1.3 查看当前类&#x2F;接口的层次结构"></a>1.3 查看当前类&#x2F;接口的层次结构</h2><table>
<thead>
<tr>
<th>使用频率</th>
<th>相关快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>⭐⭐⭐⭐⭐</td>
<td><code>Ctrl + H</code></td>
</tr>
</tbody></table>
<p>在阅读源码的过程中，我们经常需要查看某个接口&#x2F;类的层次结构（子类层次结构，或父类层次结构），以此查看该类&#x2F;接口继承自谁，又被谁继承实现了，从而了解该类&#x2F;接口的”前世今生“。</p>
<p>例如 JpaRepository 的子类层次结构为：</p>
<p><img src="http://img.puppetdev.top/image/note/ba3a07f61ecfae874509d6f1962a210f.png" alt="image-20220415161022505"></p>
<p>由此看出，</p>
<p>JpaRepository 被 JpaRepositoryImplementation 继承，</p>
<p>JpaRepositoryImplementation 又被 SimpleJpaRepository 实现，</p>
<p>SimpleJpaRepository 又被 QuerydslJpaRepository 继承</p>
<p>一层接着一层，非常清晰。同理，其父类层次结构为：</p>
<p><img src="http://img.puppetdev.top/image/note/744eee18f28e2814d9cbba3e264c094f.png" alt="image-20220415161343689"></p>
<h2 id="1-4-查看最近使用的文件-操作"><a href="#1-4-查看最近使用的文件-操作" class="headerlink" title="1.4 查看最近使用的文件&#x2F;操作"></a>1.4 查看最近使用的文件&#x2F;操作</h2><table>
<thead>
<tr>
<th>使用频率</th>
<th>相关快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>⭐⭐⭐⭐⭐</td>
<td><code>Ctrl + E</code>(Win) &#x2F; <code>Command +E</code> （Mac）</td>
</tr>
</tbody></table>
<p>如果我们想要查看最近使用过的文件&#x2F;操作，我们可以通过该快捷键调取，IDEA 会弹出如下窗口：</p>
<p><img src="http://img.puppetdev.top/image/note/676fb89916d8a644b9fd68db12049633.png" alt="image-20220415165912312"></p>
<h2 id="1-5-快速检索类-文件-符号-操作-Git命令"><a href="#1-5-快速检索类-文件-符号-操作-Git命令" class="headerlink" title="1.5 快速检索类&#x2F;文件&#x2F;符号&#x2F;操作&#x2F;Git命令"></a>1.5 快速检索类&#x2F;文件&#x2F;符号&#x2F;操作&#x2F;Git命令</h2><table>
<thead>
<tr>
<th>使用频率</th>
<th>相关快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>⭐⭐⭐⭐⭐</td>
<td><code>双击Shift</code></td>
</tr>
</tbody></table>
<p>该操作常用于：</p>
<ul>
<li>想要搜索打开最近使用的文件</li>
<li>想要搜索某个包下文件（类、接口、配置等等，项目内的以及项目的依赖包内的），常用于搜索某个依赖包下的某个类。</li>
<li>快速搜索并执行某个 IDEA 或 Git 的操作&#x2F;命令</li>
</ul>
<p><img src="http://img.puppetdev.top/image/note/d58c8796ecbf02c13ae74ca7de5312bb.png" alt="image-20220415170640761"></p>
<h2 id="1-6-查看当前类-接口的结构"><a href="#1-6-查看当前类-接口的结构" class="headerlink" title="1.6 查看当前类&#x2F;接口的结构"></a>1.6 查看当前类&#x2F;接口的结构</h2><table>
<thead>
<tr>
<th>使用频率</th>
<th>相关快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>⭐⭐⭐⭐</td>
<td><code>Alt + 7</code>(Win) &#x2F; <code>Command +7</code> （Mac）</td>
</tr>
</tbody></table>
<p>一般情况下，如果我们直接查看某个类&#x2F;接口的源代码，会发现代码非常多且杂乱，无法快速的定位到我们要想要看的部分，或者无法快速了解到该类&#x2F;接口都有哪些方法、字段、内部类等等。</p>
<p>这个时候我们就可以借助 IDEA 技巧，在要查看的类&#x2F;接口上按下 <code>Alt+7</code>（win）&#x2F;<code>Command+7</code>（Mac），IDEA 就会弹出类似小窗口，将该类&#x2F;接口的整体结构展示出来。</p>
<img src="http://img.puppetdev.top/image/note/4e53078daacb0354556740b70d967e74.png" alt="image-20220415165429888" style="zoom:50%;" />

<h2 id="1-7-查看类-接口-方法被调用的情况"><a href="#1-7-查看类-接口-方法被调用的情况" class="headerlink" title="1.7 查看类&#x2F;接口&#x2F;方法被调用的情况"></a>1.7 查看类&#x2F;接口&#x2F;方法被调用的情况</h2><table>
<thead>
<tr>
<th>使用频率</th>
<th>相关快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>⭐⭐⭐⭐</td>
<td><code>Alt + F7</code></td>
</tr>
</tbody></table>
<p>如果我们想要知道某个类&#x2F;接口&#x2F;方法在哪里被调用了，我们可以通过在方法名上使用快捷键 <code>Alt + F7</code> 来查看。</p>
<img src="http://img.puppetdev.top/image/note/654fa137809b4ec5ec7f8c7564d128a2.png" alt="image-20220415165705991" style="zoom:50%;" />

<h2 id="1-8-查看当前类-接口的继承链路（图表形式）"><a href="#1-8-查看当前类-接口的继承链路（图表形式）" class="headerlink" title="1.8 查看当前类&#x2F;接口的继承链路（图表形式）"></a>1.8 查看当前类&#x2F;接口的继承链路（图表形式）</h2><table>
<thead>
<tr>
<th>使用频率</th>
<th>相关快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>⭐⭐⭐⭐</td>
<td>相关快捷键较多，不建议记，直接右键选定即可</td>
</tr>
</tbody></table>
<p>在类&#x2F;接口名称上<strong>右键</strong> ，选择 <strong>Shw Diagrams</strong>（显示图表） 即可查看图表形式的类继承链。</p>
<p><img src="http://img.puppetdev.top/image/note/29461c557e743aeb76f9601567aba3a8.png" alt="image-20220415171108449"></p>
<p>我们还可以对图表进行一些操作。比如，可以点击图表中具体的类&#x2F;接口 <strong>右键</strong>，然后选择显示它的实现、父类，或者依赖项，也可以查看该类&#x2F;接口被调用的情况，甚至可以直接跳转到其源码进行查看。</p>
<p>此外，最上边的工具栏还支持查看选中的类&#x2F;接口的方法、变量、内部类等等，还支持将图表导出。</p>
<p>总之，功能非常多，想要全部记住是不现实的，需要用到哪个，再进行摸索就可以了。</p>
<p><img src="http://img.puppetdev.top/image/note/35498e8ecf8cbc633191059cf2228b9d.png" alt="image-20220415171423744"></p>
<h2 id="1-9-源码阅读技巧之插件推荐"><a href="#1-9-源码阅读技巧之插件推荐" class="headerlink" title="1.9 源码阅读技巧之插件推荐"></a>1.9 源码阅读技巧之插件推荐</h2><p>除了上面使用到的 IDEA 自带的技巧，我们还可以借助一些插件，大致了解项目的情况，例如项目的代码量、类或接口的数量、注释的占比等等，以及图形化方法调用链路。</p>
<h3 id="1-9-1-一键生成方法调用时序图"><a href="#1-9-1-一键生成方法调用时序图" class="headerlink" title="1.9.1 一键生成方法调用时序图"></a>1.9.1 一键生成方法调用时序图</h3><p><strong>序列图</strong>（Sequence Diagram），亦称为<strong>循序图</strong>，是一种 UML 行为图。表示系统执行某个方法&#x2F;操作（如登录操作）时，对象之间的顺序调用关系。</p>
<p>这个顺序调用关系可以这样理解: 你需要执行系统中某个对象 a 提供的方法&#x2F;操作 login（登录），但是这个对象又依赖了对象 b 提供的方法 getUser(获取用户)。因此，这里就有了 a -&gt; b 调用关系之说。</p>
<p>我们可以通过 <strong>SequenceDiagram</strong> 这个插件一键生成方法的序列图。</p>
<p>安装之后，我们选中方法名（不能是类&#x2F;接口名），然后右键，选择 <strong>Sequence Diagram</strong> 选项。</p>
<p><img src="http://img.puppetdev.top/image/note/8cbde2fe44c9aed6ef2dedd8cd395f93.png" alt="image-20220415172639932"></p>
<p>我们还可以对时序图的展示做一些配置，例如调用深度、是否显示构造方法等等</p>
<p><img src="http://img.puppetdev.top/image/note/c003f29f1b9cf96ab9ca00c7168a903b.png" alt="image-20220415172822462"></p>
<p>此外，我们还可以在时序图中，点击定位到相关的代码中，让我们快速了解该方法的内容，同时，还能将生成的时序图导出为图片。</p>
<h3 id="1-9-2-项目代码数据统计"><a href="#1-9-2-项目代码数据统计" class="headerlink" title="1.9.2 项目代码数据统计"></a>1.9.2 项目代码数据统计</h3><p>该插件能够帮助我们快速分析项目情况，我们可以对项目的 <strong>代码的总行数、单个文件的代码行数、注释行数等信息进行统计。</strong></p>
<p>我们可以非常直观地看到项目中所有类型的文件的信息，比如数量、大小等等，可以帮助我们更好地了解项目。</p>
<p><img src="http://img.puppetdev.top/image/note/90062621a93529eeef3bcb08968e1bfa.png" alt="image-20220415173209584"></p>
<p>还可以使用它看所有类的总行数、有效代码行数、注释行数、以及有效代码比重等等这些东西。</p>
<p><img src="http://img.puppetdev.top/image/note/22d80e78229ed42314128662766b2f09.png" alt="image-20220415173246950"></p>
<p>当然，如果项目太大，该插件会运行一段时间，好在插件本身可以设置为启动时不激活，当我们需要查看项目情况的时候，再点击底部 Tab 栏进行激活。</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>源码阅读</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK8至JDK17各版本重要特性更新</title>
    <url>/2022/04/13/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/JDK8%E8%87%B3JDK17%E5%90%84%E7%89%88%E6%9C%AC%E9%87%8D%E8%A6%81%E7%89%B9%E6%80%A7%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<span id="more"></span>

<p>[[toc]]</p>
<h2 id="JDK8新特性（2014年初）（LTS版本）"><a href="#JDK8新特性（2014年初）（LTS版本）" class="headerlink" title="JDK8新特性（2014年初）（LTS版本）"></a>JDK8新特性（2014年初）（LTS版本）</h2><ol>
<li>Lambda 表达式</li>
<li>函数式编程</li>
<li>接口可以添加默认方法和静态方法，也就是定义不需要实现类实现的方法</li>
<li>方法引用</li>
<li>重复注解，同一个注解可以使用多次</li>
<li>引入 Optional 来避免空指针</li>
<li>引入 Streams 相关的 API</li>
<li>引入新的 Date&#x2F;Time 相关的 API</li>
<li>新增 jdeps 命令行，来分析类、目录、jar 包的类依赖层级关系</li>
<li>JVM 使用 MetaSpace 代替了永久代（PermGen Space）</li>
</ol>
<p><strong>重要特性：Lambda 表达式、函数式接口、方法引用、Stream 流式 API、采用 MetaSpace 代替了永久代（PermGen Space）</strong></p>
<h2 id="JDK9新特性（2017年9月）"><a href="#JDK9新特性（2017年9月）" class="headerlink" title="JDK9新特性（2017年9月）"></a>JDK9新特性（2017年9月）</h2><ol>
<li>接口方法可以使用 private 来修饰</li>
<li>设置 G1 为 JVM 默认垃圾收集器</li>
<li>支持 http2.0 和 websocket 的 API</li>
</ol>
<p><strong>重要特性：主要是 API 的优化，如支持 HTTP2 的 Client API、JVM 采用 G1 为默认垃圾收集器</strong></p>
<h2 id="JDK10新特性（2018年3月）"><a href="#JDK10新特性（2018年3月）" class="headerlink" title="JDK10新特性（2018年3月）"></a>JDK10新特性（2018年3月）</h2><ol>
<li>局部变量类型推断，类似 JS 可以通过 var 来修饰局部变量，编译之后会推断出值的真实类型</li>
<li>并行 Full GC，来优化 G1 的延迟</li>
<li>允许在不执行全局 VM 安全点的情况下执行线程回调，可以停止单个线程，而不需要停止所有线程或不停止线程</li>
</ol>
<p><strong>重要特性：通过 var 关键字实现局部变量类型推断，使 Java 语言变成弱类型语言、JVM 的 G1 垃圾回收由单线程改成多线程并行处理，降低 G1 的停顿时间</strong></p>
<h2 id="JDK11新特性（2018年9月）（LTS版本）"><a href="#JDK11新特性（2018年9月）（LTS版本）" class="headerlink" title="JDK11新特性（2018年9月）（LTS版本）"></a>JDK11新特性（2018年9月）（LTS版本）</h2><ol>
<li>ZGC，ZGC 可以看做是 G1 之上更细粒度的内存管理策略。由于内存的不断分配回收会产生大量的内存碎片空间，因此需要整理策略防止内存空间碎片化，在整理期间需要将对于内存引用的线程逻辑暂停，这个过程被称为 “Stop the world”。只有当整理完成后，线程逻辑才可以继续运行。（并行回收）</li>
<li>Flight Recorder（飞行记录器），基于 OS、JVM 和 JDK 的事件产生的数据收集框架</li>
<li>对 Stream、Optional、集合 API 进行增强</li>
</ol>
<p><strong>重要特性：对于 JDK9 和 JDK10 的完善，主要是对于 Stream、集合等 API 的增强、新增 ZGC 垃圾收集器</strong></p>
<h2 id="JDK12新特性（2019年3月）"><a href="#JDK12新特性（2019年3月）" class="headerlink" title="JDK12新特性（2019年3月）"></a>JDK12新特性（2019年3月）</h2><ol>
<li>Shenandoah GC，新增的 GC 算法、</li>
<li>switch 表达式语法扩展，可以有返回值</li>
<li>G1 收集器的优化，将 GC 的垃圾分为强制部分和可选部分，强制部分会被回收，可选部分可能不会被回收，提高 GC 的效率</li>
</ol>
<p><strong>重要特性：switch 表达式语法扩展、G1 收集器优化、新增 Shenandoah GC 垃圾回收算法</strong></p>
<h2 id="JDK13新特性（2019年9月）"><a href="#JDK13新特性（2019年9月）" class="headerlink" title="JDK13新特性（2019年9月）"></a>JDK13新特性（2019年9月）</h2><ol>
<li>Socket 的底层实现优化，引入了 NIO；</li>
<li>switch 表达式增加 yield 关键字用于返回结果，作用类似于 return，如果没有返回结果则使用 break；</li>
<li>ZGC 优化，将标记长时间空闲的堆内存空间返还给操作系统，保证堆大小不会小于配置的最小堆内存大小，如果堆最大和最小内存大小设置一样，则不会释放内存还给操作系统；</li>
<li>引入了文本块，可以使用 “”” 三个双引号表示文本块，文本块内部就不需要使用换行的转义字符；</li>
</ol>
<p><strong>重要特性：ZGC 优化，释放内存还给操作系统、socket 底层实现引入 NIO</strong></p>
<h2 id="JDK14新特性（2020年3月）"><a href="#JDK14新特性（2020年3月）" class="headerlink" title="JDK14新特性（2020年3月）"></a>JDK14新特性（2020年3月）</h2><ol>
<li>instanceof 类型匹配语法简化，可以直接给对象赋值，如 if(obj instanceof String str), 如果 obj 是字符串类型则直接赋值给了 str 变量；</li>
<li>引入 record 类，类似于枚举类型，可以向 Lombok 一样自动生成构造器、equals、getter 等方法；</li>
<li>NullPointerException 打印优化，打印具体哪个方法抛的空指针异常，避免同一行代码多个函数调用时无法判断具体是哪个函数抛异常的困扰，方便异常排查；</li>
</ol>
<h2 id="JDK15新特性（2020年9月）"><a href="#JDK15新特性（2020年9月）" class="headerlink" title="JDK15新特性（2020年9月）"></a>JDK15新特性（2020年9月）</h2><ol>
<li>隐藏类 hidden class；</li>
<li>密封类 sealed class，通过 sealed 关键字修饰抽象类限定只允许指定的子类才可以实现或继承抽象类，避免抽象类被滥用；</li>
</ol>
<h2 id="JDK16新特性（2021年3月）"><a href="#JDK16新特性（2021年3月）" class="headerlink" title="JDK16新特性（2021年3月）"></a>JDK16新特性（2021年3月）</h2><ol>
<li>ZGC 性能优化</li>
<li>instanceof 模式匹配</li>
<li>record 的引入</li>
</ol>
<p>JDK16 相当于是将 JDK14、JDK15 的一些特性进行了正式引入</p>
<h2 id="JDK17新特性（2021年9月）（LTS版本）"><a href="#JDK17新特性（2021年9月）（LTS版本）" class="headerlink" title="JDK17新特性（2021年9月）（LTS版本）"></a>JDK17新特性（2021年9月）（LTS版本）</h2><ol>
<li>正式引入密封类 sealed class，限制抽象类的实现；</li>
<li>统一日志异步刷新，先将日志写入缓存，然后再异步刷新；</li>
</ol>
<p>虽然 JDK17 也是一个 LTS 版本，但是并没有像 JDK8 和 JDK11 一样引入比较突出的特性，主要是对前几个版本的整合和完善</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/jackion5/p/10772017.html">JDK8到JDK17各个版本的重要特性整理 - Lucky帅小武 - 博客园 (cnblogs.com)</a></li>
</ul>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>Java、Go和Python适合做的事情</title>
    <url>/2023/02/08/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/Java%E3%80%81Go%E5%92%8CPython%E9%80%82%E5%90%88%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85/</url>
    <content><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>Java 语言普遍用于开发各种类型的软件系统、应用程序和 Web 服务，包括财务软件系统、社交网络软件、移动应用程序（虽然现在多用 Kotlin）、虚拟现实系统、嵌入式系统、大数据应用程序等。</p>
<p>此外，Java 还常用于开发游戏服务器和游戏客户端、智能家居软件和安全相关软件。</p>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><p>Go 语言很适合构建高性能的高并发的服务，可以在游戏、金融、物联网、系统工具等方面得到应用。Go 语言还可以开发分布式系统，构建容器、虚拟化、存储等云计算基础架构。因此 Go 语言可以用于以下任务：</p>
<ol>
<li><strong>后端服务</strong>：可以用 Go 语言构建高性能和高并发的后端服务</li>
<li>游戏开发：可以使用 Go 语言开发游戏；</li>
<li>网络编程：可以使用 Go 语言编写网络编程代码；</li>
<li>云计算：Go 语言可以编写容器、虚拟化、存储等基础云计算架构；</li>
<li>工具库：用 Go 语言可以构建各种高效工具库。</li>
<li>脚本语言：类似 Python 和 Shell</li>
</ol>
<p>此外，Go 易学快捷，而且可以完成高效的字节码编译，所以适合建立大型应用系统和分布式系统。</p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>Python 语言常用来做程序开发&#x2F;应用开发、桌面开发（PyQt）、网络编程、Web 开发、科学计算、自动化测试、人工智能、大数据等任务。</p>
<p>此外，Python 还可以用来编写游戏，移动应用等，但很少被用来做这类事情。</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL连接数据库报错</title>
    <url>/2022/07/31/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/MySQL%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>本文记录的是在连接到 MySQL 数据库过程中遇到的各种报错和对应的解决方案</p>
<span id="more"></span>

<p>[[toc]]</p>
<h2 id="MySQL8-0-连接报错：Could-not-create-connection-to-database-server"><a href="#MySQL8-0-连接报错：Could-not-create-connection-to-database-server" class="headerlink" title="MySQL8.0 连接报错：Could not create connection to database server"></a>MySQL8.0 连接报错：Could not create connection to database server</h2><p><a href="https://blog.csdn.net/qq_22076345/article/details/81952035">https://blog.csdn.net/qq_22076345/article/details/81952035</a></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis与SpringDataJpa的关系</title>
    <url>/2022/04/13/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/Mybatis%E4%B8%8ESpringDataJpa%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<span id="more"></span>

<p>[toc]</p>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><ol>
<li>Java持久层框架有哪些？</li>
<li>Mybatis与SpringDataJpa的关系是什么？</li>
<li>Mybatis与MybatisPlus的关系是什么？</li>
<li>如果Mybatis和SpringDataJpa都是持久层框架，且是可选择的，那什么时候要用 Mybatis？什么时候要用 SpringDataJpa？它们各有什么优势？</li>
</ol>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Mybatis</tag>
        <tag>Spring</tag>
        <tag>JPA</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman四种Body类型之间的区别</title>
    <url>/2022/04/13/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/Postman%E5%9B%9B%E7%A7%8DBody%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>使用 Postman 模拟请求，并想要在请求 Body 中携带数据一起发送时，我们会发现 Postman 的 Body 类型有很多，这些类型具体有什么区别呢？</p>
<span id="more"></span>

<p>postman 的 body 类型有四种</p>
<ol>
<li>form-data</li>
<li>x-www-form-urlencoded</li>
<li>raw</li>
<li>binary</li>
</ol>
<p>注意：如果使用 Postman 模拟请求头带有中文参数的请求，需要先将中文进行 URL 编码。</p>
<h2 id="form-data"><a href="#form-data" class="headerlink" title="form-data"></a>form-data</h2><p>等价于 http 请求中的 <code>multipart/form-data</code>，它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开，既可以上传键值对，也可以上传文件。</p>
<p>当上传的字段是文件时，会有 Content-Type 说明文件类型</p>
<p>content-disposition，用来说明字段的一些信息</p>
<p>由于有 boundary 隔离，所以 <code>multipart/form-data</code> 既可以上传文件，也可以上传键值对，它采用了键值对的方式，所以可以上传多个文件。</p>
<h2 id="x-www-form-urlencoded"><a href="#x-www-form-urlencoded" class="headerlink" title="x-www-form-urlencoded"></a>x-www-form-urlencoded</h2><p>等价于 <code>application/x-www-from-urlencoded</code>，会将表单内的数据转换为键值对，比如 <code>name=java&amp;age=23</code></p>
<h2 id="raw"><a href="#raw" class="headerlink" title="raw"></a>raw</h2><p>可以上传任意格式的文本，可以上传 text、json、xml、html 等</p>
<h2 id="binary"><a href="#binary" class="headerlink" title="binary"></a>binary</h2><p>相当于 <code>Content-Type:application/octet-stream</code>，从字面意思上看，只可以上传二进制数据，通常用来上传文件，由于没有键值，所以一次只能上传一个文件。</p>
<h2 id="multipart-form-data-与-x-www-form-urlencoded"><a href="#multipart-form-data-与-x-www-form-urlencoded" class="headerlink" title="multipart&#x2F;form-data 与 x-www-form-urlencoded"></a>multipart&#x2F;form-data 与 x-www-form-urlencoded</h2><ul>
<li><code>multipart/form-data</code>：可以上传文件等二进制数据，也可以上传表单键值对，最后会转化为一条信息</li>
<li><code>x-www-form-urlencoded</code>：只能上传键值对，并且键值对都是间隔分开的</li>
</ul>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>Postman</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>SIT与UAT的区别</title>
    <url>/2022/09/21/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/SIT%E4%B8%8EUAT%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="SIT-与-UAT-的区别"><a href="#SIT-与-UAT-的区别" class="headerlink" title="SIT 与 UAT 的区别"></a>SIT 与 UAT 的区别</h1><p>在企业级软件的测试过程中，经常会划分为三个阶段：单元测试、SIT 和 UAT。</p>
<p>如果开发人员足够，通常还会在 SIT 之前引入代码审查机制(Code Review)来保证软件符合客户需求且流程正确。</p>
<p>下面简单介绍一下 SIT 和 UAT 的基本情况。</p>
<p>SIT(System Integration Testing)系统集成测试，也叫做集成测试，是软件测试的一个术语，在其中单独的软件模块被合并和作为一个组测试。它在单元测试以后和在系统测试之前。集成测试在已经被单元测试检验后进行作为它的输入模式，组织它们在更大的集合，和递送，作为它的输出，集成系统为系统测试做准备。集成测试的目的是校验功能、性能和可靠性要求，配置在主设计项目中。</p>
<p>UAT(User Acceptance Testing)用户验收测试，通常是由最终软件的用户（通常这些用户不了解软件的具体逻辑，而对业务逻辑却相当熟悉）进行的测试，因此是面向最终用户的测试，结束之后通常就可以发布生产环境。</p>
<h2 id="区别与联系"><a href="#区别与联系" class="headerlink" title="区别与联系"></a>区别与联系</h2><p>SIT 是集成测试，UAT 是验收测试</p>
<ul>
<li><p>从时间上看，UAT 要在 SIT 后面，UAT 测试要在系统测试完成后才开始。</p>
</li>
<li><p>从测试人员看，SIT 由公司的测试员来测试，而 UAT 一般是由用户来测试。</p>
</li>
</ul>
<p>它们两个之间的专注点是不一样的。UAT 主要是从用户层面这些去考虑和着手测试，而 SIT 主要是系统的各个模块的集成测试。这在整个软件过程理论的基础知识中相当重要的。理论上讲 SIT 是由专业的测试人员去完成，UAT 是由用户去做的。</p>
<p>如果按照规范来的话，做 UAT 测试的人一定是要对业务很精通的，并且是具有代表性的用户，关注的东西就是业务流程是否通畅是否符合业务的需要，主要以需求分析文档为重要参考，还有一些用户的操作习惯等等一系列的东西。</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>流程</tag>
      </tags>
  </entry>
  <entry>
    <title>Terminal、iTerm2、zsh与oh-my-zsh</title>
    <url>/2022/08/03/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/Terminal%E3%80%81iTerm2%E3%80%81zsh%E5%92%8Coh-my-zsh/</url>
    <content><![CDATA[<p>作为一名程序员，我们跟终端打交道的频率非常地高，终端的是否好用，往往跟我们的效率关系很大。一开始用的是 MacOS 自带的 zsh，有时候在敲很长的 shell 命令时，发现打错了某个字符，想要修改，很是麻烦。这让我不禁想，要是终端命令也能用 vi 来编辑该多好！！！于是开始捣鼓，我发现了 oh-my-zsh</p>
<span id="more"></span>

<h2 id="1-1-Terminal、iTerm2、zsh、bash之间的关系"><a href="#1-1-Terminal、iTerm2、zsh、bash之间的关系" class="headerlink" title="1.1 Terminal、iTerm2、zsh、bash之间的关系"></a>1.1 Terminal、iTerm2、zsh、bash之间的关系</h2><p>在使用 oh-my-zsh 之前，先了解一下 Terminal、iTerm2、zsh、bash 之间的关系。</p>
<p>Terminal、 iTerm2 跟 zsh、bash 并不是一类东西。</p>
<p>zsh 和 bash 是两种不同的 shell，是区别于『核』的『壳』，借助 shell，我们可以通过命令对系统进行操作。zsh 和 bash 之间有一定的兼容性。</p>
<p>而 Terminal 和 iTerm2 是相同种类的 APP，是各种 shell 的 GUI，可以通过 Terminal.app 来跑 zsh 和 bash，也可以通过 iTerm2 来运行。只是相比之下，iTerm2 比 MacOS 自带的 Terminal 要好用得多。</p>
<p>此外，像 Jetbrains IDE 和 Visual Studio Code 等内置的终端，跟 Terminal 和 iTerm2 也是同一类应用程序。</p>
<h2 id="1-2-iTerm2"><a href="#1-2-iTerm2" class="headerlink" title="1.2 iTerm2"></a>1.2 <a href="https://iterm2.com/index.html">iTerm2</a></h2><p>iTerm2 的配色主题方案：<a href="https://iterm2colorschemes.com/">https://iterm2colorschemes.com/</a></p>
<h2 id="1-3-oh-my-zsh简介与官网"><a href="#1-3-oh-my-zsh简介与官网" class="headerlink" title="1.3 oh-my-zsh简介与官网"></a>1.3 oh-my-zsh简介与官网</h2><p>官网与项目地址：</p>
<ul>
<li><a href="https://ohmyz.sh/">https://ohmyz.sh/</a></li>
<li><a href="https://github.com/ohmyzsh/ohmyzsh">https://github.com/ohmyzsh/ohmyzsh</a></li>
</ul>
<p>oh-my-zsh 可以理解成 zsh 的超级增强版，如果是 MacOS，且默认的 shell 是 zsh，那安装是相当容易的，只需要根据 GitHub 上的教程，执行以下命令，就可以安装好了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>安装后，oh-my-zsh 会将自己的配置 <code>.zshrc</code> 去覆盖旧的，而旧的 <code>.zshrc</code> 会被备份为 <code>.zshrc.pre-oh-my-zsh</code>，该备份有两个用处：</p>
<ol>
<li>可以将自己原先的配置，例如 Java 相关环境变量，移动到新的 <code>.zshrc</code> 配置中</li>
<li>当以后要写在 oh-my-zsh 时，直接在终端执行 uninstall_oh_my_zsh 命令，程序会将所有与 oh-my-zsh 有关东西都删除掉，然后还原该备份文件为 <code>.zshrc</code></li>
</ol>
<p>当然，我相信你用了它之后，不会想卸载的，作为 zsh 的超级增强版，oh-my-zsh 真的很强大，很易用</p>
<p>oh-my-zsh 本质跟 zsh 没有什么区别，该怎么配置，还是怎么配置，但 oh-my-zsh 在原基础上新增了插件和主题机制，同时提供了很多实用的别名（alias）</p>
<p>oh-my-zsh 在安装后，便自带了很多插件和主题，我们只需要在 <code>.zshrc</code> 中根据注释，在 plugins 中加入想要的启动的插件即可，主题也同理</p>
<blockquote>
<p>但是要注意，许多主题如果想要正常地显示，可能需要特定的字体补丁。即需要安装 <a href="https://github.com/powerline/fonts">Powerline Font</a> 或者 <a href="https://github.com/ryanoasis/nerd-fonts">Nerd Font</a>，对于这两种的字体补丁的介绍见：<a href="/pages/c48a5b/">字体</a></p>
<p>例如 agnoster 主题，如果没有合适的字体补丁，就会乱码</p>
<img src="http://img.puppetdev.top/image/note/9d5bbe83622b201dec9fdabadea6c6f4.png" alt="image-20221109130141997" style="zoom:50%;" />

<p>用了 Powerline Font 或 Nerd Front 后，就正常了</p>
</blockquote>
<p>此外，oh-my-zsh 还支持第三方的插件和主题，只需要下载后，放置到 <code>~/.oh-my-zsh/custom</code> 目录下即可启动</p>
<h2 id="1-4-推荐的插件"><a href="#1-4-推荐的插件" class="headerlink" title="1.4 推荐的插件"></a>1.4 推荐的插件</h2><p>插件也不宜启动太多，oh-my-zsh 的作者也提到，如果插件太多，会影响到 shell 的启动速度</p>
<ul>
<li><p>vi-mode：首推，也是我想要用 oh-my-zsh 的原因（虽然其他的很多也可以，但挡不住它简单）</p>
</li>
<li><p>git：提供很多 git 命令的缩写（别名）</p>
</li>
<li><p>autojump：快速跳转到最近的文件夹</p>
</li>
<li><p>zsh-syntax-highlighting：命令高亮，且如果路径正确，会带下划线</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到 ~/.oh-my-zsh/custom/plugins 目录下后执行下面命令</span></span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git </span><br></pre></td></tr></table></figure>


</li>
<li><p>zsh-autosuggestions：自动补全可能的路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到 ~/.oh-my-zsh/custom/plugins 目录下后执行下面命令</span></span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="1-5-推荐的主题"><a href="#1-5-推荐的主题" class="headerlink" title="1.5 推荐的主题"></a>1.5 推荐的主题</h2><p>每个人的 the right-one 都不同，可以到<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">这里</a>去找</p>
<p>其他三方主题推荐：</p>
<ul>
<li><a href="https://github.com/romkatv/powerlevel10k">https://github.com/romkatv/powerlevel10k</a></li>
</ul>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk中java、javax、sun和org包的区别</title>
    <url>/2022/08/18/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/jdk%E4%B8%ADjava%E3%80%81javax%E3%80%81sun%E5%92%8Corg%E5%8C%85%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>JDK 中有以下一类基础类库包，java、javax、sun、org，这些包有什么区别呢？</p>
<span id="more"></span>

<p>ava、javax、org、sun 包都是 jdk 提供的类包，且都是在 rt.jar 中。rt.jar 是 JAVA 基础类库（java 核心 [框架](<a href="https://so.csdn.net/so/search?q">https://so.csdn.net/so/search?q</a> &#x3D; 框架 &amp; spm&#x3D;1001.2101.3001.7020)中很重要的包），包含 lang 在内的大部分功能，而且 rt.jar 默认就在根 classloader 的加载路径里面，所以放在 classpath 是多此一举 。他们之间的区别具体如下：</p>
<h2 id="java"><a href="#java" class="headerlink" title="java.*"></a><code>java.*</code></h2><p>java SE 的标准库，是 java 标准的一部分，是对外承诺的 java 开放接口，通常要保持向后兼容，一般不会轻易修改。包括其他厂家的在内，所有 jdk 的实现，在 java.* 上都是一样的。</p>
<h2 id="javax"><a href="#javax" class="headerlink" title="javax.*"></a><code>javax.*</code></h2><p>也是 java 标准的一部分，但是没有包含在标准库中，一般属于标准库的扩展。通常属于某个特定领域，不是一般性的 api。</p>
<p>所以以扩展的方式提供 api，以避免 jdk 的标准库过大。当然某些早期的 javax，后来被并入到标准库中，所以也应该属于新版本 JDK 的标准库。比如 jmx，java 5 以前是以扩展方式提供，但是 jdk5 以后就做为标准库的一部分了，所有 javax.management 也是 jdk5 的标准库的一部分。</p>
<h2 id="com-sun"><a href="#com-sun" class="headerlink" title="com.sun.*"></a><code>com.sun.*</code></h2><p>是 sun 的 hotspot 虚拟机中 <code>java.*</code> 和 <code>javax.*</code> 的实现类。因为包含在 rt 中，所以我们也可以调用。但是因为不是 sun 对外公开承诺的接口，所以根据实现的需要随时增减，因此在不同版本的 hotspot 中可能是不同的，而且在其他的 jdk 实现中是没有的，调用这些类，可能不会向后兼容，<strong>所以一般不推荐使用</strong>。</p>
<h2 id="org-omg"><a href="#org-omg" class="headerlink" title="org.omg.*"></a><code>org.omg.*</code></h2><p>是由企业或者组织提供的 java 类库，大部分不是 sun 公司提供的，同 <code>com.sun.*</code>，不具备向后兼容性，会根据需要随时增减。其中比较常用的是 w3c 提供的对 XML、网页、服务器的类和接口。</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>不为人知的搜索技巧</title>
    <url>/2022/10/05/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E4%B8%8D%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7(%E4%BA%BA%E8%82%89)/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="不为人知的搜索技巧"><a href="#不为人知的搜索技巧" class="headerlink" title="不为人知的搜索技巧"></a>不为人知的搜索技巧</h1><h2 id="一张照片查出你的拍摄地点"><a href="#一张照片查出你的拍摄地点" class="headerlink" title="一张照片查出你的拍摄地点"></a>一张照片查出你的拍摄地点</h2><p>随着智能手机的普及，现在人们大部分使用手机进行拍照，而大多数相机已经默认开启地理位置。在开启了这种功能的情况下拍摄的照片会自动存有你所拍照地点的经纬度信息：</p>
<img src="http://img.puppetdev.top/image/note/b091d8fd1c4f25e6177c4c8384c72045.png" alt="image-20210904125524453" style="zoom: 25%;" />

<p>有了经纬度信息，我们可以在 MagicExif 软件里查询到照片拍摄地的具体地址（精确到门牌号的那种地步！！！）</p>
<h2 id="语音通话获取IP地址"><a href="#语音通话获取IP地址" class="headerlink" title="语音通话获取IP地址"></a>语音通话获取IP地址</h2><p>我们在 QQ 聊天时都是通过数据进行传输，那么使用一个抓包工具，只要数据传输到对方并且对方在线，我们就可以获取到对方的 IP 信息：</p>
<p><img src="http://img.puppetdev.top/image/note/650928f8f406a2d25424523a2c1bb246.png" alt="image-20210904125621675"></p>
<p>当我们打开这个工具的时候，只需要给对方拨打一个电话，不管对方有没有接听，你都可以获取到对方的 IP 地址：</p>
<h2 id="通过IP进行定位"><a href="#通过IP进行定位" class="headerlink" title="通过IP进行定位"></a>通过IP进行定位</h2><p>当我们获取到了对方的 IP 地址之后，也可以通过 IP 进行大概位置的定位（有五公里以内的误差）：</p>
<p>IP 查询网址：<a href="http://www.ipplus360.com/">www.ipplus360.com</a></p>
<p><img src="http://img.puppetdev.top/image/note/86066fe490919b70996ace71e85e0cf4.png" alt="image-20210904125722445"></p>
<h2 id="利用经纬度进行二次解析"><a href="#利用经纬度进行二次解析" class="headerlink" title="利用经纬度进行二次解析"></a>利用经纬度进行二次解析</h2><p>当我们通过IP地址进行查询后可以获得对方的大概地理位置，如果想进行二次精确定位的话，我们可以复制经纬度，在解析网站里面进行查询：</p>
<p>经纬度解析网站：map.yanue.net</p>
<p><img src="http://img.puppetdev.top/image/note/ee0acd6cd4e073e3255a9cc7882b919e.png" alt="image-20210904125804786"></p>
<h2 id="通过邮箱-手机号查询你注册过的网站"><a href="#通过邮箱-手机号查询你注册过的网站" class="headerlink" title="通过邮箱&#x2F;手机号查询你注册过的网站"></a>通过邮箱&#x2F;手机号查询你注册过的网站</h2><p>查询网址：<a href="http://www.reg007.com/">www.reg007.com</a></p>
<p>这个网站就是利用你提交的信息去进行模拟注册来查询是否在该平台已经注册过：</p>
<p><img src="http://img.puppetdev.top/image/note/d8bfac7abd30abccc3e3b6ca2bab66ea.png" alt="image-20210904125847384"></p>
<h2 id="利用支付宝查询你的名字"><a href="#利用支付宝查询你的名字" class="headerlink" title="利用支付宝查询你的名字"></a>利用支付宝查询你的名字</h2><p>随意转账一笔大额资金给对方，这时，为了资金安全，支付宝会显示对方的名字，要求你补全对方的姓氏。</p>
<p>那么，我们可以使用常用的姓氏一个个进行尝试来暴力破解获取到对方全名。</p>
<p><img src="http://img.puppetdev.top/image/note/2b23236a8fbd5a4f9ac434ceb525880f.png" alt="image-20210904125928662"></p>
<h2 id="把知道的信息丢给百度查询"><a href="#把知道的信息丢给百度查询" class="headerlink" title="把知道的信息丢给百度查询"></a>把知道的信息丢给百度查询</h2><img src="http://img.puppetdev.top/image/note/3b604378bffe03ebd37a1cec2cf66288.png" alt="image-20210904130004300" style="zoom:50%;" />

<p>这只是一个例子，不仅是QQ，还有 微信&#x2F;常用ID&#x2F;手机号 全部都可以进行查询，不法分子就可以利用这些信息进行电信诈骗！</p>
<h2 id="防止被人肉的措施："><a href="#防止被人肉的措施：" class="headerlink" title="防止被人肉的措施："></a>防止被人肉的措施：</h2><ol>
<li>不要在网络上留下自己的QQ，手机号码等相关个人信息，否则会被搜索引擎保存成快照，从而被不法分子所获取；</li>
<li>不要在所有网站使用同一个用户名；</li>
<li>最好使用两张手机卡，一张日常通话使用，另一张在网上注册信息时用于接收验证码等操作；</li>
<li>QQ，微信等社交软件最好不要使用同一个账户。</li>
</ol>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>搜索技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>从0到网站部署_软件准备</title>
    <url>/2022/09/21/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E4%BB%8E0%E5%88%B0%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%EF%BC%9A%E8%BD%AF%E4%BB%B6%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h1 id="从0到网站部署-软件准备"><a href="#从0到网站部署-软件准备" class="headerlink" title="从0到网站部署_软件准备"></a>从0到网站部署_软件准备</h1><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>以下推荐适合有点编程基础，或者想快速搭建个人网站的，如果你是想锻炼自己的开发能力，那你就自己从 0 开始 codeing。</p>
<p>我个人非常推荐基于 PHP 开源的 CMS 系统 WordPress，虽然不少人鄙视 php，但不得不承认 php 在个人网站和中小企业网站上还是很值得选择的。</p>
<p>WordPress 基本上满足个人网站的功能，用户注册，登陆，内容发布，管理，评论等，而且扩展性强，主题模板和功能插件非常丰富，即使没有 php 编程的基础也可以搭建一套完美的网站系统，如果有 php 开发技术也可以根据需要进行二次开发。</p>
<p>这里就不多介绍了，有需要的可以自己百度。当然 Python，Java 等也都有类似 WordPress 开源的系统，具体的大家可以百度关键词，例如‘Python 开源cms系统’。</p>
<h2 id="SEO搜索"><a href="#SEO搜索" class="headerlink" title="SEO搜索"></a>SEO搜索</h2><ol>
<li><p>网站上线后，要主动向各个搜索引擎提交自己的网站入口，<a href="http://www.baidusourl.com/%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%88%AB%E4%BA%BA%E5%B0%B1%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E7%BD%91%E7%AB%99%E5%90%8D%E7%A7%B0%E6%90%9C%E7%B4%A2%E5%88%B0%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E3%80%82">http://www.baidusourl.com/，这样别人就可以通过网站名称搜索到你的网站。</a></p>
</li>
<li><p>生成自己的网站页面地图。有利于搜索引擎收录网站内容，以便用户使用关键词搜索到你的网站内容。如果你使用的是 WordPress，那极力推荐你使用 Baidu Sitemap Generator 这个插件，可以自动生成一个静态的站点地图页面，可以手动提交给搜索引擎加快百度的收录速度。</p>
</li>
</ol>
<p>以上只是最入门也是必备的 SEO 搜索优化，更多的优化，大家可以百度搜索关键词“网站SEO搜索优化”</p>
<h2 id="网站安全"><a href="#网站安全" class="headerlink" title="网站安全"></a>网站安全</h2><h3 id="必备安全功能"><a href="#必备安全功能" class="headerlink" title="必备安全功能"></a>必备安全功能</h3><ol>
<li>记录注册用户的 IP 地址。这个简单，一个字段存数据库就好了。</li>
<li>防止访客 F5 频繁刷新页面。网站使用的技术不同，实现方式也不相同，大致原理就是，根据访问用户的ip，用session记录1秒内访问的次数，如果访问的过多就输出拒绝访问的提示。如果这个功能没有，长按F5就可以把你的网站服务器刷爆。</li>
<li>黑名单功能。就是来防止用户恶意评论等不友好的操作或直接防止用户访问（一般这个可以通过服务器配置文件，配置禁止访问的IP地址）。基本上都是在用户使用某种网站功能时 先判断用户IP是否在黑名单中，如果在，禁止使用，否则就放行。如果没有这种功能，遇到了变态用户会恶心到你吐。如果你使用的是WordPress，这里我也推荐你使用WP-Ban这个插件。</li>
</ol>
<h3 id="接入第三方的云加速平台"><a href="#接入第三方的云加速平台" class="headerlink" title="接入第三方的云加速平台"></a>接入第三方的云加速平台</h3><p>当然这个平台的高级功能是收费的，但个人网站使用其免费功能也就够用了，例如 <strong>360 云加速</strong>，<strong>百度云加速</strong>，<strong>抗 D 保</strong>等平台。</p>
<p>这里我首推 360 云加速，毕竟是做安全出身；个人认为使用加速平台的免费功能最大的好处就是可以隐藏网站真实的 IP 地址，其次是支持配置 IP 黑名单（这个功能有些平台是收费的），也有静态文件缓存，加速，图片防盗链等功能。</p>
<h2 id="用户统计"><a href="#用户统计" class="headerlink" title="用户统计"></a>用户统计</h2><ol>
<li>根据自己需要开发用户统计的功能。这个不多讲，根据选择的技术方案实现也各不相同。</li>
<li>接入第三方的统计平台。个人使用过<strong>百度统计</strong>和 <a href="https://web.umeng.com/main.php">CNZZ 数据专家</a>。推荐使用后者，功能很强大。日访问量，独立IP，访客ip….等等</li>
</ol>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上只是经验之谈，都是些最基本，但也是必备的功能。</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>自建网站</tag>
      </tags>
  </entry>
  <entry>
    <title>从0到网站部署_硬件准备</title>
    <url>/2022/09/21/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E4%BB%8E0%E5%88%B0%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%EF%BC%9A%E7%A1%AC%E4%BB%B6%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h1 id="从0到网站部署-硬件准备"><a href="#从0到网站部署-硬件准备" class="headerlink" title="从0到网站部署_硬件准备"></a>从0到网站部署_硬件准备</h1><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>网站上线运营就必须要购买域名，而万网是选择相对比较多的，万网目前在阿里旗下，首先你要有一个阿里云的账号，阿里云官方网站 <a href="https://www.aliyun.com/%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BF%9B%E5%85%A5%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%8C%E7%84%B6%E5%90%8E%E8%B4%AD%E4%B9%B0%E5%9F%9F%E5%90%8D%E3%80%82%E5%9F%9F%E5%90%8D%E7%9A%84%E4%BB%B7%E6%A0%BC%E4%B8%8D%E6%98%AF%E5%BE%88%E8%B4%B5">https://www.aliyun.com/，然后进入管理控制台，然后购买域名。域名的价格不是很贵</a> ，一年也就几十元吧。</p>
<p>不过起域名是件很头疼的事情，域名要简单，好记，朗朗上口，最好和自己以后的网站昵称紧密相关。不过你会发现，你能想到的域名基本上都被注册过了，域名购买之后建议去实名认证。</p>
<h2 id="ICP备案"><a href="#ICP备案" class="headerlink" title="ICP备案"></a>ICP备案</h2><h3 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h3><p>网站备案是国家相关部门要求的，在国内的所有网站都必须备案(使用海外服务器则不需要备案)，备案之后，域名备案的主体信息及运营者将对域名提供的内容负法律责任的。</p>
<p>未备案的域名不能使用国内服务器；未备案的域名不能使用很多主流的推广手段，例如百度推广和微信推广，同时也会影响网站信誉度。</p>
<h3 id="How"><a href="#How" class="headerlink" title="How"></a>How</h3><p>像阿里云，百度云，腾讯云都会提供域名备案的业务，但建议你使用哪里的服务器就在哪里备案，例如你使用的是阿里云，那你就在阿里云进行备案。因为有些云服务器提供商会要求只能接入自己平台上备案的域名。我记得我之前是在百度云备案的域名，但是在接入阿里云服务器无法接入，那就蛋疼了。</p>
<p>备案没有想象中那么复杂，但也不简单，填写各种信息，各个平台都有自己的备案流程和教程，自己可以看看，大体相同。整个备案流程下来基本上 要20天左右。因此，只要你想运营个人网站，第一步就是准备域名和备案，省的耽误你网站上线。</p>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>要把网站代码部署到服务器中才能让别人访问。</p>
<p>关于服务器的选择</p>
<ol>
<li><p>云虚拟主机：价格便宜，虚拟主机只能使用其预装好的web server和数据库</p>
<p>例如，阿里云虚拟主机 Window版本下是IIS和SQL Server，Linux版本下是Apache和MySQL，这两种都不支持Java Web应用。通过可视化界面控制，用户不需要自己搭建网站的运行环境和数据库等，只需用户上传代码即可。适合访问量较低的个人网站使用。具体的使用方法可百度关键词“云虚拟部署网站”</p>
</li>
<li><p>云服务：价格较贵，相当于用户远程控制的一台电脑，用户可根据需要搭建不同的应用环境，</p>
<p>例如用户可在云服务器上搭建javaweb php asp.net等多种网站部署环境，在购买云服务器时，可以购买镜像（即网站或应用程序的开发环境）勿需用户自己搭建，支持一键部署，用户也可以选择公共镜像，自己搭建网站的运行环境和数据库等。</p>
</li>
<li><p>类似百度 BAE 的PaaS平台，此平台可集成多种应用的运行环境，例如下图</p>
<img src="http://img.puppetdev.top/image/note/979982ad7eabd91d40e2c1d0dbbd2ed2.png" alt="image-20210904131539628" style="zoom:67%;" />

<p>只能选择一种集成环境环境，一旦选择不能改变，此平台的好处是用户不用关心开发环境，只要将代码上传发布即可。缺点就是，使用了此平台还要购买云数据库，因此最后，购买平台+购买云数据库的价格相当于使用云服务器的价钱。</p>
</li>
</ol>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>域名解析的意思，就是把申请的已备案成功后的域名指向部署网站服务器的ip地址或二级域名，解析成功后，别人就可以通过域名访问你的网站了。</p>
<p>首先，在哪里购买的域名，就在哪设置域名解析，假如你的域名是在阿里万网购买的，登陆阿里云的控制台后，进入域名管理界面，如下图</p>
<p><img src="http://img.puppetdev.top/image/note/367e1de1cc9ac0b95053d2ae120a1295.png" alt="image-20210904131653752"></p>
<p>点击域名后面的‘解析’后，如下图</p>
<p><img src="http://img.puppetdev.top/image/note/803480fbaeacc26494b2e2c13448d1c7.png" alt="image-20210904131709884"></p>
<p>点击‘添加解析’，如下图，这里你要注意以下两点：</p>
<ol>
<li><p>记录类型的选择</p>
</li>
<li><p>记录值</p>
</li>
</ol>
<p>一般记录类型选择 A 或者 CNAME。</p>
<ul>
<li><p>当记录类型选择 A 时，那么记录值就填写<strong>部署网站服务器的 ip 地址</strong></p>
</li>
<li><p>当记录类型选择 CNAME 时，那么记录值就填写<strong>部署网站服务器的二级域名</strong></p>
</li>
</ul>
<p>一般如果你部署网站的环境选择的是类似百度 BAE 的 PaaS 平台，那么平台会提供一个二级域名，如果选择的是云虚拟机或云服务器则会提供一个 ip 地址。</p>
<p><img src="http://img.puppetdev.top/image/note/430a15f934bfcfab4546ee78ea6f25b3.png" alt="image-20210904131852710"></p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>自建网站</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透</title>
    <url>/2022/08/01/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<p>有时候我们还在开发，想一边开发一边分享给其他人体验和改进，但是又没有公网服务器供别人访问，又不是同一个局域网，该如何做呢？此时就需要进行“内网穿透”，让自己的本地电脑短暂地变成服务器（指定开放端口），使得其他人可以轻松访问。</p>
<span id="more"></span>

<h2 id="1-1-nps-npc"><a href="#1-1-nps-npc" class="headerlink" title="1.1 nps-npc"></a>1.1 nps-npc</h2><h3 id="1-1-1-简介"><a href="#1-1-1-简介" class="headerlink" title="1.1.1 简介"></a>1.1.1 简介</h3><p>nps 是一款轻量级、高性能、功能强大的内网穿透代理服务器。目前支持 tcp、udp 流量转发，可支持任何 tcp、udp 上层协议（访问内网网站、本地支付接口调试、ssh 访问、远程桌面，内网 dns 解析等等……），此外还支持内网 http 代理、内网 socks5 代理、p2p 等，并带有功能强大的 web 管理端。</p>
<ul>
<li>一台有公网 IP 的服务器（VPS）运行服务端（<strong>NPS</strong>）</li>
<li>一个或多个运行在内网的服务器或者 PC 运行客户端（<strong>NPC</strong>）</li>
</ul>
<p><img src="http://img.puppetdev.top/image/note/bffa74bb56b9925f18c769d383b9c2f8.png" alt="image.png"></p>
<h3 id="1-1-2-特点"><a href="#1-1-2-特点" class="headerlink" title="1.1.2 特点"></a>1.1.2 特点</h3><ul>
<li>Go 语言编写</li>
<li>支持跨平台</li>
<li>支持多种协议的代理</li>
<li>web 管理端</li>
</ul>
<h3 id="1-1-3-使用方法"><a href="#1-1-3-使用方法" class="headerlink" title="1.1.3 使用方法"></a>1.1.3 使用方法</h3><p><a href="https://github.com/ehang-io/nps/releases">https://github.com/ehang-io/nps/releases</a></p>
<h3 id="1-1-4-NPS"><a href="#1-1-4-NPS" class="headerlink" title="1.1.4 NPS"></a>1.1.4 NPS</h3><h4 id="1-1-4-1-安装配置"><a href="#1-1-4-1-安装配置" class="headerlink" title="1.1.4.1 安装配置"></a>1.1.4.1 安装配置</h4><p>找到自己服务器相应版本的 server：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~     </span><br><span class="line">wget https://github.com/cnlh/nps/releases/download/v0.23.2/linux_amd64_server.tar.gz     tar xzvf linux_amd64_server.tar.gz     </span><br><span class="line">cd ~/nps</span><br></pre></td></tr></table></figure>

<p>在 nps 目录下面会有一个 nps 可执行文件、conf 配置目录和 web 网页目录，我们只需要修改 <code>conf/nps.conf</code> 即可</p>
<p>需要改一下 <code>#web</code> 下面的几个参数，</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">web_host</span>=<span class="string"> 服务器IP或者域名     </span></span><br><span class="line"><span class="attr">web_username</span>=<span class="string"> admin（登录用户名）     </span></span><br><span class="line"><span class="attr">web_password</span>=<span class="string"> 你的密码     </span></span><br><span class="line"><span class="attr">web_port</span>=<span class="string">8080（web管理端口）</span></span><br></pre></td></tr></table></figure>

<p>修改 <code>#bridge</code> 可以更改 NPC 的连接端口。比如我们拿到一台权限受限的服务器，有防火墙，可能只有部分端口（80，443）可以出网，就需要修改成出网端口。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">## bridge     </span></span><br><span class="line"><span class="attr">bridge_type</span>=<span class="string">tcp     </span></span><br><span class="line"><span class="attr">bridge_port</span>=<span class="string">443       # 修改连接端口     </span></span><br><span class="line"><span class="attr">bridge_ip</span>=<span class="string">0.0.0.0</span></span><br></pre></td></tr></table></figure>

<h4 id="1-1-4-2-启动"><a href="#1-1-4-2-启动" class="headerlink" title="1.1.4.2 启动"></a>1.1.4.2 启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Mac/Linux</span>     </span><br><span class="line">./nps test|start|stop|restart|status  测试配置文件|启动|停止|重启|状态   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Windows</span>     </span><br><span class="line">nps.exe test|start|stop|restart|status 测试配置文件|启动|停止|重启|状态</span><br></pre></td></tr></table></figure>

<h3 id="1-1-5-NPC"><a href="#1-1-5-NPC" class="headerlink" title="1.1.5 NPC"></a>1.1.5 NPC</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./npc -server=你的IP:8024 -vkey=唯一验证密码 -type=tcp  </span><br></pre></td></tr></table></figure>

<p><img src="http://img.puppetdev.top/image/note/88fbf5d500a90eaf9a952f843b73cf1b.png" alt="image.png"></p>
<p>新建好客户端后，也可以在 <code>+</code> 中看到，详细的客户端连接命令：</p>
<p><img src="http://img.puppetdev.top/image/note/8278272b216a2ca8d57e52d84d391df6.png" alt="image.png"></p>
<h3 id="1-1-6-web管理端"><a href="#1-1-6-web管理端" class="headerlink" title="1.1.6 web管理端"></a>1.1.6 web管理端</h3><p>在客户端界面可以通过 <code>新增</code> 的方式添加客户端连接，每一个连接的 vkey 都是唯一区分的。</p>
<p>每一个客户端，在建立连接后，都可以建立多个不同协议的隧道，这一个个隧道就是不同的代理了。</p>
<p><img src="http://img.puppetdev.top/image/note/c4054891abc54d25e6579229d03ef5bf.png" alt="image.png"></p>
<p>通过不同的协议和端口就可以连接代理的内网机器。</p>
<h2 id="1-2-ngrok"><a href="#1-2-ngrok" class="headerlink" title="1.2 ngrok"></a>1.2 ngrok</h2><h3 id="1-2-1-体验先行"><a href="#1-2-1-体验先行" class="headerlink" title="1.2.1 体验先行"></a>1.2.1 体验先行</h3><p>国内的使用体验不是很好，即便有梯子，也不那么好用，之前折腾了半天，最后换成 natapp 一下子就搞定了</p>
<h3 id="1-2-2-使用流程"><a href="#1-2-2-使用流程" class="headerlink" title="1.2.2 使用流程"></a>1.2.2 使用流程</h3><ol>
<li><p>进入 ngrok 官网 <code>https://ngrok.com/download</code> 下载 ngrok</p>
</li>
<li><p>注册一个账号，登陆账号进入管理后台，获取 Token，即左侧的 Your Authtoken</p>
</li>
<li><p>打开命令行工具</p>
</li>
<li><p>切换到 ngrok 可执行文件所在目录，执行：<code>ngrok authtoken &#123;&#123;Token&#125;&#125;</code></p>
</li>
<li><p>然后就可以开启内网穿透服务了，输入以下命令：<code>ngrok http 8080</code></p>
<p>这样就可以实现将内网 8080 端口映射到外网域名，可以进行访问了</p>
</li>
</ol>
<h3 id="1-2-3-相关链接"><a href="#1-2-3-相关链接" class="headerlink" title="1.2.3 相关链接"></a>1.2.3 相关链接</h3><ol>
<li><a href="https://www.jianshu.com/p/53c72ae1446c">自建 ngrok 服务实现内网穿透</a></li>
<li><a href="https://segmentfault.com/a/1190000040463714">ngrok 实现内网穿透，端口映射，无需公网 ip 实现内网穿透</a></li>
<li><a href="https://jelly.jd.com/article/6006b1035b6c6a01506c8792">手把手教你搭建 ngrok 服务－轻松外网调试本机站点</a></li>
</ol>
<h2 id="1-3-natapp"><a href="#1-3-natapp" class="headerlink" title="1.3 natapp"></a>1.3 natapp</h2><h3 id="1-3-1-体验先行"><a href="#1-3-1-体验先行" class="headerlink" title="1.3.1 体验先行"></a>1.3.1 体验先行</h3><p>总体体验不错，有免费和收费两种通道，免费通道感觉速度也很快，但是需要实名认证。目前主要使用它来做简单的内网穿透。</p>
<h3 id="1-3-2-使用流程"><a href="#1-3-2-使用流程" class="headerlink" title="1.3.2 使用流程"></a>1.3.2 使用流程</h3><ol>
<li><p>进入 <a href="https://natapp.cn/">官网</a>，注册并下载客户端</p>
<p><img src="http://img.puppetdev.top/image/note/268c59026abae22be927055292d01a4c.png" alt="image-20220821004721200"></p>
</li>
<li><p>根据 <a href="https://natapp.cn/article/natapp_newbie">快速入门文档</a>，购买免费隧道，并获取 authtoken</p>
</li>
<li><p>修改客户端执行权限 <code>chmod x natapp</code></p>
</li>
<li><p>执行命令以启动代理：<code>./natapp -authtoken=xxxxxxx</code></p>
</li>
</ol>
<h3 id="1-3-3-相关链接"><a href="#1-3-3-相关链接" class="headerlink" title="1.3.3 相关链接"></a>1.3.3 相关链接</h3><h2 id="1-4-frp"><a href="#1-4-frp" class="headerlink" title="1.4 frp"></a>1.4 frp</h2><h3 id="1-4-1-简介"><a href="#1-4-1-简介" class="headerlink" title="1.4.1 简介"></a>1.4.1 简介</h3><p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</p>
<p><img src="http://img.puppetdev.top/image/note/7965455b08ab7fefa547a61ac6fe418e.png" alt="image.png"></p>
<h3 id="1-4-2-特点"><a href="#1-4-2-特点" class="headerlink" title="1.4.2 特点"></a>1.4.2 特点</h3><ul>
<li>客户端服务端通信支持 TCP、KCP 以及 Websocket 等多种协议。</li>
<li>端口复用，多个服务通过同一个服务端端口暴露。</li>
<li>跨平台，但是支持的比 nps 少一点</li>
<li>多种插件，提供很多功能</li>
</ul>
<h3 id="1-4-3-使用方法"><a href="#1-4-3-使用方法" class="headerlink" title="1.4.3 使用方法"></a>1.4.3 使用方法</h3><p>下载：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p>
<h4 id="1-4-3-1-通过rdp访问家里的机器"><a href="#1-4-3-1-通过rdp访问家里的机器" class="headerlink" title="1.4.3.1 通过rdp访问家里的机器"></a>1.4.3.1 通过rdp访问家里的机器</h4><ul>
<li>修改 frps.ini 文件，为了安全起见，这里最好配置一下身份验证，服务端和客户端的 common 配置中的 <code>token</code> 参数一致则身份验证通过：</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini    </span></span><br><span class="line"><span class="section">[common]</span>    </span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span>    </span><br><span class="line"><span class="comment"># 用于身份验证，请自行修改，要保证服务端与客户端一致    </span></span><br><span class="line"><span class="attr">token</span> = abcdefgh</span><br></pre></td></tr></table></figure>

<ul>
<li>启动 frps：<code>./frps -c ./frps.ini</code></li>
<li>修改 frpc.ini 文件，假设 frps 所在服务器的公网 IP 为 x.x.x.x：</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini  </span></span><br><span class="line"><span class="section">[common]</span>  </span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x  </span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span>  </span><br><span class="line"><span class="comment"># 用于身份验证，请自行修改，要保证服务端与客户端一致  </span></span><br><span class="line"><span class="attr">token</span> = abcdefgh  </span><br><span class="line">  </span><br><span class="line"><span class="section">[rdp]</span>  </span><br><span class="line"><span class="attr">type</span> = tcp  </span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span>  </span><br><span class="line"><span class="attr">local_port</span> = <span class="number">3389</span>  </span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span>  </span><br></pre></td></tr></table></figure>

<ul>
<li>启动 frpc：<code>./frpc -c ./frpc.ini</code></li>
<li>通过 rdp 访问远程的机器，地址为：<code>x.x.x.x:6000</code></li>
</ul>
<h4 id="1-4-3-2-开机自启"><a href="#1-4-3-2-开机自启" class="headerlink" title="1.4.3.2 开机自启"></a>1.4.3.2 开机自启</h4><p>针对 Windows 系统，为了便于使用，可以配置一下开机的时候静默启动。</p>
<ul>
<li>在 frpc.exe 的同级目录创建一个 start_frpc.vbs：</li>
</ul>
<figure class="highlight vbs"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27;start_frpc.vbs  </span></span><br><span class="line"><span class="comment">&#x27;请根据实际情况修改路径  </span></span><br><span class="line"><span class="built_in">CreateObject</span>(<span class="string">&quot;WScript.Shell&quot;</span>).Run <span class="string">&quot;&quot;&quot;D:\Program Files\frp_windows_amd64\frpc.exe&quot;&quot;&quot;</span> &amp; <span class="string">&quot;-c&quot;</span> &amp;<span class="string">&quot;&quot;&quot;D:\Program Files\frp_windows_amd64\frpc.ini&quot;&quot;&quot;</span>,<span class="number">0</span>  </span><br></pre></td></tr></table></figure>

<ul>
<li>复制 start_frpc.vbs 文件，打开以下目录，注意将 <code>&lt;USER_NAME&gt;</code> 修改为自己的用户名：<code>C:\Users\&lt;USER_NAME&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></li>
<li>鼠标右击，粘贴为快捷方式即可。</li>
</ul>
<h4 id="1-4-3-3-通过SSH访问公司内网机器"><a href="#1-4-3-3-通过SSH访问公司内网机器" class="headerlink" title="1.4.3.3 通过SSH访问公司内网机器"></a>1.4.3.3 通过SSH访问公司内网机器</h4><p>frps 的部署步骤同上。</p>
<ul>
<li>启动 frpc，配置如下：</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini  </span></span><br><span class="line"><span class="section">[common]</span>  </span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x  </span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span>  </span><br><span class="line"><span class="comment"># 用于身份验证，请自行修改，要保证服务端与客户端一致  </span></span><br><span class="line"><span class="attr">token</span> = abcdefgh  </span><br><span class="line">  </span><br><span class="line"><span class="section">[ssh]</span>  </span><br><span class="line"><span class="attr">type</span> = tcp  </span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span>  </span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span>  </span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span>  </span><br></pre></td></tr></table></figure>

<ul>
<li>通过 SSH 访问内网机器，假设用户名为 test：<code>ssh -oPort=6000 test@x.x.x.x</code></li>
</ul>
<h4 id="1-4-3-4-通过自定义域名访问部署于内网的Web服务"><a href="#1-4-3-4-通过自定义域名访问部署于内网的Web服务" class="headerlink" title="1.4.3.4 通过自定义域名访问部署于内网的Web服务"></a>1.4.3.4 通过自定义域名访问部署于内网的Web服务</h4><p>有时想要让其他人通过域名访问或者测试我们在本地搭建的 Web 服务，但是由于本地机器没有公网 IP，无法将域名解析到本地的机器，通过 frp 就可以实现这一功能，以下示例为 http 服务，https 服务配置方法相同， vhost_http_port 替换为 vhost_https_port， type 设置为 https 即可。</p>
<ul>
<li>修改 frps.ini 文件，设置 http 访问端口为 8080：</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini  </span></span><br><span class="line"><span class="section">[common]</span>  </span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span>  </span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">8080</span>  </span><br><span class="line"><span class="comment"># 用于身份验证，请自行修改，要保证服务端与客户端一致  </span></span><br><span class="line"><span class="attr">token</span> = abcdefgh  </span><br></pre></td></tr></table></figure>

<ul>
<li>启动 frps：<code>./frps -c ./frps.ini</code></li>
<li>修改 frpc.ini 文件，假设 frps 所在的服务器的 IP 为 x.x.x.x，local_port 为本地机器上 Web 服务对应的端口， 绑定自定义域名 <code>www.yourdomain.com</code>:</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini  </span></span><br><span class="line"><span class="section">[common]</span>  </span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x  </span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span>  </span><br><span class="line"><span class="comment"># 用于身份验证，请自行修改，要保证服务端与客户端一致  </span></span><br><span class="line"><span class="attr">token</span> = abcdefgh  </span><br><span class="line">  </span><br><span class="line"><span class="section">[web]</span>  </span><br><span class="line"><span class="attr">type</span> = http  </span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span>  </span><br><span class="line"><span class="attr">custom_domains</span> = www.yourdomain.com  </span><br></pre></td></tr></table></figure>

<ul>
<li>启动 frpc：<code>./frpc -c ./frpc.ini</code></li>
<li>将 <code>www.yourdomain.com</code> 的域名 A 记录解析到 IP <code>x.x.x.x</code>，如果服务器已经有对应的域名，也可以将 CNAME 记录解析到服务器原先的域名。</li>
<li>通过浏览器访问 <code>http://www.yourdomain.com:8080</code> 即可访问到处于内网机器上的 Web 服务。</li>
</ul>
<h4 id="1-4-3-5-对外提供简单的文件访问服务"><a href="#1-4-3-5-对外提供简单的文件访问服务" class="headerlink" title="1.4.3.5 对外提供简单的文件访问服务"></a>1.4.3.5 对外提供简单的文件访问服务</h4><p>通过 <code>static_file</code> 插件可以对外提供一个简单的基于 HTTP 的文件访问服务。</p>
<p>frps 的部署步骤同上。</p>
<ul>
<li>启动 frpc，启用 <code>static_file</code> 插件，配置如下：</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini  </span></span><br><span class="line"><span class="section">[common]</span>  </span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x  </span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span>  </span><br><span class="line"><span class="comment"># 用于身份验证，请自行修改，要保证服务端与客户端一致  </span></span><br><span class="line"><span class="attr">token</span> = abcdefgh  </span><br><span class="line">  </span><br><span class="line"><span class="section">[test_static_file]</span>  </span><br><span class="line"><span class="attr">type</span> = tcp  </span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span>  </span><br><span class="line"><span class="attr">plugin</span> = static_file  </span><br><span class="line"><span class="comment"># 要对外暴露的文件目录  </span></span><br><span class="line"><span class="attr">plugin_local_path</span> = /tmp/file  </span><br><span class="line"><span class="comment"># 访问url中会被去除的前缀，保留的内容即为要访问的文件路径  </span></span><br><span class="line"><span class="attr">plugin_strip_prefix</span> = static  </span><br><span class="line"><span class="attr">plugin_http_user</span> = abc  </span><br><span class="line"><span class="attr">plugin_http_passwd</span> = abc  </span><br></pre></td></tr></table></figure>

<ul>
<li>通过浏览器访问 <code>http://x.x.x.x:6000/static/</code> 来查看位于 <code>/tmp/file</code> 目录下的文件，会要求输入已设置好的用户名和密码。</li>
</ul>
<h4 id="1-4-3-6-常用功能"><a href="#1-4-3-6-常用功能" class="headerlink" title="1.4.3.6 常用功能"></a>1.4.3.6 常用功能</h4><h5 id="1-4-3-7-统计面板"><a href="#1-4-3-7-统计面板" class="headerlink" title="1.4.3.7 统计面板"></a>1.4.3.7 统计面板</h5><p>通过浏览器查看 frp 的状态以及代理统计信息展示。</p>
<p><strong>注：Dashboard 尚未针对大量的 proxy 数据展示做优化，如果出现 Dashboard 访问较慢的情况，请不要启用此功能。</strong></p>
<p>需要在 frps.ini 中指定 dashboard 服务使用的端口，即可开启此功能：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span>  </span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span>  </span><br><span class="line"><span class="comment"># dashboard用户名密码，默认都为admin  </span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin  </span><br><span class="line"><span class="attr">dashboard_pwd</span> = admin</span><br></pre></td></tr></table></figure>

<p>打开浏览器通过 <code>http://[server_addr]:7500</code> 访问 dashboard 界面，用户名密码默认为 <code>admin</code>。</p>
<h5 id="1-4-3-7-加密与压缩"><a href="#1-4-3-7-加密与压缩" class="headerlink" title="1.4.3.7 加密与压缩"></a>1.4.3.7 加密与压缩</h5><p>这两个功能默认是不开启的，需要在 frpc.ini 中通过配置来为指定的代理启用加密与压缩的功能，压缩算法使用 snappy：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini  </span></span><br><span class="line"><span class="section">[ssh]</span>  </span><br><span class="line"><span class="attr">type</span> = tcp  </span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span>  </span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span>  </span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">true</span>  </span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">true</span>  </span><br></pre></td></tr></table></figure>

<p>如果公司内网防火墙对外网访问进行了流量识别与屏蔽，例如禁止了 SSH 协议等，通过设置 <code>use_encryption = true</code>，将 frpc 与 frps 之间的通信内容加密传输，将会有效防止流量被拦截。</p>
<p>如果传输的报文长度较长，通过设置 <code>use_compression = true</code> 对传输内容进行压缩，可以有效减小 frpc 与 frps 之间的网络流量，加快流量转发速度，但是会额外消耗一些 CPU 资源。</p>
<h5 id="1-4-3-7-TLS"><a href="#1-4-3-7-TLS" class="headerlink" title="1.4.3.7 TLS"></a>1.4.3.7 TLS</h5><p>从 v0.25.0 版本开始 frpc 和 frps 之间支持通过 TLS 协议加密传输。通过在 <code>frpc.ini</code> 的 <code>common</code> 中配置 <code>tls_enable = true</code> 来启用此功能，安全性更高。</p>
<p>为了端口复用，frp 建立 TLS 连接的第一个字节为 0x17。</p>
<p><strong>注意：启用此功能后除 xtcp 外，不需要再设置 use_encryption。</strong></p>
<h5 id="1-4-3-7-代理限速"><a href="#1-4-3-7-代理限速" class="headerlink" title="1.4.3.7 代理限速"></a>1.4.3.7 代理限速</h5><p>目前支持在客户端的代理配置中设置代理级别的限速，限制单个 proxy 可以占用的带宽。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini  </span></span><br><span class="line"><span class="section">[ssh]</span>  </span><br><span class="line"><span class="attr">type</span> = tcp  </span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span>  </span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span>  </span><br><span class="line"><span class="attr">bandwidth_limit</span> = <span class="number">1</span>MB </span><br></pre></td></tr></table></figure>

<p>在代理配置中增加 <code>bandwidth_limit</code> 字段启用此功能，目前仅支持 <code>MB</code> 和 <code>KB</code> 单位。</p>
<h5 id="1-4-3-7-范围端口映射"><a href="#1-4-3-7-范围端口映射" class="headerlink" title="1.4.3.7 范围端口映射"></a>1.4.3.7 范围端口映射</h5><p>在 frpc 的配置文件中可以指定映射多个端口，目前只支持 tcp 和 udp 的类型。</p>
<p>这一功能通过 <code>range:</code> 段落标记来实现，客户端会解析这个标记中的配置，将其拆分成多个 proxy，每一个 proxy 以数字为后缀命名。</p>
<p>例如要映射本地 6000-6005, 6007 这 6 个端口，主要配置如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini  </span></span><br><span class="line"><span class="section">[range:test_tcp]</span>  </span><br><span class="line"><span class="attr">type</span> = tcp  </span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span>  </span><br><span class="line"><span class="attr">local_port</span> = <span class="number">6000</span>-<span class="number">6006</span>,<span class="number">6007</span>  </span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span>-<span class="number">6006</span>,<span class="number">6007</span>  </span><br></pre></td></tr></table></figure>

<p>实际连接成功后会创建 8 个 proxy，命名为 <code>test_tcp_0, test_tcp_1 … test_tcp_7</code>。</p>
<h2 id="1-5-ew"><a href="#1-5-ew" class="headerlink" title="1.5 ew"></a>1.5 ew</h2><h3 id="1-5-1-简介"><a href="#1-5-1-简介" class="headerlink" title="1.5.1 简介"></a>1.5.1 简介</h3><blockquote>
<p>EW 是一套便携式的网络穿透工具，具有 SOCKS v5 服务架设和端口转发两大核心功能，可在复杂网络环境下完成网络穿透。但是，现在工具已经不更新了。。。</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/QFzRdz9libEYibu8vK4b7IDbQXHyyevOJ4TsKV1JaxvxueKKEdYw2jcaJia2YgYcnPEHNyKmHDTVvictibt1IIYUtTQ/640?wx_fmt=png&random=0.5643900247770886&wxfrom=5&wx_lazy=1&wx_co=1&tp=wxpic" alt="图片"></p>
<h3 id="1-5-2-特点"><a href="#1-5-2-特点" class="headerlink" title="1.5.2 特点"></a>1.5.2 特点</h3><ol>
<li>轻量级，C 语言编写</li>
<li>可以设置多级代理</li>
<li>跨平台</li>
<li>但是只支持 Socks5 代理</li>
</ol>
<h3 id="1-5-3-使用方法"><a href="#1-5-3-使用方法" class="headerlink" title="1.5.3 使用方法"></a>1.5.3 使用方法</h3><p>以下所有样例，如无特殊说明代理端口均为 1080，服务均为 SOCKSv5 代理服务.</p>
<p>该工具共有 6 种命令格式（ssocksd、rcsocks、rssocks、lcx_slave、lcx_listen、lcx_tran）。</p>
<h4 id="1-5-3-1-正向SOCKS-v5服务器"><a href="#1-5-3-1-正向SOCKS-v5服务器" class="headerlink" title="1.5.3.1 正向SOCKS v5服务器"></a>1.5.3.1 正向SOCKS v5服务器</h4><p><code>./ew -s ssocksd -l 1080</code>  </p>
<h4 id="1-5-3-2-反弹SOCKS-v5服务器"><a href="#1-5-3-2-反弹SOCKS-v5服务器" class="headerlink" title="1.5.3.2 反弹SOCKS v5服务器"></a>1.5.3.2 反弹SOCKS v5服务器</h4><p>这个操作具体分两步：</p>
<ul>
<li>先在一台具有公网 ip 的主机 A 上运行以下命令：<code>./ew -s rcsocks -l 1080 -e 8888</code>   </li>
<li>在目标主机 B 上启动 SOCKS v5 服务 并反弹到公网主机的 8888 端口：<code>./ew -s rssocks -d 1.1.1.1 -e 8888</code></li>
</ul>
<p>   </p>
<p>成功。</p>
<h3 id="1-5-4-多级级联"><a href="#1-5-4-多级级联" class="headerlink" title="1.5.4 多级级联"></a>1.5.4 多级级联</h3><p>工具中自带的三条端口转发指令， 它们的参数格式分别为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ew -s lcx_listen -l  1080   -e 8888</span>    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ew -s lcx_tran   -l  1080   -f 2.2.2.3 -g 9999</span>    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ew -s lcx_slave  -d 1.1.1.1 -e 8888    -f 2.2.2.3  -g  9999</span>  </span><br></pre></td></tr></table></figure>

<p>通过这些端口转发指令可以将处于网络深层的基于 TCP 的服务转发至根前,比如 SOCKS v5。首先提供两个“二级级联”本地 SOCKS 测试样例：</p>
<h4 id="1-5-4-1-lcx-tran-的用法"><a href="#1-5-4-1-lcx-tran-的用法" class="headerlink" title="1.5.4.1 lcx_tran 的用法"></a>1.5.4.1 lcx_tran 的用法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ew -s ssocksd  -l 9999</span>  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ew -s lcx_tran -l 1080 -f 127.0.0.1 -g 9999</span>  </span><br></pre></td></tr></table></figure>

<h4 id="1-5-4-2-lcx-listen、lcx-slave的用法"><a href="#1-5-4-2-lcx-listen、lcx-slave的用法" class="headerlink" title="1.5.4.2 lcx_listen、lcx_slave的用法"></a>1.5.4.2 lcx_listen、lcx_slave的用法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ew -s lcx_listen -l 1080 -e 8888</span>  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ew -s ssocksd    -l 9999</span>  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ew -s lcx_slave  -d 127.0.0.1 -e 8888 -f 127.0.0.1 -g 9999</span>  </span><br></pre></td></tr></table></figure>

<p>再提供一个“三级级联”的本地 SOCKS 测试用例以供参考</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ew -s rcsocks -l 1080 -e 8888</span>   </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ew -s lcx_slave -d 127.0.0.1 -e 8888 -f 127.0.0.1 -g 9999</span>    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ew -s lcx_listen -l 9999 -e 7777</span>    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ew -s rssocks -d 127.0.0.1 -e 7777</span>  </span><br></pre></td></tr></table></figure>

<p>数据流向: <code>SOCKS v5 -&gt; 1080 -&gt; 8888 -&gt; 9999 -&gt; 7777 -&gt; rssocks</code></p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
        <tag>ngrok</tag>
        <tag>natapp</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端联调之跨域问题</title>
    <url>/2022/10/23/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%81%94%E8%B0%83%E4%B9%8B%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>本地计算机同时起了 前端 和 后端 项目，想要进行联调。</p>
<ul>
<li>前端项目为 vue 3.0，端口为 5173</li>
<li>后端项目为 Django，端口为 8000</li>
</ul>
<p>此时出现了『跨域』问题，需要解决。</p>
<span id="more"></span>

<p>开发环境下，vue 会占用一个端口，这里是 localhost:5173，而 djangorestframework 也会占用一个端口，比如 localhost:8000，那么 localhost:5137 需要获取 localhost:8000 的数据进行联调，因此我们将前端 demo 中 RestApi.vue 中请求的接口由 api&#x2F;users 改为 <a href="http://127.0.0.1:8000/users.json">http://127.0.0.1:8000/users.json</a> </p>
<blockquote>
<p>实际开发中通过配置文件来解决这个替换的问题。</p>
</blockquote>
<p>实际执行的过程中，get 请求报错的结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">&#x27;http://127.0.0.1:8000/users.json&#x27;</span> <span class="keyword">from</span> origin <span class="string">&#x27;http://localhost:5137&#x27;</span> has been blocked by CORS policy: No <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> header <span class="keyword">is</span> present on the requested resource.</span><br></pre></td></tr></table></figure>

<p>这里翻译成中文就是，跨域资源共享（CORS）策略阻止了从 localhost:5137 到 127.0.0.1:8000 的访问。那么什么是<strong>跨域资源共享</strong> ，这里得解释下：</p>
<p>跨域资源共享的目的是共享，它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制。显然，localhost:5137 到 localhost:8000 是不同源的，因此这里使用了跨域资源共享策略。但 CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。</p>
<p>整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p>
<p>因此，<strong>实现 CORS 通信的关键是服务器</strong>。<strong>只要服务器实现了 CORS 接口，就可以跨源通信</strong>。所以解决『跨域』问题的方法有两种：</p>
<ol>
<li><p>设置服务器端，让它允许 localhost:5137 的跨域访问，上线后再改回来，为什么要改回来呢，因为要避免跨域攻击，详见知乎<a href="https://www.zhihu.com/question/26379635[3]%E3%80%82">https://www.zhihu.com/question/26379635[3]。</a></p>
</li>
<li><p>将 127.0.0.1:8000 返回的 json 数据复制到 mock 的方式来联调。</p>
</li>
</ol>
<p>看来第二种比较方便，前提是需要学习如何使用 mock 来模拟后端 api。</p>
<p>为了在开发环境联调，我们将第一种方法进行到底，现在修改 django 的配置文件 settings.py 让它允许跨域。</p>
<p>1、安装 django-cors-headers</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install django-cors-headers</span><br></pre></td></tr></table></figure>

<p>2、修改 settings.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    ......</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    ......</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span></span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>此时，执行 get 请求顺利完成。</p>
<p>这里，我们填写用户名和邮箱，提交 post 请求后，users 表会新增一条记录，通过 get 请求也可以查询出来，大家可以动手试一试。</p>
<p>实际开发中，我们在请求后端接口时的 url 一般不会填写 ip 地址和端口，而是 ‘api&#x2F;xxx’ 这种形式，这里是为了展示如何在开发环境进行前后端联调而写成此种形式。</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>各个操作系统剖析命令的位置</title>
    <url>/2022/03/22/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%90%84%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%89%96%E6%9E%90%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>当在 Linux&#x2F;Unix 或者 Windows 的命令行执行某个命令时（例如 python），我时常会想这个命令处于什么位置呢？有没有重复的命令被安装在了不同的位置呢？该如何解决这个问题，该文先大概记录一下，后续持续优化</p>
<span id="more"></span>

<p>以 python 为例。</p>
<h2 id="Linux-Unix"><a href="#Linux-Unix" class="headerlink" title="Linux&#x2F;Unix"></a>Linux&#x2F;Unix</h2><ol>
<li><p>使用 which python 命令查看命令所在路径</p>
<img src="http://img.puppetdev.top/image/note/7b4a9f70cec28510296a070b2a839033.png" alt="image-20220322115945860" style="zoom:50%;" />

<p>可以看到 python 命令位于 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;python 路径下，但这还不够，因为该位置可能只是一个软连接，有可能真正的安装路径在其他地方。</p>
</li>
<li><p>用 <code>ll /usr/local/bin | grep python</code> 继续查看</p>
<img src="http://img.puppetdev.top/image/note/d6a0332abcecbb652a8033ff458872e8.png" alt="image-20220322120214237" style="zoom:50%;" />

<p>可以看到，该路径确实是一个软连接，实际的安装位置在 <code>/opt/homebrew/bin</code> 下到这里就可以找到某个命令的真实位置了。</p>
</li>
</ol>
<p>但是像 Python，我们可能安装了多个版本，只是因为路径的查找顺序问题，所以先找到了 <code>/usr/local/bin/python</code>，其他的就被忽略了，现在我们想要知道，哪个路径下，还有这个命令，该如何操作？</p>
<p>使用 <code>whereis python3</code> 可以找到哪个路径下，安装了这个命令：</p>
<img src="http://img.puppetdev.top/image/note/ead105a7e7733e362cd3b9b330a2085c.png" alt="image-20220322120745525" style="zoom:50%;" />

<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>Windows 上的很多命令跟 Linux&#x2F;Unix 上的不一样，两个几乎完全不同的体系。如果想要在 Windows 上确认命令的位置，一般只需要 where 命令即可，它会列举出要查找的命令的所有位置。</p>
<img src="http://img.puppetdev.top/image/note/a836bc70ab096246b47e5836ff4061da.png" alt="Snipaste_2022-04-10_01-48-55" style="zoom:50%;" />

<p>但是不知道为什么，得用 CMD 命令行才能执行这个命令，PowerShell 没有这个命令。</p>
<p>:::center</p>
<p>2022-10-27 更新</p>
<p>:::</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>后来发现，只需要 where 一个命令即可，全平台通用。至少在 Windows 11 22H2 版本和 MacOS Monterey 12.6 上，都支持这个命令，非常好用。</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>Linux</tag>
        <tag>MacOS</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>在ServiceComb中Vertx、Highway与HTTP的关系</title>
    <url>/2023/09/07/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%9C%A8ServiceComb%E4%B8%ADVertx%E3%80%81Highway%E4%B8%8EHTTP%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<p>在 Apache ServiceComb 中，<code>Highway</code>, <code>Vertx</code>, 和 <code>HTTP</code> 都与微服务间的通信有关，但它们之间的角色和关系是不同的。下面是一个简要的描述来解释它们之间的关系：</p>
<ol>
<li><p><strong>Highway</strong>:</p>
<ul>
<li>Highway 是 ServiceComb 的一个通信协议。它是专为微服务通信而设计的一个高性能的二进制协议。如果两个微服务都支持 Highway，则它们可以使用此协议进行通信，通常会有更好的性能和更低的延迟。</li>
</ul>
</li>
<li><p><strong>Vertx</strong>:</p>
<ul>
<li>Vert.x 是一个为 JVM 提供的工具包，用于构建响应式应用程序。ServiceComb 使用 Vert.x 作为其反应性框架，这使其可以有效地处理大量并发连接和通信。</li>
<li>Vert.x 也支持多种通信协议，包括 HTTP&#x2F;HTTP2 和其他定制协议（例如 Highway）。在 ServiceComb 中，Vert.x 主要用于处理请求&#x2F;响应的生命周期、非阻塞的 I&#x2F;O 处理以及提供异步编程模型。</li>
</ul>
</li>
<li><p><strong>HTTP</strong>:</p>
<ul>
<li>HTTP 是一个应用层的通信协议，用于在互联网上传输数据。在微服务架构中，HTTP（特别是 HTTP&#x2F;2）常被用作微服务间的通信协议。</li>
<li>ServiceComb 支持基于 HTTP 的 RESTful 服务通信。这意味着微服务可以使用标准的 HTTP 方法（如 GET、POST、PUT 等）进行通信。</li>
</ul>
</li>
</ol>
<p>关系总结：</p>
<ul>
<li><strong>Highway</strong> 是 ServiceComb 中的一个专用通信协议，主要针对微服务间的高性能通信。</li>
<li><strong>Vertx</strong> 是 ServiceComb 使用的反应性框架，提供了异步编程模型，并支持多种通信协议（包括 Highway 和 HTTP）。</li>
<li><strong>HTTP</strong> 是一个标准的通信协议，在 ServiceComb 中，它常被用作微服务间的通信协议，特别是当使用 RESTful 服务时。</li>
</ul>
<p>基于以上的描述，我们可以看到，Highway 和 HTTP 都是通信协议，但目标和设计思路略有不同，而 Vert.x 是提供通信框架和异步处理能力的库。</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>ServiceComb</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Shadowrocket自动切换最佳节点</title>
    <url>/2022/02/13/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Shadowrocket%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E6%9C%80%E4%BD%B3%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<p>Shadowrocket 有一个功能是可以自动对列表节点进行定时测速并切换到最快节点，如果某个节点无法访问，会自动进行切换而不需要手动进行干预，下面就是设置的方法。</p>
<span id="more"></span>

<h2 id="开启简单模式"><a href="#开启简单模式" class="headerlink" title="开启简单模式"></a>开启简单模式</h2><p>新版本的 Shadowrocket（2.2.2）支持” 简单模式 “直接开启” 自动切换最佳节点 “功能。</p>
<p><img src="http://img.puppetdev.top/image/note/cafe3d2f37579721f4f13c13f97e4f7a.png" alt="image-20220304100414118"></p>
<p>经由上面的简单设置后，默认所有节点为一个分组，且会自动进行测速，并切换为最佳的节点。</p>
<p>另外建议在②图中，开启” 启用回退 “功能，这样子如果遇到刚切换到最佳节点而最佳节点不能用了的极端情况，也能够保证节点可用。</p>
<p>若不想默认所有节点为一个分组，也可以自己设置分组，在④图中，从” 分组 “进入，挑选节点做相应的设置即可。</p>
<h2 id="高级设置（自动切换的时间间隔等等）"><a href="#高级设置（自动切换的时间间隔等等）" class="headerlink" title="高级设置（自动切换的时间间隔等等）"></a>高级设置（自动切换的时间间隔等等）</h2><p>Shadowrocket—&gt; 全局路由 —&gt; 分组 —&gt;URL 测试设置</p>
<p>下图为每 10 分钟测试一次，5s 无应答视为节点超时，当一个节点的响应时间 + 10ms 仍旧比当前使用节点快时，切换至更快节点。</p>
<img src="http://img.puppetdev.top/image/note/f5600a06f65b3e351c630deb60e19f05.png" alt="image-20220304093859314" style="zoom:50%;" />

]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title>配置文件中的明文密码加密</title>
    <url>/2022/07/01/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%AF%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%98%8E%E6%96%87%E5%AF%86%E7%A0%81%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<span id="more"></span>

<p>[[toc]]</p>
<h2 id="步骤一：引入jar包"><a href="#步骤一：引入jar包" class="headerlink" title="步骤一：引入jar包"></a>步骤一：引入jar包</h2><p>在 pom.xml 文件中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>版本太高可能会报错</p>
</blockquote>
<h2 id="步骤二：生成加密串"><a href="#步骤二：生成加密串" class="headerlink" title="步骤二：生成加密串"></a>步骤二：生成加密串</h2><p>找到 Maven 下载好的 <code>org\jasypt\jasypt\1.9.3\jasypt-1.9.3.jar</code> 所在位置，加密</p>
<blockquote>
<p>注意包名！！！不要用错了，不是 <code>com\melloware\jasypt\1.9.4\jasypt-1.9.3.jar</code></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -cp jasypt-1.9.3.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI input=testpassword password=testKey algorithm=PBEWithMD5AndDES</span><br></pre></td></tr></table></figure>

<ul>
<li><p>加密：&#96;&#96;java –cp 加密jar包的绝对路径 org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI&#96;</p>
</li>
<li><p>解密：&#96;&#96;java –cp 加密jar包的绝对路径 org.jasypt.intf.cli.JasyptPBEStringDecryptionCLI&#96;</p>
</li>
<li><p>input&#x3D;需要加密的字符串(明文密码)</p>
</li>
<li><p>password&#x3D;(密钥) </p>
</li>
<li><p>algorithm&#x3D;加密算法，默认PBEWithMD5AndDES</p>
</li>
</ul>
<p><img src="http://img.puppetdev.top/image/note/61c5f690dcbdb37165ecf564cec1d0b0.png" alt="image-20210906111124966"></p>
<h2 id="步骤三：在配置文件中配置"><a href="#步骤三：在配置文件中配置" class="headerlink" title="步骤三：在配置文件中配置"></a>步骤三：在配置文件中配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">dynamic:</span></span><br><span class="line">    <span class="attr">primary:</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">      	<span class="attr">username:</span> <span class="string">demo</span></span><br><span class="line">      	<span class="attr">password:</span> <span class="string">ENC(加密后的字符串)</span></span><br><span class="line">      	<span class="attr">url:</span> <span class="string">jdbc:mysql://xxxxxx:3306/ddafsdf</span></span><br><span class="line"><span class="comment"># 注意：以下配置项必须在 ENC(加密后的字符串) 的配置项之后，否则报错</span></span><br><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">  	<span class="comment"># 秘钥</span></span><br><span class="line">  	<span class="attr">password:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>将整数型转为Boolean类型</title>
    <url>/2022/02/18/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%B0%86%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%BABoolean/</url>
    <content><![CDATA[<p>跟 Python 不同，Java 中的非 0 不能直接为 true</p>
<span id="more"></span>

<h2 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">myBoolean</span> <span class="operator">=</span> myInt != <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h2 id="方式2-三目语句"><a href="#方式2-三目语句" class="headerlink" title="方式2-三目语句"></a>方式2-三目语句</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// 带转化 int 整数</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> (a == <span class="number">0</span>) ? <span class="literal">false</span> : <span class="literal">true</span>;  <span class="comment">// 转化语句</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>终端命令行设置为vi-mode模式</title>
    <url>/2022/08/03/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%BE%E7%BD%AE%E4%B8%BAvi-mode%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<span id="more"></span>

<p>[[toc]]</p>
<p>如果是 bash 则在 <code>.bashrc</code> 中加入 <code>set -o vi</code></p>
<p>如果是 zsh，则建议安装 oh-my-zsh，然后启动 vi-mode 插件</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>软件绿色版、便携版、破解版和精简版的区别</title>
    <url>/2022/05/30/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E7%BB%BF%E8%89%B2%E7%89%88%E3%80%81%E4%BE%BF%E6%90%BA%E7%89%88%E3%80%81%E7%A0%B4%E8%A7%A3%E7%89%88%E3%80%81%E7%B2%BE%E7%AE%80%E7%89%88%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>当我们在网上下载软件时，时常会看到各式各样的软件版本，绿色版、便携版、精简版…等等，这些版本都意味着什么呢？又有什么区别呢？</p>
<span id="more"></span>

<ul>
<li>正式版：通常是指原版或官方版本无做过任何修改的而且可以使用软件的全功能，修改系统注册表，安装并注册后才能使用，除非是免费软件</li>
<li>共享版：与正式版的区别是存在功能限制，或是使用次数限制等</li>
<li>试用版：与正式版的区别是可能存在功能限制，或是使用时间、次数限制等等</li>
<li>精简版：在正式版的基础上删除了部分不常用、不好用或冗余功能</li>
<li>破解版：即对收费的正式版进行破解，根据破解的方式，又分为好几种情况<ul>
<li>脱壳方式：对正式版进行脱壳，算出注册码，功能跟正式版一致，只是没有技术支持。</li>
<li>破解注册信息：通过汇编、逆向等工具修改软件程序的验证注册信息，使得软件不需要注册码，或任意注册码就能通过正版验证。</li>
<li>…</li>
</ul>
</li>
<li>绿色版：一般是强调软件很“干净”，不带插件、不带广告、不写注册表等等，这类软件在安装和卸载时非常方便快速，不会给电脑留下任何垃圾。</li>
<li>便携版：主要强调“便于携带”，具有免安装等特点，可以放置在 <code>U盘</code> 中，到处移植使用。</li>
</ul>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：IDEA结合Tomcat启动Web项目报错</title>
    <url>/2022/04/13/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9AIDEA%E7%BB%93%E5%90%88Tomcat%E5%90%AF%E5%8A%A8web%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<span id="more"></span>

<p>[[toc]]</p>
<h2 id="Servlet-DispatcherServlet-in-web-application-threw-load-exception"><a href="#Servlet-DispatcherServlet-in-web-application-threw-load-exception" class="headerlink" title="Servlet [DispatcherServlet] in web application [] threw load() exception"></a>Servlet [DispatcherServlet] in web application [] threw load() exception</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><img src="http://img.puppetdev.top/image/note/f04a0dc90d8e5d17b1e3e2e49633b463.png" alt="image-20220428114132435"></p>
<h3 id="原因分析-解决方案"><a href="#原因分析-解决方案" class="headerlink" title="原因分析&amp;&amp;解决方案"></a>原因分析&amp;&amp;解决方案</h3><p>根据报错信息，可以发现是无法找到 DispatcherServlet 类，</p>
<p>进一步查看编译输出目录下时候有 lib 目录</p>
<img src="http://img.puppetdev.top/image/note/5f7506f4006c04a35b99396119cb4275.png" alt="image-20220428114412254" style="zoom:50%;" />

<p>如果没有，可能是依赖库没有加载加载进来，或者放置的位置有问题，进一步查看</p>
<img src="http://img.puppetdev.top/image/note/cf82a2b57215281a12bcf4b6d9c9875a.png" alt="image-20220428114645183" style="zoom:50%;" />

]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IDEA</tag>
        <tag>Web</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker导入进行报错：invalid diffID for layer xx：expected “sha256:xxx</title>
    <url>/2022/12/01/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9ADocker%E5%AF%BC%E5%85%A5%E9%95%9C%E5%83%8F%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h2 id="1-1-问题描述"><a href="#1-1-问题描述" class="headerlink" title="1.1 问题描述"></a>1.1 问题描述</h2><p>docker 导入镜像 tar 包报错，报错信息如下：</p>
<p><img src="http://img.puppetdev.top/image/note/e0a9732c86ce643f614c7b76901e1100.png" alt="image-20221201153103996"></p>
<h2 id="1-2-解决方案"><a href="#1-2-解决方案" class="headerlink" title="1.2 解决方案"></a>1.2 解决方案</h2><p>通过报错信息可以看出，是导入的时候，docker 对 SHA256 哈希码进行校验，没有校验通过，说明这个镜像 tar 包被修改过。为了验证，我们可以利用 MD5 对镜像进行比对</p>
<ol>
<li><p>在通过 <code>docker save 镜像名称/id -o demo.tar</code> 命令导出镜像 tar 包后，计算出 tar 包的 MD5 值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">md5sum</span> demo.tar  <span class="comment"># md5sum 是 Linux 自带的命令</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将 demo.tar 从 Linux 下载下来后，再次对 demo.tar 计算 MD5 值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">certutil -hashfile demo.tar MD5  <span class="comment"># certutil 是 Windows 自带的程序</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>计算后，对比上面两步的 MD5 值，如果不一致，说明从 Linux 将 demo.tar 包下载下来时，可能因为网络等原因，导致数据发生了改变，从而产生这个错误。只需要重新从 Linux 下载 demo.tar 即可，下载后再次计算 MD5 进行对比，直到一致。</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：xshell无法启动</title>
    <url>/2022/04/13/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9AXshell%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>xshell 无法启动，提示：“要继续使用此程序，您必须应用最新的更新或使用新版本”。</p>
<span id="more"></span>

<p>[[toc]]</p>
<p>在使用 xshell 6 时，启动要求更新版本，否则无法正常启动</p>
<img src="http://img.puppetdev.top/image/note/8da0dca3f0f4e83d5b97c9db2d8ac0da.png" alt="image-20210222110448584" style="zoom:67%;" />

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>原理：修改时间</p>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>修改电脑系统时间，例如修改为 18 年 12 月 25 日之前的时间</p>
<p>但该方案看起来就很蠢，临时使用还好，不然为了使用这个软件还得去改时间。</p>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>修改 nslicense.dll 文件。该文件为一个二进制文件，需要使用特别的编辑器才能打开，否则会乱码，例如使用 C32asm、UltraEdit，我使用的是 UltraEdit，可以直接百度搜索，官网下载。该软件需要付费使用，可试用 30 天，用来改个文件绰绰有余。(也可以自己想办法破解)</p>
<p>下载安装好 UltraEdit 后，打开 xshell 的安装目录，找到目录下的 nslicense.dll，用 UltraEdit 打开，Ctrl + F 搜索 “7F 0C 81 F9 80 33 E1 01 0F 86 81”，将 86 改为 83，保存。<strong>注意备份 nslicense.dll 文件，避免失败重装</strong></p>
<p>完成。</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>解决方案</tag>
        <tag>Xshell</tag>
      </tags>
  </entry>
  <entry>
    <title>如何实现延迟任务</title>
    <url>/2022/09/21/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BB%B6%E8%BF%9F%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="如何实现延迟任务"><a href="#如何实现延迟任务" class="headerlink" title="如何实现延迟任务"></a>如何实现延迟任务</h1><h2 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h2><p>假设现在有一个需求：生成订单 30 分钟未支付，则自动取消，如何实现？又或者，生成订单 60秒 后，给用户发短信。</p>
<p>像上面这样子的需求，就属于延时任务。</p>
<p>这个延时任务和定时任务的区别究竟在哪里呢？</p>
<ol>
<li>定时任务有明确的触发时间，延时任务没有</li>
<li>定时任务有执行周期，而延时任务在某事件触发后一段时间内执行，没有执行周期</li>
<li>定时任务一般执行的是批处理操作是多个任务，而延时任务一般是单个任务</li>
</ol>
<h2 id="解决方案总结"><a href="#解决方案总结" class="headerlink" title="解决方案总结"></a>解决方案总结</h2><p>解决方案有很多种，但各有优缺点，目前来看，采用 Redis 是最优的解法。</p>
<p>分别如下：</p>
<ul>
<li>数据库轮询</li>
<li>JDK的延迟队列</li>
</ul>
<h2 id="数据库轮询"><a href="#数据库轮询" class="headerlink" title="数据库轮询"></a>数据库轮询</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>该方案通常是在小型项目中使用，通过一个线程定时去扫描数据库，通过订单时间来判断是否有超时的订单，然后进行 update 或 delete 等操作</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>用 quartz 来实现的</p>
<p>依赖引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext context)</span></span><br><span class="line">        <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;要去数据库扫描啦。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建任务</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(MyJob.class)</span><br><span class="line">            .withIdentity(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;group1&quot;</span>).build();</span><br><span class="line">        <span class="comment">// 创建触发器 每 3秒 钟执行一次</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder</span><br><span class="line">            .newTrigger()</span><br><span class="line">            .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group3&quot;</span>)</span><br><span class="line">            .withSchedule(</span><br><span class="line">            SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">            .withIntervalInSeconds(<span class="number">3</span>).repeatForever())</span><br><span class="line">            .build();</span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>().getScheduler();</span><br><span class="line">        <span class="comment">// 将任务及其触发器放入调度器</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        <span class="comment">// 调度器开始调度任务</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p>
<p>简单易行，支持集群操作</p>
<p><strong>缺点：</strong></p>
<ol>
<li>对服务器内存消耗大</li>
<li>存在延迟，比如你每隔 3分钟 扫描一次，那最坏的延迟时间就是 3分钟</li>
<li>假设你的订单有几千万条，每隔几分钟这样扫描一次，数据库损耗极大</li>
</ol>
<h2 id="JDK的延迟队列"><a href="#JDK的延迟队列" class="headerlink" title="JDK的延迟队列"></a>JDK的延迟队列</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>该方案是利用 JDK 自带的 DelayQueue 来实现，这是一个无界阻塞队列，该队列只有在延迟期满的时候才能从中获取元素，放入 DelayQueue 中的对象，是必须实现 Delayed 接口的。</p>
<p>DelayedQueue 实现工作流程如下图所示</p>
<img src="http://img.puppetdev.top/image/note/9b5bce102fb2afe5ca6ecf61fa8dc802.png" alt="image-20210830091336105" style="zoom:67%;" />

<ul>
<li><code>Poll()</code>：获取并移除队列的超时元素，没有则返回空</li>
<li><code>take()</code>：获取并移除队列的超时元素，如果没有，则 wait 当前线程，直到有元素满足超时条件，返回结果。</li>
</ul>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>定义一个类 OrderDelay 实现 Delayed</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDelay</span> <span class="keyword">implements</span> <span class="title class_">Delayed</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> timeout;</span><br><span class="line"></span><br><span class="line">    OrderDelay(String orderId, <span class="type">long</span> timeout) &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">        <span class="built_in">this</span>.timeout = timeout + System.nanoTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Delayed other)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (other == <span class="built_in">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">OrderDelay</span> <span class="variable">t</span> <span class="operator">=</span> (OrderDelay) other;</span><br><span class="line">        <span class="type">long</span> <span class="variable">d</span> <span class="operator">=</span> (getDelay(TimeUnit.NANOSECONDS) - t</span><br><span class="line">                  .getDelay(TimeUnit.NANOSECONDS));</span><br><span class="line">        <span class="keyword">return</span> (d == <span class="number">0</span>) ? <span class="number">0</span> : ((d &lt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回距离你自定义的超时时间还有多少</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getDelay</span><span class="params">(TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unit.convert(timeout - System.nanoTime(),TimeUnit.NANOSECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(orderId+<span class="string">&quot;编号的订单要删除啦。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>延迟队列，使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayQueueDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub  </span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();  </span><br><span class="line">        list.add(<span class="string">&quot;00000001&quot;</span>);  </span><br><span class="line">        list.add(<span class="string">&quot;00000002&quot;</span>);  </span><br><span class="line">        list.add(<span class="string">&quot;00000003&quot;</span>);  </span><br><span class="line">        list.add(<span class="string">&quot;00000004&quot;</span>);  </span><br><span class="line">        list.add(<span class="string">&quot;00000005&quot;</span>);  </span><br><span class="line">        DelayQueue&lt;OrderDelay&gt; queue = newDelayQueue&lt;OrderDelay&gt;();  </span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;  </span><br><span class="line">            <span class="comment">// 延迟三秒取出</span></span><br><span class="line">            queue.put(<span class="keyword">new</span> <span class="title class_">OrderDelay</span>(list.get(i), TimeUnit.NANOSECONDS.convert(<span class="number">3</span>, TimeUnit.SECONDS)));  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                queue.take().print();  </span><br><span class="line">                System.out.println(<span class="string">&quot;After &quot;</span> + (System.currentTimeMillis() - start) + <span class="string">&quot; MilliSeconds&quot;</span>);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>demo 运行结果：</p>
<p><img src="http://img.puppetdev.top/image/note/f36e620a222a41daa163672d338b9073.png" alt="image-20210830091925538"></p>
<p>可以看到都是延迟 3秒，订单被删除</p>
<h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点</strong></p>
<p>效率高，任务触发时间延迟低。</p>
<p><strong>缺点</strong></p>
<ol>
<li>服务器重启后，数据全部消失，怕宕机</li>
<li>集群扩展相当麻烦</li>
<li>因为内存条件限制的原因，比如下单未付款的订单数太多，那么很容易就出现 OOM异常</li>
<li>代码复杂度较高</li>
</ol>
<h2 id="时间轮算法"><a href="#时间轮算法" class="headerlink" title="时间轮算法"></a>时间轮算法</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><img src="http://img.puppetdev.top/image/note/aff86beaddfe98449dc52d03b8f28c43.png" alt="image-20210830092103301" style="zoom:50%;" />

<p>时间轮算法可以类比于时钟，如上图箭头（指针）按某一个方向按固定频率轮动，每<strong>次跳动称为一个  tick。</strong>定时轮有 3个 重要的属性参数：</p>
<ul>
<li>ticksPerWheel(一轮的 tick 数)，</li>
<li>tickDuration（一个 tick 的持续时间）</li>
<li>timeUnit（时间单位）</li>
</ul>
<p>当 ticksPerWheel&#x3D;60，tickDuration&#x3D;1，timeUnit&#x3D;秒，就和现实中的秒针走动完全类似了</p>
<p>如果当前指针指在 1 上面，有一个任务需要 4秒 以后执行，那么这个执行的线程回调或者消息将会被放在 5 上。那如果需要在20秒之后执行怎么办？这个环形结构槽数只到 8，如果要 20秒，指针需要多转2圈。位置是在 2圈之后 的 5 上面（<code>20 % 8 + 1 = 2...5</code>，即 2 余 5）</p>
<h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>用 Nett y的 HashedWheelTimer 来实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.24.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashedWheelTimerTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyTimerTask</span> <span class="keyword">implements</span> <span class="title class_">TimerTask</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> flag;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyTimerTask</span><span class="params">(<span class="type">boolean</span> flag)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            System.out.println(<span class="string">&quot;要去数据库删除订单了。。。。&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.flag =<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> &#123;</span><br><span class="line">        <span class="type">MyTimerTask</span> <span class="variable">timerTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTimerTask</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashedWheelTimer</span>();</span><br><span class="line">        timer.newTimeout(timerTask, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(timerTask.flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i + <span class="string">&quot;秒过去了&quot;</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点</strong></p>
<ul>
<li>效率高</li>
<li>任务触发时间延迟时间比 delayQueue 低</li>
<li>代码复杂度比 delayQueue 低。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>服务器重启后，数据全部消失，怕宕机</li>
<li>集群扩展相当麻烦</li>
<li>因为内存条件限制的原因，比如下单未付款的订单数太多，那么很容易就出现 <strong>OOM异常</strong></li>
</ul>
<h2 id="Redis缓存"><a href="#Redis缓存" class="headerlink" title="Redis缓存"></a>Redis缓存</h2><p>Redis 实现延时任务会有两种思路</p>
<h3 id="思路一：zset"><a href="#思路一：zset" class="headerlink" title="思路一：zset"></a>思路一：zset</h3><p>利用 redis 的 zset。zset 是一个有序集合，每一个元素(member)都关联了一个 score，通过 score 排序来取集合中的值。</p>
<p>将订单超时时间戳与订单号分别设置为 score 和 member，系统扫描第一个元素判断是否超时，具体如下图所示：</p>
<img src="http://img.puppetdev.top/image/note/54650dade47f348fec9f143fe43faae5.png" alt="image-20210830094356834" style="zoom:67%;" />

<h3 id="实现一"><a href="#实现一" class="headerlink" title="实现一"></a>实现一</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ADDR</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PORT</span> <span class="operator">=</span> <span class="number">6379</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">JedisPool</span> <span class="variable">jedisPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPool</span>(ADDR, PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者，生成 5个 订单放进去</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">productionDelayMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//延迟3秒</span></span><br><span class="line">            <span class="type">Calendar</span> <span class="variable">cal1</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">            cal1.add(Calendar.SECOND, <span class="number">3</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">second3later</span> <span class="operator">=</span> (<span class="type">int</span>) (cal1.getTimeInMillis() / <span class="number">1000</span>);</span><br><span class="line">            AppTest.getJedis().zadd(<span class="string">&quot;OrderId&quot;</span>, second3later, <span class="string">&quot;OID0000001&quot;</span> + i);</span><br><span class="line">            System.out.println(System.currentTimeMillis() + <span class="string">&quot;ms:redis生成了一个订单任务：订单ID为&quot;</span> + <span class="string">&quot;OID0000001&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费者，取订单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumerDelayMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> AppTest.getJedis();</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            Set&lt;Tuple&gt; items = jedis.zrangeWithScores(<span class="string">&quot;OrderId&quot;</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(items == <span class="literal">null</span> || items.isEmpty()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前没有等待的任务&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span>  <span class="variable">score</span> <span class="operator">=</span> (<span class="type">int</span>) ((Tuple)items.toArray()[<span class="number">0</span>]).getScore();</span><br><span class="line">            <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">            <span class="type">int</span> <span class="variable">nowSecond</span> <span class="operator">=</span> (<span class="type">int</span>) (cal.getTimeInMillis() / <span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">if</span>(nowSecond &gt;= score)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> ((Tuple)items.toArray()[<span class="number">0</span>]).getElement();</span><br><span class="line">                jedis.zrem(<span class="string">&quot;OrderId&quot;</span>, orderId);</span><br><span class="line">                System.out.println(System.currentTimeMillis() + <span class="string">&quot;ms:redis消费了一个任务：消费的订单OrderId为&quot;</span> + orderId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AppTest</span> <span class="variable">appTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AppTest</span>();</span><br><span class="line">        appTest.productionDelayMessage();</span><br><span class="line">        appTest.consumerDelayMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://img.puppetdev.top/image/note/4521628bc4599e9f6efa1ffb5198e1d8.png" alt="image-20210830094535676"></p>
<p>可以看到，几乎都是3秒之后，消费订单。</p>
<p>然而，这一版存在一个致命的硬伤，在高并发条件下，多消费者会取到同一个订单号，我们上测试代码 ThreadTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">threadNum</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">CountDownLatch</span> <span class="variable">cdl</span> <span class="operator">=</span> newCountDownLatch(threadNum);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DelayMessage</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cdl.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">AppTest</span> <span class="variable">appTest</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">AppTest</span>();</span><br><span class="line">            appTest.consumerDelayMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AppTest</span> <span class="variable">appTest</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">AppTest</span>();</span><br><span class="line">        appTest.productionDelayMessage();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threadNum; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">DelayMessage</span>()).start();</span><br><span class="line">            cdl.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://img.puppetdev.top/image/note/180abc64dc3b6b1669714590683eb74e.png" alt="image-20210830094659763"></p>
<p>显然，出现了多个线程消费同一个资源的情况。</p>
<p><strong>解决方案：</strong></p>
<ol>
<li>用分布式锁，但是用分布式锁，性能下降了，该方案不细说。</li>
<li>对 ZREM 的返回值进行判断，只有大于 0 的时候，才消费数据</li>
</ol>
<p>于是将 consumerDelayMessage() 方法里的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(nowSecond &gt;= score) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> ((Tuple)items.toArray()[<span class="number">0</span>]).getElement();</span><br><span class="line">    jedis.zrem(<span class="string">&quot;OrderId&quot;</span>, orderId);</span><br><span class="line">    System.out.println(System.currentTimeMillis() + <span class="string">&quot;ms:redis消费了一个任务：消费的订单 OrderId 为&quot;</span> + orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(nowSecond &gt;= score) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> ((Tuple)items.toArray()[<span class="number">0</span>]).getElement();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">num</span> <span class="operator">=</span> jedis.zrem(<span class="string">&quot;OrderId&quot;</span>, orderId);</span><br><span class="line">    <span class="keyword">if</span>( num != <span class="literal">null</span> &amp;&amp; num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis()+ <span class="string">&quot;ms: redis 消费了一个任务：消费的订单 OrderId 为&quot;</span> + orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这种修改后，重新运行 ThreadTest 类，发现输出正常了</p>
<h3 id="思路二：键空间机制"><a href="#思路二：键空间机制" class="headerlink" title="思路二：键空间机制"></a>思路二：键空间机制</h3><p>利用 Redis 的 Keyspace Notifications，即<strong>键空间机制</strong>，就是利用该机制可以在 key 失效之后，提供一个回调，实际上是 Redis 会给客户端发送一个消息。需要 Redis 版本 2.8 以上。</p>
<h3 id="实现二"><a href="#实现二" class="headerlink" title="实现二"></a>实现二</h3><p>配置 redis.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">notify-keyspace-events Ex</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ADDR</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PORT</span> <span class="operator">=</span> <span class="number">6379</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">JedisPool</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPool</span>(ADDR, PORT);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">RedisSub</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisSub</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                jedis.getResource().subscribe(sub, <span class="string">&quot;__keyevent@0__:expired&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> <span class="string">&quot;OID000000&quot;</span>+i;</span><br><span class="line">            jedis.getResource().setex(orderId, <span class="number">3</span>, orderId);</span><br><span class="line">            System.out.println(System.currentTimeMillis() + <span class="string">&quot;ms: &quot;</span> + orderId + <span class="string">&quot;订单生成&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RedisSub</span> <span class="keyword">extends</span> <span class="title class_">JedisPubSub</span> &#123;</span><br><span class="line">        &lt;ahref=<span class="string">&#x27;http://www.jobbole.com/members/wx610506454&#x27;</span>&gt;<span class="meta">@Override</span>&lt;/a&gt;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String channel, String message)</span> &#123;</span><br><span class="line">            System.out.println(System.currentTimeMillis() + <span class="string">&quot;ms: &quot;</span> + message + <span class="string">&quot;订单取消&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="http://img.puppetdev.top/image/note/82e0da1bc9100e0a8697a2b93c280e30.png" alt="image-20210830093745571"></p>
<h3 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点</strong></p>
<ul>
<li>使用 Redis 作为消息通道，消息都存储在 Redis 中。如果发送程序或者任务处理程序挂了，重启之后，还有重新处理数据的可能性。</li>
<li>做集群扩展相当方便</li>
<li>时间准确度高</li>
</ul>
<p><strong>缺点：方案二</strong></p>
<p>redis 的 pub&#x2F;sub 机制存在一个硬伤，官网内容如下：</p>
<p>Because Redis Pub&#x2F;Sub is fire and forget currently there is no way to use this feature if your application demands reliable notification of events, that is, if your Pub&#x2F;Sub client disconnects, and reconnects later, all the events delivered during the time the client was disconnected are lost.</p>
<p>因此，方案二不是太推荐。当然，如果对可靠性要求不高，可以使用。</p>
<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>可以采用 rabbitMQ 的延时队列。RabbitMQ 具有以下两个特性，可以实现延迟队列：</p>
<ul>
<li>RabbitMQ 可以针对 Queue 和 Message 设置 x-message-tt，来控制消息的生存时间，如果超时，则消息变为 dead letter</li>
<li>RabbitMQ 的 Queue 可以配置 x-dead-letter-exchange 和 x-dead-letter-routing-key（可选）两个参数，用来控制队列内出现了 dead letter，则按照这两个参数重新路由。</li>
</ul>
<p>结合以上两个特性，就可以模拟出延迟消息的功能</p>
<h3 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点</strong></p>
<ul>
<li>高效</li>
<li>可以利用 rabbitMQ 的分布式特性轻易的进行横向扩展</li>
<li>消息支持持久化增加了可靠性。</li>
</ul>
<p><strong>缺点</strong></p>
<p>本身的易用度要依赖于 rabbitMQ 的运维。因为要引用 rabbitMQ，所以复杂度和成本变高</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>设计方案</tag>
        <tag>延时任务</tag>
      </tags>
  </entry>
  <entry>
    <title>运维书单</title>
    <url>/2022/09/21/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E8%BF%90%E7%BB%B4%E6%8E%A8%E8%8D%90%E4%B9%A6%E5%8D%95/</url>
    <content><![CDATA[<h1 id="Linux运维书单推荐"><a href="#Linux运维书单推荐" class="headerlink" title="Linux运维书单推荐"></a>Linux运维书单推荐</h1><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><ul>
<li>深⼊入理理解计算机系统</li>
<li>计算机是怎么跑起来的</li>
<li>程序是怎么跑起来的</li>
</ul>
<h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><p>TCP&#x2F;IP协议详解卷一:协议</p>
<p>http权威指南</p>
<p>图解TCP&#x2F;IP</p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul>
<li>鸟哥的Linux私房菜</li>
<li>Linux命令行与shell脚本编程⼤大全</li>
<li>Linux内核设计的艺术(关于内核,难度较大)</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul>
<li>深入浅出 MySQL 数据库</li>
<li>MySQL技术内幕：InnoDB存储引擎</li>
<li>Redis开发与运维</li>
</ul>
<h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><ul>
<li>python核心编程(Python)</li>
<li>C Primer Plus(C语言)</li>
</ul>
<h2 id="云计算-虚拟化"><a href="#云计算-虚拟化" class="headerlink" title="云计算&amp;虚拟化"></a>云计算&amp;虚拟化</h2><ul>
<li>Docker技术入门与实战</li>
<li>Kubernetes权威指南</li>
</ul>
<h2 id="网站架构"><a href="#网站架构" class="headerlink" title="网站架构"></a>网站架构</h2><ul>
<li>大型网站技术架构 核心原理理与案例例分析</li>
</ul>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>通过idea一键部署Springboot应用为容器到远程docker服务器上</title>
    <url>/2022/08/02/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E9%80%9A%E8%BF%87idea%E4%B8%80%E9%94%AE%E5%B0%86Springboot%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E8%BF%9C%E7%A8%8Bdocker%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</url>
    <content><![CDATA[<span id="more"></span>

<p>[[toc]]</p>
<p>主要参考博客教程：<a href="https://segmentfault.com/a/1190000042012007">https://segmentfault.com/a/1190000042012007</a></p>
<p>期间遇到一些错误：</p>
<ul>
<li><p>idea 无法通过 SSH 连接到 docker，报错误：”java.io.IOException: unexpected end of stream on <a href="http://127.0.0.1/">http://127.0.0.1/</a>…”</p>
<p>解决方案：<a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/4416763906322-Trouble-connecting-to-docker-via-ssh">https://intellij-support.jetbrains.com/hc/en-us/community/posts/4416763906322-Trouble-connecting-to-docker-via-ssh</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>Docker</tag>
        <tag>运维</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>静态资源访问加速：CDN</title>
    <url>/2022/09/21/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E5%8A%A0%E9%80%9F%EF%BC%9ACDN/</url>
    <content><![CDATA[<p><img src="http://img.puppetdev.top/image/note/7d6fa3076b00679af6ca49e3963cc264.png" alt="image.png"></p>
<h2 id="1-1-CDN加速是什么？"><a href="#1-1-CDN加速是什么？" class="headerlink" title="1.1 CDN加速是什么？"></a>1.1 CDN加速是什么？</h2><p>CDN 全称 Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。</p>
<p>通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN 系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet 网络拥挤的状况，提高用户访问网站的响应速度。</p>
<p>CND 加速主要是加速静态资源，如网站上面上传的图片、媒体，以及引入的一些 Js、css 等文件。</p>
<p>CND 加速需要依靠各个网络节点，例如 100 台 CDN 服务器分布在全国范围，从上海访问，会从最近的节点返回资源，这是核心。</p>
<p>CND 服务器通过缓存或者主动抓取主服务器的内容来实现资源储备。</p>
<p>简单得来说，CDN 的作用就是，当我们向服务器请求某些资源 (例如静态资源)，哪个服务器最快最稳定，我们就去哪个服务器获取。同时 CDN 的<strong>成本也比较低</strong>。</p>
<h2 id="1-2-为什么要使用CDN"><a href="#1-2-为什么要使用CDN" class="headerlink" title="1.2 为什么要使用CDN"></a>1.2 为什么要使用CDN</h2><p>如果你在经营一家网站,那你应该知道几点因素是你制胜的关键:</p>
<p>内容有吸引力 访问速度快 支持频繁的用户互动 可以在各处浏览无障碍</p>
<p>另外，你的网站必须能在复杂的网络环境下运行，考虑到全球的用户访问体验。你的网站也会随着使用越来越多的对象 (如图片、帧、CSS 及 APIs ) 和形形色色的动作 (分享、跟踪) 而系统逐渐庞大。所以，系统变慢带来用户的流失。</p>
<h2 id="1-3-常见CDN服务器"><a href="#1-3-常见CDN服务器" class="headerlink" title="1.3 常见CDN服务器"></a>1.3 常见CDN服务器</h2><ul>
<li>自己的 CDN 服务器：在阿里云、腾讯云、华为云、Google、亚马逊等都可以购买到。</li>
<li>开源的 CDN 服务器：例如 unpkg、JSDelivr、cdnjs</li>
</ul>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac软件推荐</title>
    <url>/2022/10/08/%E6%B5%8B%E8%AF%84%E6%8E%A8%E8%8D%90/Mac%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="brew-Mac"><a href="#brew-Mac" class="headerlink" title="brew(Mac)"></a>brew(Mac)</h2><p>为什么有 brew？因为 mac 平台的 appstore 非常的不好用，审核也很严，因此有<strong>很多一些大家公认的“正版”好用的软件，都会在 homebrew 发布</strong>，例如 openjdk、qq、maven、go 等，它是 Mac OSX 上的软件包管理工具，能够使用命令行实现安装、卸载、升级的功能。类似 ubuntu 系统下的 apt-get 的功能。而且很多软件都推荐使用 brew 安装，因为它可以帮助你解决安装依赖问题，例如你想下载 go、maven 这种命令行工具，你还需要配置其它的一些环境，而 brew 在安装的时候都帮你配置好了。</p>
<blockquote>
<p>其中有个趣闻，就是 homebrew 作者因为不会白板翻转二叉树被 Google 拒了。笔者搜到 15 年的推特图。</p>
</blockquote>
<ol>
<li>主页地址：<a href="https://brew.sh/index_zh-cn">https://brew.sh/index_zh-cn</a></li>
<li>支持安装的命令行软件列表：<a href="https://formulae.brew.sh/formula/">https://formulae.brew.sh/formula/</a></li>
<li>支持安装的桌面端软件列表：<a href="https://formulae.brew.sh/cask/">https://formulae.brew.sh/cask/</a></li>
</ol>
<blockquote>
<ol>
<li><p>命令行软件，例如 go、openjdk、maven、python 等。使用的基本命令为：</p>
<p><code>brew install openjdk</code></p>
</li>
<li><p>桌面端软件：例如 qq、微信、网易云音乐等桌面的软件。使用的基本命令为：</p>
<p><code>brew cask install qq</code>，只是多了一个 <code>cask</code> 参数。</p>
</li>
</ol>
</blockquote>
<p>常见命令整理如下，以下命令都可带上 <code>cask</code> 参数：</p>
<ol>
<li><code>brew search name</code>：联网搜索软件是否存在 brew 中</li>
<li><code>brew install name</code>：安装软件</li>
<li><code>brew upgrade name</code>：更新软件</li>
<li><code>brew uninstall name</code>：卸载软件</li>
<li><code>brew reinstall name</code>：重新安装软件</li>
<li><code>brew info name</code>：查看软件安装地址</li>
<li><code>brew cleanup</code>：清理缓存等</li>
<li><code>brew doctor</code>：查看建议，例如升级等</li>
</ol>
<h2 id="iterm2-zsh-json-pp（Mac）"><a href="#iterm2-zsh-json-pp（Mac）" class="headerlink" title="iterm2+zsh+json_pp（Mac）"></a>iterm2+zsh+json_pp（Mac）</h2><p>这是我的一个套装组合，各个都可以拆分来使用，但是它们组合使用效率极高。</p>
<p>iTerm2 是 macOS 的终端仿真器，支持一个界面有多个 session 等，你可以把它当做 <code>SecureCRT</code> 命令行版，但是支持各种自定义配置。</p>
<p>zsh 是 oh-my-zsh 的简称，我们默认都是用的 <code>bash</code> 终端，是不支持命令的自动填充高亮等。</p>
<p>json_pp 我主要是用来格式化 <code>curl</code> 命令行的结果，例如测试某个 restful 接口，返回的 json，在命令行就会自动给你格式化好输出，</p>
<ol>
<li>这三个软件都是搭配 <code>brew</code> 安装</li>
<li>搭配安装教程地址：<a href="https://gist.github.com/kevin-smets/8568070">https://gist.github.com/kevin-smets/8568070</a></li>
<li>iterm2 安装：<code>brew cask install iterm2</code></li>
<li>zsh 安装：<a href="https://ohmyz.sh/#install">https://ohmyz.sh/#install</a></li>
<li>json_pp 安装：<code>brew install jsonpp</code></li>
</ol>
<blockquote>
<p>当安装了 zsh 后，你可以在 vscode&#x2F;idea 软件中切换默认的 shell</p>
<p><img src="http://img.puppetdev.top/image/note/305c7c97f70ebeef4f8942eddb46b10e.png" alt="image-20210410193552018"></p>
<p>效果图如下，命令提示高亮，显示当前 git 分支</p>
<p><img src="http://img.puppetdev.top/image/note/4057db7c4f8df76fee5cc2d77c66a9cd.png" alt="image-20210410193534907"></p>
</blockquote>
<h2 id="Itsycal（Mac）"><a href="#Itsycal（Mac）" class="headerlink" title="Itsycal（Mac）"></a>Itsycal（Mac）</h2><p>Mac 左上角的时间栏只能看当前时间不能看日历非常的不方便，因此有很多软件都支持左上角时间点击显示日历，但是 Itsycal 是我用过最方便轻量的免费软件，不仅可以同步日历的事件，而且各种小功能也非常的实用：</p>
<ol>
<li>支持各种快捷键，包括创建事件、快速显示小日历等。</li>
<li>支持高亮显示某星期、设置每周的第一天为周一或周日。</li>
<li>自定义 dateformat 显示日期，我设置的为：YYYY-MM-dd EE HH:mm:ss</li>
<li>支持暗黑模式，不过我都是设置为跟随系统主题，白天白色，晚上黑色自动切换。</li>
</ol>
<p><img src="http://img.puppetdev.top/image/note/91005003cf55d8cc84500920db00e7de.png" alt="image-20210410193628976"></p>
<ol>
<li>文档地址：<a href="https://www.mowglii.com/itsycal/">https://www.mowglii.com/itsycal/</a></li>
<li>下载：<code>brew cask install itsycal</code></li>
</ol>
<h2 id="xnip-pro-QQ（Mac）"><a href="#xnip-pro-QQ（Mac）" class="headerlink" title="xnip pro + QQ（Mac）"></a>xnip pro + QQ（Mac）</h2><p>没错，这个 QQ 就是我们平常用的 QQ 聊天软件。</p>
<p>在电脑截图上，我经常用的功能包括：滚动截长图，快速截图、识别图片中的文字、快速录个电脑操作视频。这些操作中，xnip 支持滚动截长图，我个人用了几款，虽然有好用的，但是都是收费的，而 xnip 免费版滚动截图只会有个水印。</p>
<p>QQ 截图是结合截图、OCR 识别以及录视频为一体的超级功能！有时候发的截图里面的 token，或者手机号，又例如银行卡，就非常的方便，而且识别的非常准确！另外 qq 截图有个小技巧，截图双击时会截当前软件的边缘，不用自己手动拖拽。</p>
<ol>
<li>snip 地址：<a href="https://zh.xnipapp.com/">https://zh.xnipapp.com/</a></li>
<li>QQ 地址：<a href="https://im.qq.com/macqq/">https://im.qq.com/macqq/</a></li>
</ol>
<p>QQ 截图 OCR 识别：</p>
<p><img src="http://img.puppetdev.top/image/note/cadd8b8185018ff2954d9c567b148b48.png" alt="image-20210410193733548"></p>
<p>QQ 首选项配置截图、录制快捷键设置：</p>
<p><img src="http://img.puppetdev.top/image/note/fa091375870df4021eec71195a179aba.png" alt="image-20210410193748927"></p>
<h2 id="语雀（Windows-Mac）"><a href="#语雀（Windows-Mac）" class="headerlink" title="语雀（Windows&#x2F;Mac）"></a>语雀（Windows&#x2F;Mac）</h2><p>我的笔记之路，从白嫖有道云笔记，再到买了一年的印象笔记的高级会员，最后是买了阿里云服务器自制了蚂蚁笔记服务端，自己的笔记之路一路折腾，最后我发现还是语雀符合我对笔记知识整合的理解。本篇文章也同步发布在了语雀。</p>
<ol>
<li><strong>界面清新，客户端启动快。</strong>不像印象笔记，启动慢不说，运行久了还会卡。而且有很多我不必要的功能在那里。</li>
<li><strong>支持现在流行的卡片式笔记，例如流程图、视频链接、思维导图等。</strong></li>
<li><strong>快速发布，生成博文，可访问的链接，用于快速分享好基友，还支持多个文件形成目录后文件夹层级。</strong></li>
<li><strong>免费使用 oss 存储，包括图片视频思维导图都可以免费存储并有单独的链接访问（个人版存储空间 90G 够用了）</strong></li>
</ol>
<p>个人感觉语雀还是很香的！自己用来记笔记还是当做博客都是非常不错的选择。</p>
<ol>
<li>主页地址：<a href="https://www.yuque.com/">https://www.yuque.com/</a></li>
<li>帮助手册：<a href="https://www.yuque.com/yuque/help">https://www.yuque.com/yuque/help</a></li>
</ol>
<h2 id="7-tencent-lemon（Mac）"><a href="#7-tencent-lemon（Mac）" class="headerlink" title="7. tencent-lemon（Mac）"></a>7. tencent-lemon（Mac）</h2><p>腾讯柠檬清理，基本对标的就是 CleanMyMac，我个人没用过 CleanMyMac，但是感觉腾讯家的这个产品挺好用，在内测的时候就在一直用，产品在社区里面也一直听取用户的意见改进，持状态栏显示当前内存占用、网速等，对我来说是够用了。</p>
<p><img src="http://img.puppetdev.top/image/note/1e0e4616569d83d3fea95813136d4084.png" alt="image-20210410193905940"></p>
<p><img src="http://img.puppetdev.top/image/note/72c45c414d83c780a6fbc4333f9cb956.png" alt="image-20210410193925982"></p>
<ol>
<li>主页地址：<a href="https://lemon.qq.com/">https://lemon.qq.com/</a></li>
<li>社区地址：<a href="https://support.qq.com/products/36664">https://support.qq.com/products/36664</a></li>
<li>下载：<code>brew cask install tencent-lemon</code></li>
</ol>
<h2 id="oss-brower（Windows-Mac）"><a href="#oss-brower（Windows-Mac）" class="headerlink" title="oss-brower（Windows&#x2F;Mac）"></a>oss-brower（Windows&#x2F;Mac）</h2><p>这个仅适合使用了阿里云 oss 的用户，它是快速的方便用户对自己 oss 进行操作管理，而且还有权限功能，我平常都是电脑截图，然后拖拽图片到 oss-brower 里面，接着获取地址。另外该产品是开源的，我开始很难相信这是阿里出的产品。</p>
<p><img src="http://img.puppetdev.top/image/note/0e58663d089c2f055c7c70f3c7dcfac2.png" alt="image-20210410194011352"></p>
<ol>
<li>主页地址：<a href="https://github.com/aliyun/oss-browser">https://github.com/aliyun/oss-browser</a></li>
<li>中文文档：<a href="https://github.com/aliyun/oss-browser/blob/master/README-CN.md">https://github.com/aliyun/oss-browser/blob/master/README-CN.md</a></li>
</ol>
<h2 id="ScreenTime（Mac）"><a href="#ScreenTime（Mac）" class="headerlink" title="ScreenTime（Mac）"></a>ScreenTime（Mac）</h2><p>即 apple 自带的屏幕时间，大家有时候可能想知道，我在 Mac 和 Iphone 上使用各个软件的时候大概是多久，可能 Iphone 大家都知道，但是 Mac 大家可能不怎么关注，但是其实 Mac 的屏幕时间更加方便和强大，因为它根据 icloud 可以获取所有设备的总时间，或其它设备（例如 watch???）的使用时间。</p>
<p><img src="http://img.puppetdev.top/image/note/9f40110eea0e503d77655ccc2fa5e0ca.png" alt="image-20210410194056343"></p>
<h2 id="BackgroudMusic（Mac）"><a href="#BackgroudMusic（Mac）" class="headerlink" title="BackgroudMusic（Mac）"></a>BackgroudMusic（Mac）</h2><p>这个软件用于单独为每个软件设置独立的音量大小。属于你不装的时候挺好，装了之后就严重依赖它的软件。属于开源软件，社区活跃，更新也频繁，我使用过程中已知的 bug 主要是在开启和关闭过程中会没声音，不过我设置开机启动就好了。</p>
<ol>
<li>上班时，我想设置音乐软件声音小，办公软件提示音大，它可以做到。</li>
<li>在家时，我想设置小网页声音大，办公软件提示音小，它可以做到。</li>
<li>我想设置声音左耳大，右耳小（这个功能我暂时没用上）。</li>
</ol>
<p><img src="http://img.puppetdev.top/image/note/84e7c4e79d78cb4509f1ce4e87927449.png" alt="image-20210410194129238"></p>
<ol>
<li>主页地址：<a href="https://github.com/kyleneideck/BackgroundMusic">https://github.com/kyleneideck/BackgroundMusic</a></li>
<li>下载地址：<code>brew cask install background-music</code></li>
</ol>
<h2 id="another-redis-desktop-manager（Windows-Mac）"><a href="#another-redis-desktop-manager（Windows-Mac）" class="headerlink" title="another redis desktop manager（Windows&#x2F;Mac）"></a>another redis desktop manager（Windows&#x2F;Mac）</h2><p>可视化的 Redis 管理软件，开源软件。颜值高、功能多、作者更新快的可视化 Redis 管理软件。</p>
<p><img src="http://img.puppetdev.top/image/note/9ac5e22d096918037a01360e92bfe52c.png" alt="image-20210410194254991"></p>
<ol>
<li>主页地址：<a href="https://github.com/qishibo/AnotherRedisDesktopManager">https://github.com/qishibo/AnotherRedisDesktopManager</a></li>
<li>下载：<code>brew cask install another-redis-desktop-manager</code></li>
</ol>
]]></content>
      <categories>
        <category>测评推荐</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>商用U盘</title>
    <url>/2022/10/08/%E6%B5%8B%E8%AF%84%E6%8E%A8%E8%8D%90/U%E7%9B%98/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="US1指纹加密闪存盘"><a href="#US1指纹加密闪存盘" class="headerlink" title="US1指纹加密闪存盘"></a>US1指纹加密闪存盘</h1><p>品牌：Netac</p>
<p>制造商：深圳市朗科科技股份有限公司</p>
<p>技术支持&#x2F;客服热线：400-830-3662</p>
]]></content>
      <categories>
        <category>测评推荐</category>
      </categories>
      <tags>
        <tag>U盘</tag>
        <tag>硬件</tag>
        <tag>商用</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows卸载清理工具推荐</title>
    <url>/2022/04/13/%E6%B5%8B%E8%AF%84%E6%8E%A8%E8%8D%90/Windows%E5%8D%B8%E8%BD%BD%E6%B8%85%E7%90%86%E7%A5%9E%E5%99%A8/</url>
    <content><![CDATA[<span id="more"></span>

<p>今天对比的为以下三个清理卸载软件：HiBitUninstall、CleanMyPC 和 UninstallTool</p>
<ul>
<li>功能上看：CleanMyPC &gt; HitBitUninstall &gt; Uninstall</li>
<li>空间占比：CleanMyPC（100M以上） &gt; HitBitUninstall（10M） &gt; Uninstall（3M）</li>
<li>安装便捷性：HitBitUninstall &#x3D; Uninstall &gt; CleanMyPC （HitBitUninstall 和 Uninstall 均无需安装，可以直接双击 exe 程序直接使用）</li>
</ul>
<p>总结：推荐使用 HitBitUninstall，综合上非常 nice</p>
<p>其他说明：</p>
<ul>
<li>UninstallTool 是 Geek 的专业版，比 Geek 的功能更加强大，卸载速度更快，残留清除更加彻底。（这两款的内存都很小）因此这里就不推荐 Geek，而直接推荐 UninstallTool</li>
<li>HitBitUninstall 是开源免费的，其他两个如果要使用直接使用“魔法“，或者付费。</li>
</ul>
]]></content>
      <categories>
        <category>测评推荐</category>
      </categories>
  </entry>
  <entry>
    <title>Windows软件</title>
    <url>/2022/10/08/%E6%B5%8B%E8%AF%84%E6%8E%A8%E8%8D%90/Windows%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>概要列表</p>
<ol>
<li>cleanmypc：全方面电脑文件垃圾清理</li>
<li>geek：最轻便且卸载最干净的卸载软件(直接下载解压后，双击 exe 文件即可使用，无需安装)</li>
<li>snipaste：最牛逼的截屏软件，用过才知道</li>
<li>uTools：各种小工具小插件，还是个微型的软件中心，只有想不到，没有它没有的。</li>
<li>SpaceSniffer：对 C 盘等磁盘空间进行优化。能够可视化显示每个文件的占磁盘空间。</li>
</ol>
<p>Windows</p>
<ol>
<li>离线视频播放器 PotPlayer（官网下载）</li>
<li>录屏软件 Bandicam</li>
<li>xshell，ssh终端连接</li>
<li>Bandizip 压缩软件，推荐 7.0 之前的版本，免费且无广告</li>
<li>listary，虽然 uTools 有基于 everything 的插件，但 listary 依然有用武之处</li>
</ol>
<p>PDF专用</p>
<ul>
<li><p>Drawboard PDF（已拥有，微软账号）</p>
<p>Drawboard 在 Win10 应用商店限时免费。Drawboard 更适合<strong>触摸屏</strong>和<strong>电磁笔</strong>手写，但是启动速度非常慢，文字渲染不够清晰。(支持手写的 PDF 阅读编辑器)</p>
<p>大名鼎鼎的 DRAWBOARD PDF，正价 88 元，<strong>有时候微软应用商店特价至 0 元</strong>，适合移动办公&#x2F;SURFACE 平板人群使用。</p>
</li>
<li><p>万兴PDF专家（PDFelement），<a href="https://link.zhihu.com/?target=https://pdf.wondershare.cn/landing_zhihu.html?utm_source=ZHBrandybuck&utm_medium=Lemon&utm_campaign=yuedupdf0417">PDFelement </a>功能齐全、极其易用、界面美观，是目前（2020年4月）用过的PDF软件中综合表现最好的。</p>
</li>
<li><p>嗨格式阅读器。小巧简洁，主打阅读。</p>
</li>
</ul>
<h2 id="uTools"><a href="#uTools" class="headerlink" title="uTools"></a>uTools</h2><blockquote>
<p>非常好用!强烈推荐!!!!</p>
</blockquote>
<p>Hello,各位小伙伴们好，又到周末了，给大家分享一款<strong>神器</strong>：『<strong>utools</strong>』。</p>
<p>官网及下载地址：<a href="https://link.zhihu.com/?target=https://u.tools/">https://u.tools/</a></p>
<p>uTools 是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。</p>
<p>utools 支持 <strong>Windows&#x2F;Mac&#x2F;Linux</strong>，</p>
<p>安装成功之后，可以通过快捷键『<strong>Alt+Space</strong>』，可以唤起 utools 窗口。</p>
<blockquote>
<p>以下页面都是 mac 上截图，其他平台大同小异。</p>
</blockquote>
<p><img src="http://img.puppetdev.top/image/note/90d14a5245e45aea09e7cc30d73cdee5.png" alt="image-20210301125232328"></p>
<p>这个界面比较像 <strong>Alfred</strong>，刚开始没有安装任何插件，只能简单根据关键字查找系统中已安装的应用。</p>
<p><img src="http://img.puppetdev.top/image/note/4519dc3fd9108d82d930042edd7a9ec8.png" alt="image-20210301125250491"></p>
<p>我们可以通过安装插件，扩展 『<strong>utools</strong>』的功能，提高我们的生产力。</p>
<h2 id="uTools安装插件"><a href="#uTools安装插件" class="headerlink" title="uTools安装插件"></a>uTools安装插件</h2><p>相关插件都可以在插件中心安装，只需要在窗口输入插件，选择<strong>插件中心</strong>。</p>
<img src="http://img.puppetdev.top/image/note/17ab2616227fca8396282d4a98e463b4.png" alt="image-20210301125334138" style="zoom:67%;" />

<p>进入插件中心，选择安装相应的插件。</p>
<img src="http://img.puppetdev.top/image/note/c50943059949dbe8c8b24003e7ad3026.png" alt="image-20210301125404210" style="zoom:67%;" />

<h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><h3 id="在线翻译"><a href="#在线翻译" class="headerlink" title="在线翻译"></a>在线翻译</h3><p>这个插件整合有道翻译、金山词霸、谷歌翻译、必应翻译。</p>
<p>关键字： translate&#x2F;翻译</p>
<p><img src="http://img.puppetdev.top/image/note/aa47e1baff254a8d6db31e5e3cbc8382.png" alt="image-20210301125532976"></p>
<h3 id="剪贴板历史"><a href="#剪贴板历史" class="headerlink" title="剪贴板历史"></a>剪贴板历史</h3><p>该插件可代替 Ditto</p>
<p>系统的剪贴板，只能查找最近一次的复制记录，这就比较麻烦。使用功能可以查找最近文本、图片、文件的复制记录，非常有用。</p>
<p>关键字：clipboard</p>
<h3 id="斗图"><a href="#斗图" class="headerlink" title="斗图"></a>斗图</h3><p>这个功能么，聊天摸鱼神器，点击图片双击即可复制。</p>
<p>偷偷告诉你：很多骚表情都是可以从上面直接复制的。</p>
<p>关键字：doutu</p>
<h3 id="JSON编辑器"><a href="#JSON编辑器" class="headerlink" title="JSON编辑器"></a>JSON编辑器</h3><p>通过这个插件，我们可以将复制过来的 <strong>Json</strong> 格式化，可以将 <strong>xml</strong>，<strong>yaml</strong> 转义成 <strong>json</strong> 。</p>
<p>关键字：json</p>
<h3 id="编码小助手"><a href="#编码小助手" class="headerlink" title="编码小助手"></a>编码小助手</h3><p>日常开发经常遇到需要一些编码转化，比如 <strong>URL</strong> 编码。以前每次都需要谷歌搜个工具网页，现在直接使用这个插件就可以了。并且这个插件集合非常多转化小工具，</p>
<p>关键字：很多很多。。。。自己找吧！</p>
<p><strong>base64</strong></p>
<ul>
<li>字符串 base64 编码</li>
<li>base64 字符解码</li>
<li>图片 base64 编码</li>
<li>图片 base64 解码</li>
<li>uTools 输入框自动识别 base64 字符串</li>
</ul>
<p><strong>data&#x2F;unixtime&#x2F;timestamp</strong></p>
<ul>
<li>时间格式转换</li>
<li>时间戳获取</li>
<li>标准时间</li>
<li>uTools 输入框自动识别时间戳和 yyyy-MM-dd HH:mm:SS 格式时间</li>
</ul>
<p><strong>UUID&#x2F;GUID</strong></p>
<ul>
<li>唯一 ID</li>
</ul>
<p><strong>Hash加密</strong></p>
<ul>
<li>MD5</li>
<li>SHA1</li>
<li>SHA224</li>
<li>SHA256</li>
<li>SHA384</li>
<li>SHA512</li>
<li>文件 HASH 加密</li>
</ul>
<p><strong>URL</strong></p>
<ul>
<li>URL 编解码</li>
</ul>
<h3 id="常见文档-vue、Python等等"><a href="#常见文档-vue、Python等等" class="headerlink" title="常见文档(vue、Python等等)"></a>常见文档(vue、Python等等)</h3><img src="http://img.puppetdev.top/image/note/577793623b7c3e74bf5bdad2a48964f2.png" alt="image-20210301130219067" style="zoom:67%;" />

<p>可以快速查找 Linux 命令使用方法，这真是极好的。</p>
<img src="http://img.puppetdev.top/image/note/89a07959f9b27b94b175012006b99910.png" alt="image-20210301130243069" style="zoom:67%;" />

<h3 id="人生进度条"><a href="#人生进度条" class="headerlink" title="人生进度条"></a>人生进度条</h3><p><img src="http://img.puppetdev.top/image/note/26c52fa7d58c546b66e8d956a46ea339.png" alt="image-20210301130316529"></p>
<p>件中心还有很多插件，小伙伴们可以自行查找。没找到想要的插件，小伙伴也考虑自己开发。</p>
<h2 id="CleanMyPC"><a href="#CleanMyPC" class="headerlink" title="CleanMyPC"></a>CleanMyPC</h2><p>用起来非常爽，完全可以代替电脑管家等扫描垃圾的软件。</p>
<p>收费，但可破解。到网盘找压缩包</p>
<ol>
<li>解压</li>
<li>安装 CleanMyPC.exe，安装完成后不要打开</li>
<li>复制 Patch.exe 到 CleanMyPC 的安装路径</li>
<li>打开激活工具 Patch.exe，点击 Patch，完成。</li>
</ol>
<p>如果弹出这个，说明 CleanMyPC 处于打开状态</p>
<img src="http://img.puppetdev.top/image/note/92ef6adde9e1bbb0206fe31133eade99.png" alt="image-20210302170104534" style="zoom:67%;" />

<ol>
<li>任务管理器，终止 “CleanMyPC NT Service” 进程，</li>
<li>系统服务，找到“CleanMyPC观察程序”服务，将服务停止，并将服务改为“手动”启动。</li>
</ol>
<p>再打开 Patch.exe，点击 patch 激活。出现下方红框字样，说明激活成功：</p>
<p><img src="http://img.puppetdev.top/image/note/d136a91563ee6d2b17c61ed8caa637cd.png" alt="image-20210509114351092"></p>
<h2 id="SpaceSniffer"><a href="#SpaceSniffer" class="headerlink" title="SpaceSniffer"></a>SpaceSniffer</h2><p>SpaceSniffer 是一款能够可视化分析磁盘空间占用情况的磁盘清理软件！免费，有用且可靠的，可以扫描Windows PC 上的文件。使用此工具，可以清楚地了解计算机硬盘中文件和文件夹的结构。为了检查磁盘空间，该程序使用 Treemap 可视化布局，该布局使您可以基于颜色感知大型文件和文件夹在设备上的位置。 由于此磁盘清洁器速度很快，因此您可以在几秒钟内清楚地了解整体情况。只需单击一下，SpaceSniffer 便会详细显示所选文件，包括大小，文件名，创建日期等。</p>
<p>下载地址和官网为：<a href="http://www.uderzo.it/main_products/space_sniffer/">http://www.uderzo.it/main_products/space_sniffer/</a></p>
<p>下载后得到一个 zip 压缩包，直接解压后以“管理员”的身份打开 exe 文件</p>
<p><img src="http://img.puppetdev.top/image/note/c509b3e3bc6a9f58ada84ae95446286c.png" alt="image-20210404213809678"></p>
<p>打开后，选择要分析的目录，就可以很快地得到该目录的磁盘空间占用情况：</p>
<p><img src="http://img.puppetdev.top/image/note/39ff0cb14245143815c25a9f7926bb17.png" alt="image-20210404214135028"></p>
<p>点击方格后，还会继续往下显示目录的磁盘占用情况，鼠标右键方格，则可以对该目录进行操作，打开、删除等等。</p>
<h2 id="AVG"><a href="#AVG" class="headerlink" title="AVG"></a>AVG</h2><p>对电脑进行实时的性能监控</p>
<h2 id="解锁猎人"><a href="#解锁猎人" class="headerlink" title="解锁猎人"></a>解锁猎人</h2><p>解决文件无法删除的问题</p>
<h2 id="天诺OCR"><a href="#天诺OCR" class="headerlink" title="天诺OCR"></a>天诺OCR</h2><p>快速识别图片上的文字</p>
<h2 id="USBSafelyRemove"><a href="#USBSafelyRemove" class="headerlink" title="USBSafelyRemove"></a>USBSafelyRemove</h2><p>解决 U盘 弹出失败问题</p>
<h2 id="Recuva"><a href="#Recuva" class="headerlink" title="Recuva"></a>Recuva</h2><p>恢复回收站删除的文件</p>
<h2 id="录屏软件"><a href="#录屏软件" class="headerlink" title="录屏软件"></a>录屏软件</h2><h3 id="Bandicam"><a href="#Bandicam" class="headerlink" title="Bandicam"></a>Bandicam</h3><p>做教程视频的时候是必须要用到录屏工具的，如果在 Windows 平台，那我的首选一定是这款来自韩国的Bandicam，因为它简单易用，功能强大，并且没有花哨多余的附加项，是一款纯粹的录屏软件。</p>
<h3 id="OBS"><a href="#OBS" class="headerlink" title="OBS"></a>OBS</h3><p>录屏功能比 Bandicam 要丰富、强大，但使用起来比 Bandicam 略复杂。</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>一般需求，使用 Bandicam 就足够了</p>
<h2 id="右键管理神器"><a href="#右键管理神器" class="headerlink" title="右键管理神器"></a>右键管理神器</h2><p><a href="https://github.com/BluePointLilac/ContextMenuManager">https://github.com/BluePointLilac/ContextMenuManager</a></p>
<p>开源免费，非常方便地管理鼠标右键菜单，而不用自己去面对枯燥的注册表。</p>
<p><img src="http://img.puppetdev.top/image/note/b193753dba9b77ef575490b19f7e4e80.png" alt="image-20221012201505681"></p>
]]></content>
      <categories>
        <category>测评推荐</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>下载器</title>
    <url>/2022/10/08/%E6%B5%8B%E8%AF%84%E6%8E%A8%E8%8D%90/%E4%B8%8B%E8%BD%BD%E7%A5%9E%E5%99%A8/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h2><h3 id="NDM"><a href="#NDM" class="headerlink" title="NDM"></a>NDM</h3><p>可能我们都知道，下载届有一个非常牛叉的神器：Inet Download Manager —— IDM。这个下载神器不仅支持多线程加速下载功能，还具备网页视频嗅探功能。当然，它还具备其他很多我尚未尝试过的功能，平时用得最多也就是这两个了，用过的也都说 nice，真香。</p>
<p>但在我切换到 macOS 系统后，发现 IDM 不兼容 macOS，所以找了一些可以替代 IDM 的下载器，最后发现有一款与 IDM 很相似的下载器，同样具备 IDM 那两个我个人常用的功能。这个下载器就是今天要介绍的：NDM</p>
<h4 id="介绍与安装使用"><a href="#介绍与安装使用" class="headerlink" title="介绍与安装使用"></a>介绍与安装使用</h4><p>NDM（Neat Download Manager）这款软件完全免费无广告，支持 Windows 和 macOS</p>
<p>官方网站：<a href="https://www.neatdownloadmanager.com/index.php/en/">https://www.neatdownloadmanager.com/index.php/en/</a></p>
<p>可以直接上官网下载，也可以通过以下链接下载：</p>
<blockquote>
<p>链接: <a href="https://pan.baidu.com/s/1dxJHR0GhSgEGhGFTFEQ5rQ">https://pan.baidu.com/s/1dxJHR0GhSgEGhGFTFEQ5rQ</a> 提取码: sae6 </p>
</blockquote>
<p>安装后打开的界面如下：</p>
<p><img src="http://img.puppetdev.top/image/note/8c38c42921f5bbf782ab1772ceac2fd8.png" alt="image-20211128234641307"></p>
<p>这样子就可以使用了，APP 非常简洁。配合上浏览器插件，可以实现视频嗅探功能</p>
<h4 id="嗅探功能"><a href="#嗅探功能" class="headerlink" title="嗅探功能"></a>嗅探功能</h4><p>给谷歌浏览器安装以下插件：</p>
<p><img src="http://img.puppetdev.top/image/note/f14e18fdb9d258b77ccecb6f7570cccc.png" alt="image-20211129090733277"></p>
<p>接着随便打开一个视频网站测试</p>
<img src="http://img.puppetdev.top/image/note/6de00adeff981ec61fcc02090e88bd68.png" alt="image-20211129090930346" style="zoom:33%;" />

<p>可以看到上面的红色方框中有三个可下载文件：1、2、3，视频越大，说明越高清。直接点击想要的清晰度视频，就可以实现下载。</p>
<img src="http://img.puppetdev.top/image/note/996df77160b6c13c7f3a50f7823bf0d1.png" alt="image-20211129091209091" style="zoom:50%;" />

<h3 id="qBitTorrent"><a href="#qBitTorrent" class="headerlink" title="qBitTorrent"></a>qBitTorrent</h3><p>官网：<a href="https://github.com/qbittorrent/qBittorrent">https://github.com/qbittorrent/qBittorrent</a></p>
<p>下载地址：<a href="https://github.com/c0re100/qBittorrent-Enhanced-Edition/releases">https://github.com/c0re100/qBittorrent-Enhanced-Edition/releases</a></p>
<p>种子与磁力链接的下载神器，推荐使用。</p>
<p>在 Windows 上如果迅雷不是很好用，可以用它来代替迅雷；在 MacOS 上可以用它来代替 Folx</p>
<h2 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h2><h3 id="Downie"><a href="#Downie" class="headerlink" title="Downie"></a>Downie</h3><p>专门用来下载视频的，支持很多主流网站视频的一键下载</p>
<p>跟 NDM 相比，NDM 属于通用型，Downie 属于专业性</p>
<h3 id="Folx"><a href="#Folx" class="headerlink" title="Folx"></a>Folx</h3><p>不管是 NDM 还是 Downie 都无法下载磁链或 bt，所以还是需要 Folx、迅雷 或者 uTorrent 来补充</p>
<p>但个人使用后的感觉是 Folx 在 bt 搜索方面做得非常好，但是下载速度，且一言难尽，亦或者是个人配置问题，有哪位大佬知道的，能不能指导一下，不胜感激。</p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="IDM"><a href="#IDM" class="headerlink" title="IDM"></a>IDM</h3><p>最强下载神器，除了不能下载磁链和 bt，其他都可以，速度飞快且稳定，配置还非常简单。</p>
<h3 id="迅雷"><a href="#迅雷" class="headerlink" title="迅雷"></a>迅雷</h3><p>弥补 IDM 无法下载磁链和 bt 的不足。也可以用 Motrix 或 qBitTorren 等替换</p>
<h3 id="蜈蚣文件"><a href="#蜈蚣文件" class="headerlink" title="蜈蚣文件"></a>蜈蚣文件</h3><p>蜈蚣文件是一款免费开源的下载神器，支持 Windows 和 Linux 平台（目前为 1.9 版本，暂不支持 Mac OS）</p>
<p>其官网为：<a href="http://www.filecxx.com/zh_CN/index.html">http://www.filecxx.com/zh_CN/index.html</a></p>
<p>蜈蚣文件具备 IDM 和 NDM 的所有功能，而 IDM 和 NDM 所没有的功能但常用的，它也基本都有，例如 BT 下载、磁力链接下载等等。</p>
<p>同时，它还与 IDM 和 NDM 类似，支持在各个主流浏览器中安装插件，捕获下载链接，进行下载。</p>
<h2 id="总结与推荐"><a href="#总结与推荐" class="headerlink" title="总结与推荐"></a>总结与推荐</h2><h3 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h3><p>迅雷 + IDM</p>
<p>很多人都说 QBitTorrent 好，但是在一些冷门种子上，迅雷还是很能打的，QBitTorrent 下载不了的，迅雷也能下载。对于热门种子来说，两者的差异并不大。</p>
<p>蜈蚣文件的功能很全面，不仅能进行普通下载，也能下载种子，但是体验上，很多时候都没有速度，不是很行。</p>
<p>对于普通下载来说，在 Windows 上，IDM 还是最强的，虽然 NDM 也很强（两者功能相差无几），但是如果让我选，我选 IDM</p>
<h3 id="MacOS-1"><a href="#MacOS-1" class="headerlink" title="MacOS"></a>MacOS</h3><p>NDM + qBitTorrent</p>
<p>因为 IDM 没有 MacOS 版本，所以只能用 NDM 代替</p>
<p>如果下载种子，则推荐用 QBitTorrent，Folx 说是 MacOS 上最强的种子下载神器，但在体验上，我并没有感受到（可能是因为在国内，亦或者是配置问题？）但是 Folx 提供了另一个很强大的功能：种子搜索。不过只能搜索国外的种子。总之，个人还是觉得 QBitTorrent 更好用些</p>
<p>Downie 更适合于专门下载视频的，如果需要时常从油管、B站等这类网站上下载视频，那这个软件确实是神器，下载速度快、可批量、可自定义视频链接，还方便对下载下来的视频进行自动化后续处理。（如果简单的下载，NDM 和 IDM 也能做到）</p>
]]></content>
      <categories>
        <category>测评推荐</category>
      </categories>
      <tags>
        <tag>下载器</tag>
      </tags>
  </entry>
  <entry>
    <title>分屏软件</title>
    <url>/2022/10/08/%E6%B5%8B%E8%AF%84%E6%8E%A8%E8%8D%90/%E5%88%86%E5%B1%8F%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="Magnet"><a href="#Magnet" class="headerlink" title="Magnet"></a>Magnet</h2><blockquote>
<p>适用于 macOS，Windows 自带的分屏功能已经足够强大</p>
</blockquote>
<p>非常简单粗暴好用！</p>
<img src="http://img.puppetdev.top/image/note/a8e1e76869e62f3c394ad5e56cc780c4.png" alt="image-20211222164957305" style="zoom:50%;" />

<p>Magnet 除了拖拽和快捷键调整布局，没有更多功能，也就没有了自己设置的麻烦，胜在简单。不想自己配置的用户，看一眼快捷键表就能上手。</p>
<img src="http://img.puppetdev.top/image/note/aa30364b443e079295eee06878815f43.png" alt="image-20211222165037679" style="zoom:50%;" />

<p>但需要收费，可以在打折的时候购入。破解版在阿里云盘</p>
]]></content>
      <categories>
        <category>测评推荐</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>手机APP</title>
    <url>/2022/05/18/%E6%B5%8B%E8%AF%84%E6%8E%A8%E8%8D%90/%E6%89%8B%E6%9C%BAAPP/</url>
    <content><![CDATA[<h1 id="睡眠质量检测APP"><a href="#睡眠质量检测APP" class="headerlink" title="睡眠质量检测APP"></a>睡眠质量检测APP</h1><h2 id="AutoSleep"><a href="#AutoSleep" class="headerlink" title="AutoSleep"></a>AutoSleep</h2><blockquote>
<p>iOS，18元</p>
</blockquote>
<h2 id="Pillow"><a href="#Pillow" class="headerlink" title="Pillow"></a>Pillow</h2><blockquote>
<p>iOS，30元</p>
</blockquote>
<p>与AutoSleep相比，Pillow无论从操作还是展示上，都算是非常「亲民」的那一位。</p>
<p><img src="http://img.puppetdev.top/image/note/01f18fd0ce1ded402b12777a8630fa92.png" alt="img"></p>
<p>首页简洁的圆环直观地表现出你的睡眠状况，除此之外，还提供了几个重要参数的数据详情例如睡眠时段。同时将你的睡眠质量用直方图的形式表现出来，不同的色块代表不同的睡眠参数，点击之后则能看到具体的数据。</p>
<p>到目前为止，Pillow 的 UI 都还算是一个完美的设计，但既然拿出来对比，就说明有它的一些短处。</p>
<h1 id="“治疗手机病”的软件"><a href="#“治疗手机病”的软件" class="headerlink" title="“治疗手机病”的软件"></a>“治疗手机病”的软件</h1><h2 id="24PI"><a href="#24PI" class="headerlink" title="24PI"></a>24PI</h2><blockquote>
<p>Android</p>
</blockquote>
<p>记录手机使用时间长短的应用。</p>
<p>你每天花费了多少时间玩手机，每隔多久使用一次手机，哪些软件占用了你最多的时间等等，这些软件全部会帮你记录下来，并且<strong>形成报告</strong>，让你更了解自己使用手机的情况。</p>
<p>初次使用软件，简单设置后，便可以上手使用了，根据你的使用情况，软件还可以帮你合理安排时间，帮助你<strong>健康使用手机</strong>。</p>
<p><img src="http://img.puppetdev.top/image/note/01f18fd0ce1ded402b12777a8630fa92.png" alt="img"></p>
<h2 id="FOREST"><a href="#FOREST" class="headerlink" title="FOREST"></a>FOREST</h2><blockquote>
<p>iOS、Android</p>
</blockquote>
<p>通过种树的小游戏，帮助你有趣，主动的减少手机使用时间。开始专注时，给自己设置一个时间，这个时间内不使用手机，你的树苗种子便会长成<strong>树木。</strong></p>
<p><img src="http://img.puppetdev.top/image/note/01f18fd0ce1ded402b12777a8630fa92.png" alt="img"></p>
<p>一旦触碰，树苗便会死亡。</p>
<p><img src="http://img.puppetdev.top/image/note/01f18fd0ce1ded402b12777a8630fa92.png" alt="img"></p>
<p>还可以建立<strong>多人种树</strong>的模式，和朋友一起慢慢戒掉手机成瘾症，实现专注。平台为了鼓励大家使用，每个人都有<strong>五颗真树</strong>种植的的机会哦。你的树苗会被种植在沙漠区域，很有价值。</p>
]]></content>
      <categories>
        <category>测评推荐</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>APP</tag>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>文件数据同步工具</title>
    <url>/2022/10/12/%E6%B5%8B%E8%AF%84%E6%8E%A8%E8%8D%90/%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h2><h3 id="GoodSync"><a href="#GoodSync" class="headerlink" title="GoodSync"></a>GoodSync</h3><p><a href="https://www.goodsync.com/">https://www.goodsync.com/</a></p>
<p>《GoodSync》是一款跨平台(Windows&#x2F;Mac&#x2F;Linux&#x2F;NAS&#x2F;iOS&#x2F;Android)数据同步备份软件，可以自动将您的全部数据备份到多个目标位置，在需要的时候恢复数据轻松还原。当对某一处进行文件添加、更改或删除，则同步操作将对对应的 另一处的相关文件进行添加、更改和删除。相关文件将在两侧进行复制以确保两 处保持一致。</p>
<p>GoodSync 除了有同步功能外，同时提供分析、过滤，以及结果显 示等操作，以确保避免产生多余重复的文件并只对有需要的文件进行同步。借助专有文件传输协议 GoodSync Connect，可在您的所有设备（包括服务器、NAS 和手机）之间进行直接、快速、安全的 P2P 数据传输。</p>
<p>支持NAS设备（Western Digital、ASUSTOR、Synology、QNAP、Misc NAS）云存储（GoodSync储存、Google Drive、Dropbox、Azure、Office 365、OneDrive、私有云、SharePoint、Box.com、Backblaze、Amazon S3）、协议和文件系统（FTP、SFTP、WebDAV、GoodSync Connect (GSTP)、SMB共享、本地和远程网络）</p>
<h3 id="FreeFileSync"><a href="#FreeFileSync" class="headerlink" title="FreeFileSync"></a>FreeFileSync</h3><blockquote>
<p>最为推荐，简单易用免费，关键还好用！！！</p>
</blockquote>
<p><a href="https://freefilesync.org/">https://freefilesync.org/</a></p>
<p>《FreeFileSync》是一款免费开源的文件同步软件，支持多平台（Windows&#x2F;Mac&#x2F;Linux）、支持 FTP &#x2F; SFTP 文件传输协议、支持对比检测文件、支持批处理自动同步文件、支持多种同步方案、支持排除文件筛选器、支持 Unicode (中文文件名)、支持命令行调用、支持区分大小写的同步。</p>
<p><strong>教程</strong>：</p>
<p><a href="https://www.bilibili.com/video/BV18f4y1t7jS/?spm_id_from=333.337.search-card.all.click&vd_source=cb771c0df4973d5667cfc24916380e4f">https://www.bilibili.com/video/BV18f4y1t7jS/?spm_id_from=333.337.search-card.all.click&amp;vd_source=cb771c0df4973d5667cfc24916380e4f</a></p>
<h2 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h2><blockquote>
<p>MacOS 特有</p>
</blockquote>
<h3 id="Sync-Folders-Pro"><a href="#Sync-Folders-Pro" class="headerlink" title="Sync Folders Pro"></a>Sync Folders Pro</h3><p><a href="https://apps.apple.com/us/app/sync-folders-pro/id522706442">https://apps.apple.com/us/app/sync-folders-pro/id522706442</a></p>
<p><a href="https://www.greenworldsoft.com/">https://www.greenworldsoft.com/</a></p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2>]]></content>
      <categories>
        <category>测评推荐</category>
      </categories>
      <tags>
        <tag>文件同步</tag>
      </tags>
  </entry>
  <entry>
    <title>油猴脚本</title>
    <url>/2022/02/12/%E6%B5%8B%E8%AF%84%E6%8E%A8%E8%8D%90/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>几个常用好用的油猴脚本推荐</p>
<span id="more"></span>
<h1 id="油猴脚本"><a href="#油猴脚本" class="headerlink" title="油猴脚本"></a>油猴脚本</h1><h2 id="脚本老家"><a href="#脚本老家" class="headerlink" title="脚本老家"></a>脚本老家</h2><p>greasy fork：<a href="https://greasyfork.org/zh-CN">https://greasyfork.org/zh-CN</a> </p>
<p>顾名思义，该地址就是脚本的老家，可以在上面自行淘金，查找好用的脚本。</p>
<h2 id="网盘链接检查"><a href="#网盘链接检查" class="headerlink" title="网盘链接检查"></a>网盘链接检查</h2><p><a href="https://greasyfork.org/zh-CN/scripts/378301-%E7%BD%91%E7%9B%98%E5%8A%A9%E6%89%8B">网盘助手 (greasyfork.org)</a>    <a href="https://greasyfork.org/zh-CN/scripts/394216-%E7%BD%91%E7%9B%98%E9%93%BE%E6%8E%A5%E6%A3%80%E6%9F%A5">网盘链接检查 (greasyfork.org)</a></p>
<h2 id="连接助手"><a href="#连接助手" class="headerlink" title="连接助手"></a>连接助手</h2><p><a href="https://greasyfork.org/zh-CN/scripts/422773-%E9%93%BE%E6%8E%A5%E5%8A%A9%E6%89%8B">链接助手 (greasyfork.org)</a> </p>
<p>很多网站，像吾爱论坛、百度贴吧、B 站，在正文或者评论区给的资源链接，都是文本形式，不能直接点击跳转。</p>
<p>而通过链接助手，当点击各类链接的文本会自动转成对应的链接，更快捷方便。</p>
<p>此外还支持全网主流网盘和小众网盘自动填写密码、资源站点下载页网盘密码预处理、重定向页面自动跳转等等功能。</p>
<p>功能是非常强大，这里只是简单介绍，直接安装上就对了，对于使用体验以及效率都是翻倍提升。</p>
<h2 id="自动无缝翻页"><a href="#自动无缝翻页" class="headerlink" title="自动无缝翻页"></a>自动无缝翻页</h2><p><a href="https://greasyfork.org/zh-CN/scripts/419215-%E8%87%AA%E5%8A%A8%E6%97%A0%E7%BC%9D%E7%BF%BB%E9%A1%B5">自动无缝翻页 (greasyfork.org)</a></p>
<p>绝大多数搜索引擎或者一些论坛网站，都是有分页的，要查看更多内容就是需要点击下一页，一页一页查看内容。</p>
<p>过自动翻页油猴脚本不需要点击下一页，只需滚动滚轮即可自动加载下一页了，可以实现滚动条接近页面底部时自动加载新内容，当安装好脚本之后，访问支持的网站时，就会实现自动翻页。</p>
<h2 id="计时器掌控者"><a href="#计时器掌控者" class="headerlink" title="计时器掌控者"></a>计时器掌控者</h2><p><a href="https://timer.palerock.cn/">计时器掌控者 | 苍石居 (palerock.cn)</a></p>
<p>如果没有会员，在很多网站上看视频，都需要先观看一段广告，该广告有 30s - 90s 不等，使用这款脚本，可以对任意网页的计时器进行加减速，以及视频播放器的快慢放。</p>
<h2 id="阿里云盘"><a href="#阿里云盘" class="headerlink" title="阿里云盘"></a>阿里云盘</h2><p><a href="https://greasyfork.org/zh-CN/scripts/425955-%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98">阿里云盘 (greasyfork.org)</a></p>
<p>在网页端超过 100MB 的文件就不能直接下载，必须保存云盘，然后使用桌面端才能下载。</p>
<p>如果分享的视频，没有保存，也只能试看 2 分钟。</p>
<p>而这款名字就叫阿里云盘的油猴脚本，支持生成文件下载链接，支持视频播放页面打开自动播放&#x2F;播放区点击暂停继续&#x2F;播放控制器拖拽调整位置，支持自定义分享密码，突破视频 2 分钟限制等等的功能。</p>
<h2 id="网页限制解除"><a href="#网页限制解除" class="headerlink" title="网页限制解除"></a>网页限制解除</h2><p><a href="https://greasyfork.org/zh-CN/scripts/14146-%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E8%A7%A3%E9%99%A4">网页限制解除 (greasyfork.org)</a></p>
<p>有不少的网站是禁止复制的，需要关注公众号获取验证码，甚至是需要付费才能解除。</p>
<p>通过这款脚本可以通杀大部分网站，解除禁止复制、剪切、选择文本、右键菜单的限制。</p>
<h2 id="文库下载器"><a href="#文库下载器" class="headerlink" title="文库下载器"></a>文库下载器</h2><p><a href="https://greasyfork.org/zh-CN/scripts/435884-wenku-doc-downloader">Wenku Doc Downloader (greasyfork.org)</a></p>
<p>Wenku Doc Downloader 是一款超强解析下载文档脚本，支持百度文库、豆丁网、道客巴巴、原创力文档等等。</p>
<p>安装好脚本之后，在文档页面左侧中间有 Wenku Doc Download 按钮区，进行对应操作即可，下载文档导出 PDF。</p>
<h2 id="搜索引擎重定向"><a href="#搜索引擎重定向" class="headerlink" title="搜索引擎重定向"></a>搜索引擎重定向</h2><p><a href="https://greasyfork.org/zh-CN/scripts/14178-ac-baidu-%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%8B%97%E8%B0%B7%E6%AD%8C%E5%BF%85%E5%BA%94%E6%90%9C%E7%B4%A2-favicon-%E5%8F%8C%E5%88%97">AC-baidu-重定向优化百度搜狗谷歌必应搜索_favicon_双列 (greasyfork.org)</a></p>
<h2 id="搜索引擎聚合"><a href="#搜索引擎聚合" class="headerlink" title="搜索引擎聚合"></a>搜索引擎聚合</h2><p><a href="https://greasyfork.org/zh-CN/scripts/411284-%E8%BD%BB%E9%87%8F%E7%BA%A7%E8%81%9A%E5%90%88%E6%90%9C%E7%B4%A2-%E6%94%AF%E6%8C%81%E7%99%BE%E5%BA%A6-%E8%B0%B7%E6%AD%8C-%E5%BF%85%E5%BA%94-360%E6%90%9C%E7%B4%A2-%E6%90%9C%E7%8B%97-%E9%9B%85%E8%99%8E-yandex-%E6%B7%98%E5%AE%9D-%E4%BA%AC%E4%B8%9C-%E4%BA%9A%E9%A9%AC%E9%80%8A-%E7%9F%A5%E4%B9%8E-b%E7%AB%99-%E8%B1%86%E7%93%A3-%E4%BC%98%E9%85%B7-%E7%88%B1%E5%A5%87%E8%89%BA-github%E7%AD%89">轻量级聚合搜索，支持百度，谷歌，必应，360搜索，搜狗，雅虎，Yandex，淘宝，京东，亚马逊，知乎，B站，豆瓣，优酷，爱奇艺，GitHub等 (greasyfork.org)</a> </p>
<h2 id="网页加速器"><a href="#网页加速器" class="headerlink" title="网页加速器"></a>网页加速器</h2><p><a href="https://greasyfork.org/zh-CN/scripts/436453-%E7%BD%91%E9%A1%B5%E5%8A%A0%E9%80%9F%E5%99%A8">网页加速器 (greasyfork.org)</a></p>
<p><strong>利用浏览器的预加载技术，加速打开网页，打开网页速度加快 60% 以上。</strong></p>
<p>当将鼠标悬停在链接上时，有 50％ 的机会单击链接，此时加速器会自动开始预加载页面到内存中，当您实际单击时（平均在 400 毫秒后），页面直接从内存中读取，节省了从网络下载的时间。</p>
<h2 id="免登陆去弹窗"><a href="#免登陆去弹窗" class="headerlink" title="免登陆去弹窗"></a>免登陆去弹窗</h2><p><a href="https://greasyfork.org/zh-CN/scripts/428960-csdn-%E7%9F%A5%E4%B9%8E-%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9-%E7%AE%80%E4%B9%A6%E5%85%8D%E7%99%BB%E5%BD%95%E5%8E%BB%E9%99%A4%E5%BC%B9%E7%AA%97%E5%B9%BF%E5%91%8A">CSDN&#x2F;知乎&#x2F;哔哩哔哩&#x2F;简书免登录去除弹窗广告 🛡 (greasyfork.org)</a></p>
<h2 id="在线看图工具"><a href="#在线看图工具" class="headerlink" title="在线看图工具"></a>在线看图工具</h2><p><a href="https://greasyfork.org/zh-CN/scripts/24204-picviewer-ce">Picviewer CE+ (greasyfork.org)</a></p>
<h2 id="购物党比价工具："><a href="#购物党比价工具：" class="headerlink" title="购物党比价工具："></a>购物党比价工具：</h2><p><a href="https://greasyfork.org/zh-CN/scripts/416426-%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7-%E5%86%8D%E7%B2%BE%E7%AE%80%E4%BC%98%E5%8C%96%E7%89%88">购物党比价工具【再精简优化版】 (greasyfork.org)</a></p>
<h2 id="额外彩蛋"><a href="#额外彩蛋" class="headerlink" title="额外彩蛋"></a>额外彩蛋</h2><p>在第一个网站中搜索“解析”会有众多意想不到的收获哦</p>
]]></content>
      <categories>
        <category>测评推荐</category>
      </categories>
      <tags>
        <tag>脚本</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑端工具</title>
    <url>/2022/05/18/%E6%B5%8B%E8%AF%84%E6%8E%A8%E8%8D%90/%E7%94%B5%E8%84%91%E7%AB%AF%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="可视化图表工具"><a href="#可视化图表工具" class="headerlink" title="可视化图表工具"></a>可视化图表工具</h1><h2 id="Chart-Cube"><a href="#Chart-Cube" class="headerlink" title="Chart Cube"></a>Chart Cube</h2><p>专业、好用</p>
<p>它将图表制作分为四个步骤</p>
<p><img src="http://img.puppetdev.top/image/note/01f18fd0ce1ded402b12777a8630fa92.png" alt="img"></p>
<p>上传数据有可编辑表格和本地数据两种方式；选择图表就是选一个自己需要的</p>
<p>配置图表则是更改颜色、标题、画布尺寸等数据；最后的导出，可以根据自己接下来的汇报，选择合适的格式。如果你不确定自己要用哪一种类型的图表，可以按照分析目的分类，找到与自己需求贴合的图表类型。</p>
<p>除了常见的比较，还有趋势、分布、排名、占比、组成等类别。</p>
]]></content>
      <categories>
        <category>测评推荐</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>图表</tag>
      </tags>
  </entry>
  <entry>
    <title>编程刷题网站</title>
    <url>/2022/05/18/%E6%B5%8B%E8%AF%84%E6%8E%A8%E8%8D%90/%E7%BC%96%E7%A8%8B%E5%88%B7%E9%A2%98%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<span id="more"></span>

<p>[[toc]]</p>
<h1 id="编程刷题网站"><a href="#编程刷题网站" class="headerlink" title="编程刷题网站"></a>编程刷题网站</h1><ol>
<li>USACO 中学生题库 美国</li>
<li>CodeForces 在线评测网站 俄罗斯</li>
<li>AtCoder 算法竞技网站 日本</li>
<li>leetcode 在线判题系统 </li>
<li>Virtual Judge 题库</li>
<li>赛码</li>
<li>牛客网 </li>
<li>codefights 编程游戏化</li>
</ol>
]]></content>
      <categories>
        <category>测评推荐</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>远程控制软件</title>
    <url>/2022/10/08/%E6%B5%8B%E8%AF%84%E6%8E%A8%E8%8D%90/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<span id="more"></span>

<p>目前已知的可远程控制计算机的品牌有：</p>
<p>向日葵、花生壳、natapp.cn</p>
<h2 id="向日葵远程控制"><a href="#向日葵远程控制" class="headerlink" title="向日葵远程控制"></a>向日葵远程控制</h2><p>国内市场老大哥，个人免费版十分强大，满足个人日常需求。</p>
<ol>
<li><p>白板模式</p>
<p>在该模式下，可以在屏幕上进行涂写，被远程控制的电话上会同步显示除涂写的内容</p>
</li>
<li><p>兼容几乎所有系统</p>
<p>兼容了市面上所有常见的系统，包括 Linux 和移动端都是可以使用的。</p>
</li>
</ol>
<h2 id="ToDesk"><a href="#ToDesk" class="headerlink" title="ToDesk"></a>ToDesk</h2><p>目前正在使用的远程控制软件，轻量，好用</p>
]]></content>
      <categories>
        <category>测评推荐</category>
      </categories>
      <tags>
        <tag>远程控制</tag>
      </tags>
  </entry>
  <entry>
    <title>你知道的越多，不知道的也就越多</title>
    <url>/2020/05/06/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/%E4%BD%A0%E7%9F%A5%E9%81%93%E7%9A%84%E8%B6%8A%E5%A4%9A%EF%BC%8C%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%B9%9F%E5%B0%B1%E8%B6%8A%E5%A4%9A/</url>
    <content><![CDATA[<p>不知道大家有没有发现，我们身边经常有这样的人，他们越是有能力的，越是有知识的，越是低调，越是谦逊，因为他们深知，知道的越多，不知道的也就越多。</p>
<span id="more"></span>

<p>你知道的越多，你不知道的也就越多，这是一句非常有哲理的话。</p>
<p>每个人的知识面都是有限的，你有可能在某个领域会有较深的研究，成为这个领域里的专家，等到你站在高处的时候，才会发现，自己是多么的渺小，才知道自己有多少没有涉及的领域。知道的越多，疑惑、问题就会越来越多，对已知的质疑、疑虑、困惑就会越来越多。</p>
<p>即使如此，我们也应该努力，至少可以成为某个领域的佼佼者。</p>
<p>::: tip 鸡汤1<br>弱小的人，才习惯嘲讽与否定，而内心强大的人，从不吝啬赞美与鼓励。<br>:::</p>
<p>::: tip 鸡汤2<br>当代青年人都应该摆脱冷气，只管向上走，不必听从自暴自弃者的流言。能做事的做事，能发声的发声。有一份热，发一份光，就像萤火一般，也可以在黑暗里发一点光，不必等候炬火。<br>:::</p>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>知识</tag>
        <tag>鸡汤</tag>
      </tags>
  </entry>
  <entry>
    <title>创业团队</title>
    <url>/2022/09/21/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/%E5%88%9B%E4%B8%9A%E5%9B%A2%E9%98%9F/</url>
    <content><![CDATA[<h1 id="创业团队"><a href="#创业团队" class="headerlink" title="创业团队"></a>创业团队</h1><blockquote>
<p>目的在于形成一个完整的闭环团队，形成一个小型但又完整的创业团队。</p>
</blockquote>
<ul>
<li>运维</li>
<li>运营</li>
<li>开发</li>
<li>市场</li>
<li>培训：黑马、中睿（提供企业的 IT 服务）</li>
</ul>
<p>企业发展过程中，还需要对企业的数据进行管理、形成数据资产、获取更多的经济利益。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>创业</tag>
      </tags>
  </entry>
  <entry>
    <title>如何去找电子书籍、教程等资源</title>
    <url>/2022/03/15/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/%E5%A6%82%E4%BD%95%E5%8E%BB%E6%89%BE%E7%94%B5%E5%AD%90%E4%B9%A6%E7%B1%8D%E3%80%81%E6%95%99%E7%A8%8B%E7%AD%89%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p>平时我们经常需要各种各样的资源，但不知道如何去找，又或者没有形成系统性的搜索方式，而没有办法找到自己想要的资源，这篇文章就主要记录一下平时个人查找资源的方式。</p>
<p>可以说，掌握了这些技巧，几乎市面上可以看到的任何书籍、任何文档、教程，都能够找到。再也不用买很多书籍，占地方还重，妈妈再也不用担心我的学习了。</p>
<span id="more"></span>

<h2 id="电子书籍"><a href="#电子书籍" class="headerlink" title="电子书籍"></a>电子书籍</h2><h3 id="网盘搜"><a href="#网盘搜" class="headerlink" title="网盘搜"></a>网盘搜</h3><ul>
<li>阿里云盘：<a href="https://www.alipansou.com/">https://www.alipansou.com/</a></li>
<li>百度网盘：<a href="https://www.lzpan.com/">https://www.lzpan.com/</a></li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title>应届毕业生求职就业时的相关注意事项</title>
    <url>/2022/10/25/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/%E5%BA%94%E5%B1%8A%E6%AF%95%E4%B8%9A%E7%94%9F%E6%B1%82%E8%81%8C%E5%B0%B1%E4%B8%9A%E6%97%B6%E7%9A%84%E7%9B%B8%E5%85%B3%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h1 id="应届毕业生求职就业时的相关注意事项"><a href="#应届毕业生求职就业时的相关注意事项" class="headerlink" title="应届毕业生求职就业时的相关注意事项"></a>应届毕业生求职就业时的相关注意事项</h1><p>本文主要是针对第一次找工作的应届毕业生。时间点在于面试后拿到 <code>offer</code> 一直到入职时的劳动合同签订。</p>
<h2 id="企业逼签三方如何考虑"><a href="#企业逼签三方如何考虑" class="headerlink" title="企业逼签三方如何考虑"></a>企业逼签三方如何考虑</h2><p>毕业生在秋招求职时，大概率会遇到这样的情况，拿到了几个公司的 offer，但还没签三方，公司那边催签三方，但是自己又想在看看其他公司。面对这种情况，这里有几个点可以综合考虑一下</p>
<h3 id="公司是否靠谱"><a href="#公司是否靠谱" class="headerlink" title="公司是否靠谱"></a>公司是否靠谱</h3><p>一般通过校招招聘新人的企业都是靠谱，但是拿到 <code>offer</code> 之后还是要第一时间了解清楚该公司的现状、其他人对该公司的评价；常用的渠道有<strong>天眼查</strong>、<strong>企查查</strong>、<strong>看准网</strong>、<code>offershow</code>等等</p>
<h3 id="岗位情况"><a href="#岗位情况" class="headerlink" title="岗位情况"></a>岗位情况</h3><p>如果公司靠谱，再考虑你要签约的岗位的发展前景如何，跟你的职业规划方向是否匹配</p>
<h3 id="薪资情况"><a href="#薪资情况" class="headerlink" title="薪资情况"></a>薪资情况</h3><h3 id="违约会怎样？"><a href="#违约会怎样？" class="headerlink" title="违约会怎样？"></a>违约会怎样？</h3><p>很多企业会规定违约金，一般情况是 <code>3-8k</code>，具体以公司的规定为准。如果违约了，是需要支付违约金的。此外，多数学校只允许学生毁约一次（签三方不止关系你和公司，还有学校）。所以需要跟就就业指导老师确认一下，如果毁约了，是否会给新的三方文件。</p>
<p>确定好了之后，如果想春招的时候再尝试一下，可以先签一个保底。</p>
<h2 id="签三方前须知"><a href="#签三方前须知" class="headerlink" title="签三方前须知"></a>签三方前须知</h2><h3 id="户口"><a href="#户口" class="headerlink" title="户口"></a>户口</h3><h4 id="户口的重要性"><a href="#户口的重要性" class="headerlink" title="户口的重要性"></a>户口的重要性</h4><p>户口是否重要，有什么用，网上的讨论很多。只能说，你觉得它重要，它就重要，你觉得不重要，它就不重要。个人觉得，如果想要在一个城市长久稳定地发展，那它就很重要。至于户口的实际作用，不同的城市不同。</p>
<p>以北京为例</p>
<blockquote>
<p>如果没有北京户口，当你想跳槽时，会发现能选择的单位很有限，因为很多单位招人时，往往都要求北京生源、北京户口，没有北京户口，也无法参加北京市公务员考试，这是户口带给我们的直接影响。</p>
</blockquote>
<p>所以，如果不打算在某一个城市长待或者出国，那么户口可能就不重要了。</p>
<h4 id="入户"><a href="#入户" class="headerlink" title="入户"></a>入户</h4><p>入户有些公司会帮忙解决，有些则不会，一般通过 <code>HR</code> 或者宣讲会可获知。而且是否需要重视这个问题主要看城市，如果是在广深地区基本不用怎么操心，有公司解决自然不用说。如果没有也没关系，可以自己牵，只是需要多跑几趟派出所。</p>
<p>如果自己迁，需要注意的是，毕业时，保管好毕业报告证，并将自己档案挂在人才市场，再去迁。毕业两年内，都可以以人才引进的方式入户。其实如果是在广深，这些都是不需要怎么担心的，到时候自然水到渠成。</p>
<p>如果是<strong>在北京上海</strong>，就需要注意了。</p>
<p>北京上海对双外卡得比较严，所以公司能否给你解决户口是非常重要的。一般来说<strong>大多数国企、事业单位、研究所、公务员</strong>都是有能力解决的，但除此之外的，则需要询问清楚。<strong>对于大多数人来说，想要获得北京、上海户口，基本上就只有毕业这一次机会</strong>，所以请尽量想清楚。</p>
<p>特别说明的是，对于那些只是承诺<strong>“尽力解决户口”、“不保证解决户口”</strong>的公司，跟你签了三方，实际上你就要承担一定风险。一旦最后没给你落下，那么算单位违约，三方必然要退给你，你再回学校办改派。大多数情况下，户口和档案会被打回原籍，因为那时再签约别的单位已经不可能了。</p>
<h3 id="整体薪资"><a href="#整体薪资" class="headerlink" title="整体薪资"></a>整体薪资</h3><p>薪资</p>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>求职</tag>
      </tags>
  </entry>
  <entry>
    <title>我做了一个手写春联小网页，祝大家虎年暴富</title>
    <url>/2022/01/28/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/%E6%88%91%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E6%89%8B%E5%86%99%E6%98%A5%E8%81%94%E5%B0%8F%E7%BD%91%E9%A1%B5%EF%BC%8C%E7%A5%9D%E5%A4%A7%E5%AE%B6%E8%99%8E%E5%B9%B4%E6%9A%B4%E5%AF%8C/</url>
    <content><![CDATA[<p>手写春联：<a href="https://cl.xugaoyi.com/">https://cl.xugaoyi.com/</a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>虎年春节快到了，首先祝大家新年快乐，轻松暴富。<br>最近在网上经常看到生成春联的文章，不过这些小demo要么功能简陋,要么UI特别‘程序员’，满足不了我挑剔的眼光。干脆我自己做一个吧，顺便简单体验一下vite+vue3。（因为页面相对简单，vue组件风格还是使用选项式api，重点还是想把产品快速做出来。）</p>
<span id="more"></span>


<p align="center"><img src="https://img-blog.csdnimg.cn/img_convert/185c88180b87ac7277072280a0c144ce.png" width="500" style="cursor: zoom-in;"></p>

<h3 id="产品构思"><a href="#产品构思" class="headerlink" title="产品构思"></a>产品构思</h3><p>包含<code>手写春节</code>和<code>生成春联</code>两大功能：</p>
<ul>
<li><p><strong>手写春联</strong></p>
<ul>
<li>模拟用笔写字的字迹</li>
<li>选择画笔颜色</li>
<li>调整画笔大小</li>
<li>清空画布</li>
<li>撤回笔画</li>
<li>切换上、下联、横批、福字</li>
<li>随机切换对联提示</li>
<li>预览图片和下载</li>
<li>贴春联海报和下载</li>
</ul>
</li>
<li><p><strong>生成模式</strong></p>
<ul>
<li>选择画笔颜色</li>
<li>挑选生成的对联</li>
<li>输入对联</li>
<li>随机切换对联</li>
<li>贴春联海报和下载</li>
</ul>
</li>
<li><p><strong>其他</strong></p>
<ul>
<li>快速切换模式按钮</li>
<li>可控制的背景音乐</li>
<li>微信分享网页</li>
</ul>
</li>
</ul>
<h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/392f2036c0ce4c97b8562e6f17606491~tplv-k3u1fbpfcp-watermark.image" alt="222.jpg"></p>
<h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><ul>
<li><strong>技术栈</strong><ul>
<li>vite (打包&amp;构建)</li>
<li>vue3 (页面开发)</li>
<li>vant（ui）</li>
<li>sass (css)</li>
<li><a href="https://github.com/linjc/smooth-signature">smooth-signature.js (带笔锋手写库)</a></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#x27;mode-&#x27; + mode&quot;</span> @<span class="attr">touchstart</span>=<span class="string">&quot;handleTouchstart&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 切换模式按钮 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle-mode-btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;toggleMode&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123; mode === 1 ? &#x27;手写&#x27; : &#x27;生成&#x27; &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-qiehuan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 工具栏 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">class</span>=<span class="string">&quot;actions&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:style</span>=<span class="string">&quot;&#123; borderTopRightRadius: colorListVisibility ? &#x27;0&#x27; : &#x27;5px&#x27; &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 手写模式显示 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;mode === 1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 调色板 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;palette btn-block&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">class</span>=<span class="string">&quot;cur-color&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">click</span>=<span class="string">&quot;togglePalette&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:style</span>=<span class="string">&quot;&#123; background: colorList[curColorIndex] &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;colorList&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;colorListVisibility&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in colorList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">:style</span>=<span class="string">&quot;&#123; background: item &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              @<span class="attr">click</span>=<span class="string">&quot;selectColor(index)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 滑块 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-box btn-block&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">van-slider</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">v-model</span>=<span class="string">&quot;progress&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">vertical</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">change</span>=<span class="string">&quot;changeProgress&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">bar-height</span>=<span class="string">&quot;28&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">active-color</span>=<span class="string">&quot;transparent&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:min</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:max</span>=<span class="string">&quot;150&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;custom-button&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">van-slider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 清空 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleClear&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-lajitong&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 撤销 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleUndo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-fanhui&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 切换画布的按钮 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;cur-active&#x27;: curCanvasIndex === index &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in canvasList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:key</span>=<span class="string">&quot;item.name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          @<span class="attr">click</span>=<span class="string">&quot;changeCanvas(index)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;&#123; item.name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn prominent&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handlePreview&quot;</span>&gt;</span>预览<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn prominent&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;openPosters&quot;</span>&gt;</span>贴联<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 生成模式显示 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 选颜色 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">class</span>=<span class="string">&quot;color-list-quick&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:class</span>=<span class="string">&quot;&#123; active: curColorIndex === index &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in colorList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:style</span>=<span class="string">&quot;&#123; background: item &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          @<span class="attr">click</span>=<span class="string">&quot;selectColor(index)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showPickBox = true&quot;</span>&gt;</span>挑选<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInputBox = true&quot;</span>&gt;</span>输入<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 挑选对联弹窗 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">van-action-sheet</span> <span class="attr">v-model:show</span>=<span class="string">&quot;showPickBox&quot;</span> <span class="attr">title</span>=<span class="string">&quot;请挑选对联&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;duilian-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in duilianList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              @<span class="attr">click</span>=<span class="string">&quot;handlePickDuilian(item)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.shang &#125;&#125;&lt;/span</span></span><br><span class="line"><span class="language-xml">              &gt;， <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.xia &#125;&#125;&lt;/span</span></span><br><span class="line"><span class="language-xml">              &gt;。</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.heng &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">van-action-sheet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 输入对联弹窗 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">van-action-sheet</span> <span class="attr">v-model:show</span>=<span class="string">&quot;showInputBox&quot;</span> <span class="attr">title</span>=<span class="string">&quot;请输入对联&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">van-form</span> @<span class="attr">submit</span>=<span class="string">&quot;handleSubmitInput&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">van-cell-group</span> <span class="attr">inset</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">van-field</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">v-model</span>=<span class="string">&quot;shanglian&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">name</span>=<span class="string">&quot;shang&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">label</span>=<span class="string">&quot;上联&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">placeholder</span>=<span class="string">&quot;上联&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">:rules</span>=<span class="string">&quot;[</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                  &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    required: true,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    message: &#x27;请输入7位汉字上联&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    pattern: /^[\u4e00-\u9fa5]&#123;7&#125;$/</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                  &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                ]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">clearable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">van-field</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">v-model</span>=<span class="string">&quot;xialian&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">name</span>=<span class="string">&quot;xia&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">label</span>=<span class="string">&quot;下联&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">placeholder</span>=<span class="string">&quot;下联&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">:rules</span>=<span class="string">&quot;[</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                  &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    required: true,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    message: &#x27;请输入7位汉字下联&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    pattern: /^[\u4e00-\u9fa5]&#123;7&#125;$/</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                  &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                ]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">clearable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">van-field</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">v-model</span>=<span class="string">&quot;hengpi&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">name</span>=<span class="string">&quot;heng&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">label</span>=<span class="string">&quot;横批&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">placeholder</span>=<span class="string">&quot;横批&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">:rules</span>=<span class="string">&quot;[</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                  &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    required: true,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    message: &#x27;请输入4位汉字横批&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                    pattern: /^[\u4e00-\u9fa5]&#123;4&#125;$/</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                  &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">                ]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">clearable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">van-cell-group</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 16px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">van-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">round</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">block</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">native-type</span>=<span class="string">&quot;submit&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">color</span>=<span class="string">&quot;linear-gradient(to right, #ff6034, #c33825)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &gt;</span></span></span><br><span class="line"><span class="language-xml">                完成</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">van-form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">van-action-sheet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 模式1-春联画布 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-show</span>=<span class="string">&quot;mode === 1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in canvasList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:key</span>=<span class="string">&quot;item.name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">canvas</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">class</span>=<span class="string">&quot;canvas&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:class</span>=<span class="string">&quot;item.className&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-show</span>=<span class="string">&quot;curCanvasIndex === index&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:style</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">          marginTop:</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            item.height &lt; clientHeight</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              ? `$&#123;(clientHeight - item.height) / 2&#125;px`</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">              : 0,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">          marginLeft:</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">            item.width &lt; clientWidth ? `$&#123;(clientWidth - item.width) / 2&#125;px` : 0</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 模式2-春联画布 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;mode === 2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;canvas-mode-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas-top&quot;</span> <span class="attr">:width</span>=<span class="string">&quot;200 * scale&quot;</span> <span class="attr">:height</span>=<span class="string">&quot;60 * scale&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas-left&quot;</span> <span class="attr">:width</span>=<span class="string">&quot;60 * scale&quot;</span> <span class="attr">:height</span>=<span class="string">&quot;364 * scale&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas-right&quot;</span> <span class="attr">:width</span>=<span class="string">&quot;60 * scale&quot;</span> <span class="attr">:height</span>=<span class="string">&quot;364 * scale&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 贴春联按钮 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">class</span>=<span class="string">&quot;btn-posters&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;openPosters&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- footer-当前对联提示 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">v-if</span>=<span class="string">&quot;duilian.shang&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;refresh-btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleRefresh(true)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-shuaxin&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; rotate: isRotate &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;duilian&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>对联<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; duilian.shang &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; duilian.xia &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>横批<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123; duilian.heng &#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 分享按钮 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;share-btn&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;isShowShareBtn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;isShowShareTip = true&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-fenxiang&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 微信分享提示语 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">class</span>=<span class="string">&quot;share-tip&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-if</span>=<span class="string">&quot;isShowShareTip&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">click</span>=<span class="string">&quot;isShowShareTip = false&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      点击右上角把这个工具分享给朋友</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hand&quot;</span>&gt;</span>👆<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 保存tip --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;isShowTip&quot;</span> <span class="attr">class</span>=<span class="string">&quot;download-tip&quot;</span>&gt;</span>*长按图片保存或转发<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 版权 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;copyright&quot;</span>&gt;</span>公众号「有趣研究社」 ©版权所有<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 载入图片元素，用于快速贴图使用, 注意设置crossorigin=&quot;anonymous&quot;解决跨域 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isReadImages&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in bgList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:src</span>=<span class="string">&quot;item&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">class</span>=<span class="string">&quot;hide-img&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:id</span>=<span class="string">&quot;`bg-img-` + index&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">class</span>=<span class="string">&quot;hide-img&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">id</span>=<span class="string">&quot;qrcode&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/xugaoyi/image_store2@master/img/qrcode.zul0pldsuao.png&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 背景音乐 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">audio</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/xugaoyi/image_store2@master/cjxq.mp3&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">id</span>=<span class="string">&quot;bgm&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ref</span>=<span class="string">&quot;bgm&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">loop</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">class</span>=<span class="string">&quot;play-btn&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:class</span>=<span class="string">&quot;&#123; paused: !isPlay &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ref</span>=<span class="string">&quot;playBtn&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">click</span>=<span class="string">&quot;handlePlay&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-yinle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;body-bg-img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; <span class="title class_">ImagePreview</span>, <span class="title class_">Notify</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; isWX, isMobile &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Button.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> dl <span class="keyword">from</span> <span class="string">&#x27;@/assets/img/yh/dl.jpeg&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> hp <span class="keyword">from</span> <span class="string">&#x27;@/assets/img/yh/hp.jpeg&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> fz <span class="keyword">from</span> <span class="string">&#x27;@/assets/img/yh/fz.png&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 对联数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> duilianList <span class="keyword">from</span> <span class="string">&#x27;@/mock/duilian&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="variable constant_">PROPORTION</span> = <span class="number">0.37</span> <span class="comment">// 图片缩小比例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="variable constant_">INSTANTIATE_NAME</span> = <span class="string">&#x27;signature&#x27;</span> <span class="comment">// 实例名称</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="variable constant_">MIN_WIDTH</span> = <span class="number">3</span> <span class="comment">// 画笔最小宽</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="variable constant_">MAX_WIDTH</span> = <span class="number">12</span> <span class="comment">// 画笔最大宽</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 海报背景图大小</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="variable constant_">BG_WIDTH</span> = <span class="number">750</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="variable constant_">BG_HEIGHT</span> = <span class="number">1448</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 贴图定位和大小</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="variable constant_">POSITION</span> = [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#123; <span class="attr">left</span>: <span class="number">57</span>, <span class="attr">top</span>: <span class="number">510</span>, <span class="attr">width</span>: <span class="number">90</span>, <span class="attr">height</span>: <span class="number">546</span> &#125;, <span class="comment">// 上联</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#123; <span class="attr">left</span>: <span class="number">600</span>, <span class="attr">top</span>: <span class="number">510</span>, <span class="attr">width</span>: <span class="number">90</span>, <span class="attr">height</span>: <span class="number">546</span> &#125;, <span class="comment">// 下联</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#123; <span class="attr">left</span>: <span class="number">225</span>, <span class="attr">top</span>: <span class="number">345</span>, <span class="attr">width</span>: <span class="number">300</span>, <span class="attr">height</span>: <span class="number">90</span> &#125;, <span class="comment">// 横幅</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#123; <span class="attr">left</span>: <span class="number">460</span>, <span class="attr">top</span>: <span class="number">450</span>, <span class="attr">width</span>: <span class="number">130</span>, <span class="attr">height</span>: <span class="number">130</span> &#125;, <span class="comment">// 福字</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Button</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      duilianList,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">mode</span>: <span class="title class_">Number</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;mode&#x27;</span>)) || <span class="number">1</span>, <span class="comment">// 1 手写，2 生成</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">curCanvasIndex</span>: <span class="number">0</span>, <span class="comment">// 显示哪个画布</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">progress</span>: <span class="number">100</span>, <span class="comment">// 画笔大小的刻度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">clientWidth</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">clientHeight</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">canvasList</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">name</span>: <span class="string">&#x27;上联&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">className</span>: <span class="string">&#x27;canvas-a&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">bgImage</span>: dl,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">width</span>: <span class="number">600</span> * <span class="variable constant_">PROPORTION</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">height</span>: <span class="number">3640</span> * <span class="variable constant_">PROPORTION</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">name</span>: <span class="string">&#x27;下联&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">className</span>: <span class="string">&#x27;canvas-b&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">bgImage</span>: dl,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">width</span>: <span class="number">600</span> * <span class="variable constant_">PROPORTION</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">height</span>: <span class="number">3640</span> * <span class="variable constant_">PROPORTION</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">name</span>: <span class="string">&#x27;横批&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">className</span>: <span class="string">&#x27;canvas-c&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">bgImage</span>: hp,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">width</span>: <span class="number">2000</span> * <span class="variable constant_">PROPORTION</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">height</span>: <span class="number">600</span> * <span class="variable constant_">PROPORTION</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">name</span>: <span class="string">&#x27;福字&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">className</span>: <span class="string">&#x27;canvas-d&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">bgImage</span>: fz,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">width</span>: <span class="number">366</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">height</span>: <span class="number">366</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">colorList</span>: [<span class="string">&#x27;#000000&#x27;</span>, <span class="string">&#x27;#ffd800&#x27;</span>, <span class="string">&#x27;#e8bd48&#x27;</span>, <span class="string">&#x27;#ddc08c&#x27;</span>,],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">curColorIndex</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">colorListVisibility</span>: <span class="literal">false</span>, <span class="comment">// 画布颜色选择列表可见性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isShowTip</span>: <span class="literal">false</span>, <span class="comment">// 是否显示底部提示语</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">duilian</span>: &#123;&#125;, <span class="comment">// 当前对联文本对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isRotate</span>: <span class="literal">false</span>, <span class="comment">// 刷新icon旋转</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">bgList</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;https://cdn.jsdelivr.net/gh/xugaoyi/image_store@master/1.4j8qpdnq80i0.jpeg&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;https://cdn.jsdelivr.net/gh/xugaoyi/image_store@master/4.4460an8ag5o0.jpeg&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;https://cdn.jsdelivr.net/gh/xugaoyi/image_store@master/5.3axtl4xpvy00.jpeg&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;https://cdn.jsdelivr.net/gh/xugaoyi/image_store@master/6.2lnbphdqjaq0.jpeg&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isReadImages</span>: <span class="literal">false</span>, <span class="comment">// 延迟加载图片用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isShowShareBtn</span>: <span class="literal">false</span>, <span class="comment">// 是否显示分享按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isShowShareTip</span>: <span class="literal">false</span>, <span class="comment">// 是否显示分享提示语</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isPlay</span>: <span class="literal">false</span>, <span class="comment">// 是否在播放</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 模式2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">canvasTop</span>: <span class="literal">null</span>, <span class="comment">// 横批</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">canvasLeft</span>: <span class="literal">null</span>, <span class="comment">// 上联</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">canvasRight</span>: <span class="literal">null</span>, <span class="comment">// 下联</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">imgObj1</span>: <span class="literal">null</span>, <span class="comment">// 横批图片对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">imgObj2</span>: <span class="literal">null</span>, <span class="comment">// 上下联图片对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">scale</span>: <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> || <span class="number">1</span>, <span class="number">2</span>), <span class="comment">// 用于增加画布清晰度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">showPickBox</span>: <span class="literal">false</span>, <span class="comment">// 挑选对联的弹框</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">showInputBox</span>: <span class="literal">false</span>, <span class="comment">// 输入对联的弹框</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">shanglian</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 输入的上联</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">xialian</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 输入的下联</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">hengpi</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 输入的横批</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 模式1-当前画布实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">curCanvasInstantiate</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="variable language_">this</span>[<span class="variable constant_">INSTANTIATE_NAME</span> + <span class="variable language_">this</span>.<span class="property">curCanvasIndex</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 微信浏览器显示分享按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">isShowShareBtn</span> = <span class="title function_">isWX</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (!<span class="title function_">isMobile</span>()) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Notify</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;请用移动端打开获得最佳体验&#x27;</span>, <span class="attr">duration</span>: <span class="number">6000</span>, &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">initMode1</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 初始化对联提示</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">handleRefresh</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="title function_">initMode2</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 按钮添加激活时发光效果class</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> btnEl = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.btn,.btn-block&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btnEl.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      item.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        item.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;btn-active&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      item.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          item.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;btn-active&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">100</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 延迟加载贴图背景</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">isReadImages</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 切换画笔颜色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">curColorIndex</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">curCanvasInstantiate</span>.<span class="property">color</span> = <span class="variable language_">this</span>.<span class="property">colorList</span>[<span class="variable language_">this</span>.<span class="property">curColorIndex</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">mode</span> === <span class="number">2</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="title function_">refreshDuilian</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 切换画布时应用当前画笔颜色和大小</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">curCanvasIndex</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">curCanvasInstantiate</span>.<span class="property">color</span> = <span class="variable language_">this</span>.<span class="property">colorList</span>[<span class="variable language_">this</span>.<span class="property">curColorIndex</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">handleChangeSize</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">initMode1</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> &#123; colorList, curColorIndex &#125; = <span class="variable language_">this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">canvasList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> options = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">width</span>: item.<span class="property">width</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">height</span>: item.<span class="property">height</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">minWidth</span>: <span class="variable constant_">MIN_WIDTH</span>, <span class="comment">// 画笔最小宽度(px)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">maxWidth</span>: <span class="variable constant_">MAX_WIDTH</span>, <span class="comment">// 画笔最大宽度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">minSpeed</span>: <span class="number">1.8</span>, <span class="comment">// 画笔达到最小宽度所需最小速度(px/ms)，取值范围1.0-10.0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">color</span>: colorList[curColorIndex],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 新增的配置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">bgImage</span>: item.<span class="property">bgImage</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>[<span class="variable constant_">INSTANTIATE_NAME</span> + index] = <span class="keyword">new</span> <span class="title class_">SmoothSignature</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.&#x27;</span> + item.<span class="property">className</span>), options);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">initMode2</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">canvasTop</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas-top&#x27;</span>).<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">canvasLeft</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas-left&#x27;</span>).<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">canvasRight</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas-right&#x27;</span>).<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 设字体样式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> font = <span class="string">&quot;36px xs, cursive&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">canvasTop</span>.<span class="property">font</span> = font</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">canvasLeft</span>.<span class="property">font</span> = font</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">canvasRight</span>.<span class="property">font</span> = font</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 增强清晰度</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> &#123; scale &#125; = <span class="variable language_">this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">canvasTop</span>.<span class="title function_">scale</span>(scale, scale);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">canvasLeft</span>.<span class="title function_">scale</span>(scale, scale);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">canvasRight</span>.<span class="title function_">scale</span>(scale, scale);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 设背景图</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">imgObj1</span> = <span class="keyword">new</span> <span class="title class_">Image</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">imgObj2</span> = <span class="keyword">new</span> <span class="title class_">Image</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">imgObj1</span>.<span class="property">src</span> = hp</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">imgObj2</span>.<span class="property">src</span> = dl</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">imgObj1</span>.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 贴背景</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">canvasTop</span>.<span class="title function_">drawImage</span>(<span class="variable language_">this</span>.<span class="property">imgObj1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">60</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 字体加载完成后</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="property">fonts</span>.<span class="property">ready</span>.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="title function_">handleTopFillText</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">imgObj2</span>.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 贴背景</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">canvasLeft</span>.<span class="title function_">drawImage</span>(<span class="variable language_">this</span>.<span class="property">imgObj2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">364</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">canvasRight</span>.<span class="title function_">drawImage</span>(<span class="variable language_">this</span>.<span class="property">imgObj2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">364</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 字体加载完成后</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="property">fonts</span>.<span class="property">ready</span>.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="title function_">handleLRFillText</span>(<span class="variable language_">this</span>.<span class="property">canvasLeft</span>, <span class="variable language_">this</span>.<span class="property">duilian</span>.<span class="property">shang</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="title function_">handleLRFillText</span>(<span class="variable language_">this</span>.<span class="property">canvasRight</span>, <span class="variable language_">this</span>.<span class="property">duilian</span>.<span class="property">xia</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 模式2-刷新对联</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">refreshDuilian</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">canvasTop</span>.<span class="title function_">drawImage</span>(<span class="variable language_">this</span>.<span class="property">imgObj1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">60</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">canvasLeft</span>.<span class="title function_">drawImage</span>(<span class="variable language_">this</span>.<span class="property">imgObj2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">364</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">canvasRight</span>.<span class="title function_">drawImage</span>(<span class="variable language_">this</span>.<span class="property">imgObj2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">364</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">handleTopFillText</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">handleLRFillText</span>(<span class="variable language_">this</span>.<span class="property">canvasLeft</span>, <span class="variable language_">this</span>.<span class="property">duilian</span>.<span class="property">shang</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">handleLRFillText</span>(<span class="variable language_">this</span>.<span class="property">canvasRight</span>, <span class="variable language_">this</span>.<span class="property">duilian</span>.<span class="property">xia</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 模式2-贴横批</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleTopFillText</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 贴文本</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">canvasTop</span>.<span class="property">fillStyle</span> = <span class="variable language_">this</span>.<span class="property">colorList</span>[<span class="variable language_">this</span>.<span class="property">curColorIndex</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">duilian</span>.<span class="property">heng</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">duilian</span>.<span class="property">heng</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">const</span> left = <span class="number">42</span> * (index + <span class="number">1</span>) - <span class="number">22</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">canvasTop</span>.<span class="title function_">fillText</span>(item, left, <span class="number">40</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 模式2-贴上下联</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleLRFillText</span>(<span class="params">ctx, text</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ctx.<span class="property">fillStyle</span> = <span class="variable language_">this</span>.<span class="property">colorList</span>[<span class="variable language_">this</span>.<span class="property">curColorIndex</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (text) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        text.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">const</span> top = <span class="number">50</span> * (index + <span class="number">1</span>) - <span class="number">8</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          ctx.<span class="title function_">fillText</span>(item, <span class="number">13</span>, top)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 切换模式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">toggleMode</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">mode</span> === <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">mode</span> = <span class="number">2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="title function_">refreshDuilian</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">mode</span> = <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;mode&#x27;</span>, <span class="variable language_">this</span>.<span class="property">mode</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 打开调色板</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">togglePalette</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">colorListVisibility</span> = !<span class="variable language_">this</span>.<span class="property">colorListVisibility</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 关闭调色板</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleTouchstart</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 不是点击选择颜色时</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (e.<span class="property">path</span>[<span class="number">1</span>]?.<span class="property">classList</span>?.<span class="property">value</span> !== <span class="string">&#x27;colorList&#x27;</span> &amp;&amp; e.<span class="property">target</span>.<span class="property">classList</span>?.<span class="property">value</span> !== <span class="string">&#x27;cur-color&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">colorListVisibility</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 选择颜色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">selectColor</span>(<span class="params">index</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">curColorIndex</span> = index</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">colorListVisibility</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 切换画布</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">changeCanvas</span>(<span class="params">index</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">curCanvasIndex</span> = index</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 清空画布</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleClear</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">curCanvasInstantiate</span>.<span class="title function_">clear</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 撤销笔画</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleUndo</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">curCanvasInstantiate</span>.<span class="title function_">undo</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 预览</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handlePreview</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">showTopTip</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">isShowTip</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> _this = <span class="variable language_">this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">ImagePreview</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">images</span>: <span class="variable language_">this</span>.<span class="title function_">getImageList</span>(),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">closeable</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">startPosition</span>: <span class="variable language_">this</span>.<span class="property">curCanvasIndex</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">onClose</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          _this.<span class="property">isShowTip</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 打开海报预览</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">openPosters</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 创建画布</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      canvas.<span class="property">width</span> = <span class="variable constant_">BG_WIDTH</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      canvas.<span class="property">height</span> = <span class="variable constant_">BG_HEIGHT</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> resultImageList = [];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 是否隐藏福字</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> isHideFu = <span class="variable language_">this</span>[<span class="variable constant_">INSTANTIATE_NAME</span> + <span class="number">3</span>].<span class="title function_">isEmpty</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">bgList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 贴背景图</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ctx.<span class="title function_">drawImage</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;bg-img-&#x27;</span> + index), <span class="number">0</span>, <span class="number">0</span>, <span class="variable constant_">BG_WIDTH</span>, <span class="variable constant_">BG_HEIGHT</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 贴对联</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">mode</span> === <span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">canvasList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (index === <span class="number">3</span> &amp;&amp; isHideFu) <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> dlCanvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.&#x27;</span> + item.<span class="property">className</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> &#123; left, top, width, height &#125; = <span class="variable constant_">POSITION</span>[index]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            ctx.<span class="title function_">drawImage</span>(dlCanvas, left, top, width, height)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          [<span class="string">&#x27;canvas-left&#x27;</span>, <span class="string">&#x27;canvas-right&#x27;</span>, <span class="string">&#x27;canvas-top&#x27;</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> dlCanvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(item)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> &#123; left, top, width, height &#125; = <span class="variable constant_">POSITION</span>[index]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            ctx.<span class="title function_">drawImage</span>(dlCanvas, left, top, width, height)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 贴二维码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ctx.<span class="title function_">drawImage</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;qrcode&quot;</span>), <span class="number">40</span>, <span class="number">1280</span>, <span class="number">580</span>, <span class="number">136</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 贴文本</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ctx.<span class="property">font</span> = <span class="string">&quot;18px sans-serif&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#666666&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;©公众号「有趣研究社」&#x27;</span>, <span class="number">550</span>, <span class="number">1420</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 导出图片</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        resultImageList.<span class="title function_">push</span>(canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/jpeg&#x27;</span>, <span class="number">0.8</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 打开图片预览</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">isShowTip</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> _this = <span class="variable language_">this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">ImagePreview</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">images</span>: resultImageList,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">closeable</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">onClose</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          _this.<span class="property">isShowTip</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">showTopTip</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 弹出顶部提示语</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">showTopTip</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (!<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;showTip&#x27;</span>)) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;showTip&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Notify</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">message</span>: <span class="string">&#x27;长按图片可保存到本地&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">color</span>: <span class="string">&#x27;#c33825&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">background</span>: <span class="string">&#x27;#eed3ae&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 获取对联图片列表</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getImageList</span>(<span class="params">type = <span class="string">&#x27;image/png&#x27;</span></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> imageList = []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">canvasList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (index === <span class="number">3</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// `福`字必须是png格式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          type = <span class="string">&#x27;image/png&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        imageList.<span class="title function_">push</span>(<span class="variable language_">this</span>[<span class="variable constant_">INSTANTIATE_NAME</span> + index].<span class="title function_">toDataURL</span>(type, <span class="number">0.8</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> imageList</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 进度改变时</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">changeProgress</span>(<span class="params">progress</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">progress</span> = progress</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">handleChangeSize</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 调整画笔大小</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleChangeSize</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> &#123; progress &#125; = <span class="variable language_">this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">curCanvasInstantiate</span>.<span class="property">minWidth</span> = <span class="variable constant_">MIN_WIDTH</span> * progress / <span class="number">100</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">curCanvasInstantiate</span>.<span class="property">maxWidth</span> = <span class="variable constant_">MAX_WIDTH</span> * progress / <span class="number">100</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 刷新对联</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleRefresh</span>(<span class="params">rotate</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">duilian</span> = duilianList[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * duilianList.<span class="property">length</span>)]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (rotate) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">mode</span> === <span class="number">2</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="title function_">refreshDuilian</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 使icon旋转</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">isRotate</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">isRotate</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">300</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 播放背景音乐</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handlePlay</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> &#123; bgm &#125; = <span class="variable language_">this</span>.<span class="property">$refs</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (bgm.<span class="property">paused</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        bgm.<span class="title function_">play</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">isPlay</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        bgm.<span class="title function_">pause</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">isPlay</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 完成输入对联</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleSubmitInput</span>(<span class="params">values</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">duilian</span> = values</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">showInputBox</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">refreshDuilian</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 完成挑选对联</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handlePickDuilian</span>(<span class="params">item</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">duilian</span> = item</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">showPickBox</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="title function_">refreshDuilian</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure>


<p>更多有趣的小网页欢迎关注公众号<code>有趣研究社</code>:</p>
<blockquote>
<p><a href="https://cl.xugaoyi.com/">手写春联</a></br><br><a href="https://game.xugaoyi.com/">FC在线模拟器</a></br><br><a href="https://avatar.xugaoyi.com/">爱国头像生成器</a></br><br><a href="https://zfb.xugaoyi.com/">到账语音生成器</a></p>
</blockquote>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>产品</tag>
      </tags>
  </entry>
  <entry>
    <title>拥抱生活，拥抱快乐</title>
    <url>/2020/06/26/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/%E6%8B%A5%E6%8A%B1%E7%94%9F%E6%B4%BB%EF%BC%8C%E6%8B%A5%E6%8A%B1%E5%BF%AB%E4%B9%90/</url>
    <content><![CDATA[<p>生活在后现代的今天，很多人都有一种虚无感，认为人生没有意义。但是，人生不可能没有意义，因为当你认为没有意义的时候，一定有一个与之相对应的概念叫有意义。</p>
<span id="more"></span>

<p>当你怀疑人生没有意义时，难道怀疑本身不值得怀疑吗？</p>
<p>不要任由你内心的虚无感蔓延，我们需要去拥抱真实的生活。</p>
<p>所有真实的快乐，都离不开艰辛的努力，无论是金榜题名的快乐，还是事业成功的喜悦，甚至包括洞房花烛的激动。所有真实的快乐，都需要长久的铺垫与努力，没有辛勤的汗水，快乐也就不再真实。</p>
<p>如果快乐触手可及，这种廉价的快乐也就不值得珍惜，随时都可能抛弃。因此，对于年轻人而言，一个重要的功课就是学会去节制欲望。</p>
<p>所有通过捷径所带来的快乐，都是廉价的，以至于所有追求都变得毫无意义，人生就了无生趣。我们需要在每天真实的努力中去拥抱生活，追寻真实的快乐。</p>
<p>::: center<br>  <img src="https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200626212238.webp"><br>:::</p>
<blockquote>
<p>文章摘录自:B站视频《罗翔说刑法》，链接<a href="https://b23.tv/K8ulrE">https://b23.tv/K8ulrE</a></p>
</blockquote>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>鸡汤</tag>
      </tags>
  </entry>
  <entry>
    <title>纯小白如何自学编程</title>
    <url>/2022/10/25/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/%E7%BA%AF%E5%B0%8F%E7%99%BD%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="纯小白如何自学编程"><a href="#纯小白如何自学编程" class="headerlink" title="纯小白如何自学编程"></a>纯小白如何自学编程</h1><p>看似一个简单的问题但包藏着很多信息，绝对不是简单几句话就能说清楚。首先程序员也分为很多种。例如从大的方向来说，有后端、web，移动端、嵌入式等等。再从编程语言方向细分，如后端程序员又分为 Java、PHP、.NET 等等，所以无论是自学还是报班都要先搞清楚你要学习或者你感兴趣的方向，其次再确定编程语言，之后再开始学习。这个顺序不搞清楚，自学起来就会稀里糊涂，越学越累，走很多弯路。</p>
<p>即使我这么描述了一圈，还是有一些读者接着问，“后端程序员又是个啥玩意？”，每次听到这类问题我都感觉很无语，不知道怎么解释。但闲下来后再想想，这些茫然我也是经历过，被嘲笑过，被无语过，毕竟我也算是 0 基础自学过来的，所以，今天趁着周末，我会尽可能的在自己的知识范围内为大家梳理一下这些问题。</p>
<p>首先就从大家经常接触的前端开始。这里的前端并不是单单指 web，其实应该叫终端。再通俗点说可以理解为给用户使用的产品。你打开的一个网页、一个 App、或者 PC 端的一个软件，都可以理解为前端，而这些产品需要程序员用不同的编程语言开发。这里先给大家大致梳理一下关于前端的一下东西。</p>
<p><img src="http://img.puppetdev.top/image/note/fc2b65c9fdb321e1cf8ae49a457c85c0.png" alt="image-20210904124356657"></p>
<p>这图应该还算清晰吧，假如你想学习 Android 开发，那首先学习的编程语言就应该是 Java 或者 Kotlin。当然这张图还是非常笼统的，只不过是让大家先有个简单的认识，毕竟是给小白写的不能太复杂。前端的东西相对还是很好理解的，毕竟看得见摸得着。</p>
<p>那后端又是啥玩意呢？可以简单理解为运行在远程服务器上的代码程序，主要是为前端提供数据。例如网站上展示的文字图片；用户的登录及用户信息的存储等，都是有后端程序完成的。而一个最基本的后端也至少包含两部分：处理程序和数据库。能够开发后端程序的技术也是有很多，不同的技术也使用不用的编程语言。大概如下图。</p>
<img src="http://img.puppetdev.top/image/note/9d72224e89969bf1f219a77c9288ad74.png" alt="image-20210904124442490" style="zoom:80%;" />

<p>再强调一下，此图只是一个最基本的后端，而后端范畴远不止于此。这里就不扩展开来讲了。很多东西都是在学习的过程中慢慢理解的。</p>
<p>那么前后端是如何通信的呢。那就不得不说到 HTTP 请求了。</p>
<p><img src="http://img.puppetdev.top/image/note/f3dfa1cd1333d17a545018034e526b28.png" alt="image-20210904124507450"></p>
<p>至此，别说是小白了，就算是个猴子也应该对前后端&#x2F;对自学编程有初步的认识了吧！（开个玩笑）</p>
<p>那么肯定又有读者会纠结：到底是学习前端还是后端呢？哪个简单？哪个工资高？只能说因人而异吧。作为初学者也别太纠结，都学就是了，先找找感觉，后面再选择一个技术栈深造！后端的程序员多少要懂点前端，而前端程序员大概率都会点后端技术。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>自学</tag>
      </tags>
  </entry>
  <entry>
    <title>理解造轮子的程度</title>
    <url>/2022/10/25/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/%E7%90%86%E8%A7%A3%E9%80%A0%E8%BD%AE%E5%AD%90%E7%9A%84%E7%A8%8B%E5%BA%A6/</url>
    <content><![CDATA[<p>造轮子造轮子，造法也有很多种，我们可以从零件厂采购轮毂、轮胎，自己组装，也可以从冶金、找橡胶树资源开始。</p>
<span id="more"></span>

<h2 id="整体引用"><a href="#整体引用" class="headerlink" title="整体引用"></a>整体引用</h2><p>这一种方法省事，相当于只把内部的组件打乱重组，包装成一个新的样子出来。Pipenv 即属此类，它其实是由 pip(安装器)、virtualenv(虚拟环境)、pip-tools(依赖解析)几大部分组合而成，连接调度的方式居然是通过 subprocess call。</p>
<p>所以这里面子进程启动、输出结果解析，都是耗时的。其余的次要组件，包括依赖树显示、依赖安全性检查等，无一例外都是通过内嵌别的库实现的。这种方法，很懒，引用作者 Kenneth Reitz 本人的话，叫做</p>
<p>I (re)design beautiful APIs</p>
<p>这种有一大缺点，即无论要做什么，例如“缺陷修复”、feature 引入都非常依赖上游库的更新，非常不自由。</p>
<p>比如要安装一个包，用这种方法实现出来是这个样子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">install_requirement</span>(<span class="params">requirement</span>):</span><br><span class="line">    <span class="comment"># requirement是符合PEP508规范的依赖格式</span></span><br><span class="line">    subprocess.check_call([pip_path, <span class="string">&quot;install&quot;</span>, <span class="string">&quot;--no-deps&quot;</span>, requirement])</span><br></pre></td></tr></table></figure>

<h2 id="使用内部API"><a href="#使用内部API" class="headerlink" title="使用内部API"></a>使用内部API</h2><p>当对于上游库的修改多到了一定程度，一气之下，决定化整为零，把依赖的库拆散，只取它内部的结构和接口来做。还是同样的功能，用 pip 内部的 API 实现起来，是这个样子的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">install_requirement</span>(<span class="params">requirement</span>):</span><br><span class="line">    <span class="keyword">from</span> pip._internal.req.constructors <span class="keyword">import</span> install_req_from_line</span><br><span class="line"></span><br><span class="line">    ireq = install_req_from_line(requirement)</span><br><span class="line">    ireq.install([<span class="string">&quot;--no-deps&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>看看那一串长长的 <code>import string</code>，人家都叫做 <code>internal</code> 还带下划线了，都挡不住你要从里面 import。</p>
<p>这就是这种方法的问题所在：<strong>非常不稳定</strong>。可能下个版本，pip 就升级了，API 会变得完全不同，那么就要做相应的改变。</p>
<h2 id="自己动手，丰衣足食"><a href="#自己动手，丰衣足食" class="headerlink" title="自己动手，丰衣足食"></a>自己动手，丰衣足食</h2><p>改了几个版本以后，心里暗骂了一句 pip 的祖宗，责怪它为什么老改 API，一怒之下全部推倒重来，不求别人，全都自己实现，于是这一版代码变成了这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">install_requirement</span>(<span class="params">requirement</span>):</span><br><span class="line">    req = parse_install_requirement(requirement)</span><br><span class="line">    download_artifact(req)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> req.is_wheel:</span><br><span class="line">        unpack_artifact(req)</span><br><span class="line">        build_wheel(req)</span><br><span class="line">    copy_modules(req)</span><br><span class="line">    install_scripts(req)</span><br></pre></td></tr></table></figure>

<p>这里面省略了很多代码，这里的每一个函数，背后都是几十上百行的代码，因为 requirement 的类型是很多的，有本地的文件、有 Git 的地址，有的带 marker，有的带 extras……要覆盖到这所有的情况，难免出 bug。</p>
<p>这时就体现出用第三方库的优点来了：它们可能已经帮我们把所有的 bug 都踩过了，并受过生产环境的考验。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以造轮子要用哪种方法来造，是要经过仔细地考量的。</p>
<ul>
<li><p>用了第一种方法，结果发现需要定制很多</p>
</li>
<li><p>用了第二种方法，发现被牵着走，依赖的 API 一改动，自己就要迭代</p>
</li>
<li><p>用了第三种方法，结果发现天天都在修 bug</p>
</li>
</ul>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>造轮子</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript数组递归：构建ElementUI级联选择器的树形数据</title>
    <url>/2022/09/21/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E7%AB%AF/JavaScript%E6%95%B0%E7%BB%84%E9%80%92%E5%BD%92%EF%BC%9A%E6%9E%84%E5%BB%BAElementUI%E7%BA%A7%E8%81%94%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E6%A0%91%E5%BD%A2%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="前端处理"><a href="#前端处理" class="headerlink" title="前端处理"></a>前端处理</h2><p>通常，我们前端在开发管理后台的时候，会选择 <code>vue+element</code> 这样的技术栈去实现。但我们后端给的数据格式通常并不符合 <code>element</code> 的参数数据要求。比如，级联选择器 <code>cascader</code> 的参数数据格式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;第一级&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;第二级&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;第三级&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">13</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试3&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">14</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试分类2&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试分类0&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试分类3&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">15</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>而我们后端在输出接口的时候，是极少采用这种数据格式的。比如，一般叫 id|name|child 这样的字段名。</p>
<p>我们知道，cascader 是支持这样的别名参数设计的，因此我们使用时也没什么问题。</p>
<p>但是我今天遇到的一个状况是，后端直接给出了一个一维数组，换句话说，这位兄弟是直接查了一下数据表，把所有的数据通过一个数组直接给我返回了。而至于我怎么使用这个数据，他就不考虑了，因为他还有其他业务需要开发。</p>
<p>后端返回的数据格式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;catid&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;catname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;第一级&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;catid&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;catname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;catid&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;catname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;第二级&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;catid&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;catname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;catid&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;catname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试分类0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;catid&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;catname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试分类2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;catid&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;catname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;第三级&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;catid&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;catname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;catid&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;catname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试分类3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>嗯，理解。不就是个简单的递归嘛！我一会儿就写好了。但我担心后面其他地方还有这样类似的接口输出，那我总是写递归不就很麻烦了吗？因此，将此方法抽离，并加了一些扩展，最终方法代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">makeElementTree</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 将参数拿出来，不喜欢 params.xxx 的调用方式</span></span><br><span class="line">  <span class="keyword">const</span> &#123; pid, list, pidFiled, labelFiled, valueFiled &#125; = params</span><br><span class="line">  <span class="comment">// 构建一个内部函数，用于实现递归</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">makeTree</span> = (<span class="params">pid, arr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (i[pidFiled] === pid) &#123;</span><br><span class="line">        <span class="comment">// 自己调用自己，递归查归属于自己的 children</span></span><br><span class="line">        <span class="keyword">const</span> children = <span class="title function_">makeTree</span>(i[valueFiled], list)</span><br><span class="line">        <span class="comment">// 将原有的数据按照 element 的格式进行重构</span></span><br><span class="line">        <span class="keyword">const</span> obj = &#123;</span><br><span class="line">          <span class="attr">label</span>: i[labelFiled],</span><br><span class="line">          <span class="attr">value</span>: i[valueFiled]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果有 children 则插入 obj 中</span></span><br><span class="line">        <span class="keyword">if</span> (children.<span class="property">length</span>) &#123;</span><br><span class="line">          obj.<span class="property">children</span> = children</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">push</span>(obj)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">makeTree</span>(pid, list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在业务代码中，我们首先引入我们的方法，然后传进去参数就可以啦，如下演示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> treeCats = <span class="title function_">makeElementTree</span>(&#123;</span><br><span class="line">  <span class="attr">pid</span>: <span class="number">0</span>,               <span class="comment">// 顶级分类的 pid 为 0</span></span><br><span class="line">  <span class="attr">list</span>: data,           <span class="comment">// 将原始数组参数穿进去</span></span><br><span class="line">  <span class="attr">pidFiled</span>: <span class="string">&#x27;parentId&#x27;</span>, <span class="comment">// 在数组对象中，pid 字段名为 parentId</span></span><br><span class="line">  <span class="attr">labelFiled</span>: <span class="string">&#x27;catname&#x27;</span>,<span class="comment">// 我们想要的 label 字段名为 catname</span></span><br><span class="line">  <span class="attr">valueFiled</span>: <span class="string">&#x27;catid&#x27;</span>   <span class="comment">// 我们想要的 value 字段名为 catid</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(treeCats)</span><br></pre></td></tr></table></figure>

<h2 id="后端数据处理"><a href="#后端数据处理" class="headerlink" title="后端数据处理"></a>后端数据处理</h2><p>如果是后端直接处理后返回，则递归如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">makeTree</span>(<span class="params">pid, arr</span>):</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">        <span class="keyword">if</span> i[<span class="string">&#x27;pid&#x27;</span>] == pid:</span><br><span class="line">            rep = makeTree(i[<span class="string">&#x27;id&#x27;</span>], arr)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(rep) != <span class="number">0</span>:</span><br><span class="line">                i[<span class="string">&#x27;children&#x27;</span>] = rep</span><br><span class="line">            res.append(i)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">res = makeTree(<span class="number">0</span>, sourceList)</span><br></pre></td></tr></table></figure>

<p><strong>最后，在编程中，慎用递归！！！</strong></p>
]]></content>
      <categories>
        <category>技术文章</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ElementUI</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue项目引入Element-UI</title>
    <url>/2022/09/21/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E7%AB%AF/Vue%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5Element-UI/</url>
    <content><![CDATA[<p>一套为开发者、设计师和产品经理准备的，基于 vue 的桌面端组件库。目前有基于 vue 2.0 的，也有 基于 vue 3.0 的。下面主要介绍基于 vue 2.0 的</p>
<p>其官网地址为：<a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></p>
<blockquote>
<p>基于 vue 3.0 的官网为：<a href="https://element-plus.gitee.io/#/zh-CN">https://element-plus.gitee.io/#/zh-CN</a></p>
</blockquote>
<h2 id="通过命令行安装配置"><a href="#通过命令行安装配置" class="headerlink" title="通过命令行安装配置"></a>通过命令行安装配置</h2><ol>
<li><p>安装依赖包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install element-ui -S</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入 Element-UI 资源</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入组件库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入组件相关样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="comment">// 将 ElementUI 注册到 vue 中</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br></pre></td></tr></table></figure>

<p><img src="http://img.puppetdev.top/image/note/3beabd4a0d41ca69c14a7a846cf50eff.png" alt="image-20210425115123893"></p>
</li>
<li><p>使用 element-ui，在 App.vue 中使用；从 elemet-ui 的官网中拷贝对应的元素的代码过来。</p>
<p><img src="http://img.puppetdev.top/image/note/40dccbfcca8e6be55b49ece6802a5fd8.png" alt="image-20210425115454749"></p>
</li>
</ol>
<h2 id="通过图形化界面安装"><a href="#通过图形化界面安装" class="headerlink" title="通过图形化界面安装"></a>通过图形化界面安装</h2><ol>
<li><p>运行 vue ui 命令，打开图形化界面</p>
</li>
<li><p>通过 vue 项目管理器，进入具体项目配置面板</p>
</li>
<li><p>点击 “插件” -&gt; “添加插件”，进入插件查询面板</p>
</li>
<li><p>搜索 vue-cli-plugin-element 并安装</p>
</li>
<li><p>配置插件，按需导入，减少打包后项目的体积</p>
<p><img src="http://img.puppetdev.top/image/note/e7eca2c3516e495a4eb12d09339e7915.png" alt="image-20210425120032949"></p>
<p><strong>注意：一定要修改为“按需导入”，否则 vue-cli 会全部导入，项目打包后，体积会很大。</strong></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术文章</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ElementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>el-date-picker的常规使用</title>
    <url>/2022/09/21/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E7%AB%AF/el-date-picker%E7%9A%84%E5%B8%B8%E8%A7%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="el-date-picker的常规使用"><a href="#el-date-picker的常规使用" class="headerlink" title="el-date-picker的常规使用"></a>el-date-picker的常规使用</h1><p>HTML 页面部分</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;时间&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;testDate&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-date-picker</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;testDate&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tyep</span>=<span class="string">&quot;daterange&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">start-placeholde</span>=<span class="string">&quot;开始日期&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">end-placeholde</span>=<span class="string">&quot;结束日期&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p> JavaScript 部分</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    startTime = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    endTime = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    ....</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">testDate</span>: &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="variable language_">this</span>.<span class="property">startTime</span>, <span class="variable language_">this</span>.<span class="property">endTime</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="comment">// 此处需要对 val 进行判空，因为 el-date-picker 的清空按钮点击之后会将 testDate 置为 null</span></span><br><span class="line">        <span class="keyword">if</span> (val) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">startTime</span> = <span class="title function_">dateFormate</span>(val[<span class="number">0</span>])</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">endTime</span> = <span class="title function_">dateFormate</span>(val[<span class="number">0</span>])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">startTime</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">endTime</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">method</span>: &#123;</span><br><span class="line">    <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">startTime</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">endTime</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术文章</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ElementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：通过yarn安装全局包后无法找到命令</title>
    <url>/2022/09/21/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E7%AB%AF/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9AMacOS%E9%80%9A%E8%BF%87yarn%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E5%8C%85%E5%90%8E%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="背景描述"><a href="#背景描述" class="headerlink" title="背景描述"></a>背景描述</h2><ul>
<li>操作系统：macOS</li>
<li>通过 npm 全局安装的 yarn</li>
</ul>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>通过命令 <code>yarn global add packageName</code> 后，试图该模块的命令，发现无法找到</p>
<img src="http://img.puppetdev.top/image/note/4fe618e399628724ad20b4a6323b0a59.png" alt="image-20210930135631984" style="zoom:50%;" />

<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>macOS 在安装完 npm 后，再通过 npm 安装 yarn。则 yarn 相关配置和包路径默认位于家目录下</p>
<img src="http://img.puppetdev.top/image/note/5dada55a4915bb85a40e68e0f75354cd.png" alt="image-20210930135818676" style="zoom:50%;" />

<p>通过 yarn global add 安装包，则会被安装到 <code>~/.config/yarn/global/node_modules/</code> 中</p>
<p><img src="http://img.puppetdev.top/image/note/791f480a09702d4bbc1f5d8213509e76.png" alt="image-20210930140102368"></p>
<p>而该路径是没有配置在环境变量中的，因此无法找到。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>将上述路径配置到环境变量中即可。此处我是配置在 <code>~/.zshrc</code> 中，大家可以视自身所用的 shell 自行决定。</p>
<p>配置如下：</p>
<p><img src="http://img.puppetdev.top/image/note/8e5e85ebf430d7676443903be1407465.png" alt="image-20210930140654119"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=&quot;$PATH:`yarn global bin`:$HOME/.config/yarn/global/node_modules/.bin&quot;</span><br></pre></td></tr></table></figure>

<p>配置后保存，执行 <code>source ./.zshrc</code></p>
<p>结果如下：</p>
<img src="http://img.puppetdev.top/image/note/ad02e37701153120d62feef66115b282.png" alt="image-20210930140835904" style="zoom:50%;" />

]]></content>
      <categories>
        <category>技术文章</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
        <tag>包管理器</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：移动端实现触碰时show-overflow-tooltip</title>
    <url>/2022/04/13/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E7%AB%AF/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9AVant%E5%AE%9E%E7%8E%B0show-overflow-tooltip/</url>
    <content><![CDATA[<span id="more"></span>


<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>用于编写 PC 端的 UI 框架 Element-UI 的 Table 组件有一个属性叫 show-overflow-tooltip 属性，可以实现当单元格的文字太多时，用省略号(ellipsis)展示，鼠标覆上时显示文字全文本的提示框效果。如下：</p>
<p><img src="http://img.puppetdev.top/image/note/a3ad5f8cec0fbac62c27424dbae96a64.png" alt="image-20211129165847396"></p>
<p>这阵子在项目碰到一个问题，由于我主要是做后端的，对前端并不是很熟悉，但被迫做了一阵子前端。项目组用的技术栈是 Vue + Vant，移动端的 UI 框架，需要实现一个方框里当文字太多时，用省略号代替超出的文本，当手触碰时，又能够显示所有文本。</p>
<p>找了半天，没发现 Vant 有提供与 ElementUI 类似的，只能自己摸索写了一个</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.myClass</span> &#123;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">overflow</span> : hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.myClass</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-overflow</span>: clip;</span><br><span class="line">    <span class="attribute">white-space</span>: normal;</span><br><span class="line">    <span class="attribute">word-break</span>: break-all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后边发现，Stack Overflow 上有类似的提问，并且有了相关解答，其中一个解决跟我的解决差不多，贴一下地址：<a href="https://stackoverflow.com/questions/5474871/html-how-can-i-show-tooltip-only-when-ellipsis-is-activated">https://stackoverflow.com/questions/5474871/html-how-can-i-show-tooltip-only-when-ellipsis-is-activated</a></p>
]]></content>
      <categories>
        <category>技术文章</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
        <tag>Vant</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：el-cascader级联选择器出现空面板的问题</title>
    <url>/2022/09/21/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E7%AB%AF/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9Ael-cascader%E7%BA%A7%E8%81%94%E9%80%89%E6%8B%A9%E5%99%A8%E5%87%BA%E7%8E%B0%E7%A9%BA%E9%9D%A2%E6%9D%BF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Cascader级联选择器出现空面板的问题"><a href="#Cascader级联选择器出现空面板的问题" class="headerlink" title="Cascader级联选择器出现空面板的问题"></a>Cascader级联选择器出现空面板的问题</h1><blockquote>
<p>vue、element、el-element</p>
</blockquote>
<img src="http://img.puppetdev.top/image/note/0a8653f711ba357386a3201f78c03b6e.png" alt="image-20210617122750695" style="zoom: 67%;" />

<p>出现空白面板是因为树形结构的数据的<strong>最底层 children 是个空数组</strong>。遇到这种问题，前端可以通过递归，将 children 长度为 0 的节点对象的 children 属性删除，或将值赋为 undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">cleanData</span>(<span class="params">itemList</span>) &#123;  <span class="comment">// 将根节点的 children 传入，传入的只是数据对象的引用</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> itemList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">children</span>.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">delete</span> item.<span class="property">children</span></span><br><span class="line">        <span class="keyword">else</span> <span class="variable language_">this</span>.<span class="title function_">cleanData</span>(item.<span class="property">children</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> itemList </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术文章</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
        <tag>ElementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：el-input如何绑定按键修饰符</title>
    <url>/2022/09/21/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E7%AB%AF/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9Ael-input%E5%A6%82%E4%BD%95%E7%BB%91%E5%AE%9A%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    <content><![CDATA[<p>vue 允许将按键值作为修饰符来使用，如监听回车事件，有两种写法，如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.13</span>=<span class="string">&quot;console.log($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;console.log($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>当我们在 el-input 采用如上两种写法时，他是不生效的。el-input 监听不到键盘事件,原因是 element-ui 是封装组件，所以 el 标签属于自定义标签，因此触发不了键盘事件。</p>
<p><strong>解决办法</strong> ：加上 <code>.native</code> 原生事件修饰符即可。</p>
<p><code>.native</code>：监听组件根元素的原生事件，主要作用是给自定义的组件添加原生事件。vue 与 elementUI 中给 el-input 绑定键盘按键代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">placeholder</span>=<span class="string">&quot;店铺名称&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">clearable</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;queryObj.shopname&quot;</span> </span></span><br><span class="line"><span class="tag">  @<span class="attr">keyup.enter.native</span>=<span class="string">&quot;query&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;prepend&quot;</span>&gt;</span>店铺名称<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术文章</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
        <tag>ElementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：el-table表内部某行数据发生变化时，未立即重新渲染</title>
    <url>/2022/04/13/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E7%AB%AF/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9Ael-table%E8%A1%A8%E5%86%85%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%8F%91%E7%94%9F%E5%8F%98%E5%8C%96%E5%90%8E%E6%9C%AA%E8%83%BD%E7%AB%8B%E5%8D%B3%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>这两天在实现表单内嵌 el-input 的时候（同：<a href="https://github.com/puppetdevz/notes-related/blob/main/notes-related/%E5%89%8D%E7%AB%AF/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C-vue+el|vant/%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/%E9%97%AE%E9%A2%98%EF%BC%9AelementUI%E7%9A%84input%E7%BB%84%E4%BB%B6autofocus%E5%A4%B1%E6%95%88.md">问题：el-table表内行数据发生变化后未能立即重新渲染</a>）遇到一个问题：当输入在 input 中输入数量之后，表单没有反应，不会监听表单数据的变化而重新渲染。</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>本身 el-table 就不支持监听数据列表中某个数据的字段变化而自动再次渲染</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在 el-table 中添加一个 key，可以设置成 boolean 类型的，表单数据列表中的某个数据字段更新后更新这个 key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-table </span><br><span class="line">  :data=&quot;toApplyGoodsInfoList&quot;</span><br><span class="line">  :key=&quot;updateKey&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line"> &lt;/el-table&gt;</span><br></pre></td></tr></table></figure>

<p>该key 需要在 data 中定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">updateKey</span>: <span class="literal">false</span>  <span class="comment">// 辅助变量，值不重要</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当表单数据发生变化时，更新这个 updateKey</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleInput</span>(<span class="params">val, goodsInfo</span>) &#123;</span><br><span class="line">  goodsInfo.<span class="property">toApplyNum</span> = val</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">updateKey</span> = !<span class="variable language_">this</span>.<span class="property">updateKey</span>  <span class="comment">// 值不重要，有更新就好，直接取反</span></span><br><span class="line">  <span class="comment">// 重新获取 input 的焦点</span></span><br><span class="line">  <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> refName = <span class="string">&#x27;inputRef&#x27;</span> + goodsInfo.<span class="property">id</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>[refName].<span class="title function_">focus</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术文章</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
        <tag>ElementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：ElementUI的input组件的autofocus失效（自动获取焦点）</title>
    <url>/2022/04/13/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E7%AB%AF/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9AelementUI%E7%9A%84input%E7%BB%84%E4%BB%B6autofocus%E5%A4%B1%E6%95%88/</url>
    <content><![CDATA[<span id="more"></span>


<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>这两天在开发中碰到需要在 el-table 表单中嵌套 input 组件，可以在表单上直接进行编辑，我使用了 template 的具名插槽进行实现，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-table-column prop=&quot;toApplyNum&quot; label=&quot;申请数量&quot;&gt;</span><br><span class="line">  &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">    &lt;el-input v-model=&quot;scope.row.toApplyNum&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure>

<p>但实际运行后，发现 input 控件无法正常输入，每输入一个字符，就会自动失焦，需要再次点击之后才能继续输入。</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>经在网上查阅资料发现</p>
<p>autofocus 是 vue 中 input 的原生属性，element也支持这种方法。但是 element 中的 el-input 组件外面还有其他组件，导致 autofocus 失效</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>知道了原因，尝试采用手动调用 focus 方法来解决问题。</p>
<ol>
<li>先给 el-input 控件绑定一个 ref，由于要使得每一行均能操作，需要绑定为一个动态 ref</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-input :ref=&quot;&#x27;inputRef&#x27;+ scope.row.id&quot; v-model=&quot;scope.row.toApplyNum&quot; /&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>监听el-input 控件的 input 事件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-input </span><br><span class="line">  :ref=&quot;&#x27;inputRef&#x27;+ scope.row.id&quot; </span><br><span class="line">  v-model=&quot;scope.row.toApplyNum&quot;</span><br><span class="line">  @input=&quot;handleInput&quot; /&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>每当输入，就手动会 input 控件获取焦点</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">(<span class="params">goodsInfo</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> refName = <span class="string">&#x27;inputRef&#x27;</span> + goodsInfo.<span class="property">id</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>[refName].<span class="title function_">focus</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术文章</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
        <tag>ElementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：ElementUI的dialog中无法获取到内部表单的引用</title>
    <url>/2022/04/13/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E7%AB%AF/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9Aelement%E7%9A%84dialog%E4%B8%AD%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E5%86%85%E9%83%A8%E8%A1%A8%E5%8D%95%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>项目中使用到了 dialog 组件去实现业务的新增和编辑操作，这两个操作共用一个表单，因此每次显示 dialog 时，需要调用 <code>$refs.form.resetFields()</code> 方法去重置表单，但发现无法获取到 form 引用，调用会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-dialog title=&quot;新增/编辑&quot; :visible.sync=&quot;dialogVisible&quot; width=&quot;100%&quot;&gt;</span><br><span class="line">  &lt;el-form ref=&quot;form&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/el-form&gt;</span><br><span class="line">&lt;/el-dialog&gt;</span><br><span class="line"></span><br><span class="line">this.$refs.form.resetFields()  // =&gt; 获取不到 form，为 undefined</span><br></pre></td></tr></table></figure>

<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p><strong>elementUI 的官方说法</strong> ：Dialog 的内容是懒渲染的，即在第一次被打开之前，传入的默认 slot 不会被渲染到 DOM 上。因此，如果需要执行 DOM 操作，或通过 <code>ref</code> 获取相应组件，请在 <code>open</code> 事件回调中进行。</p>
<p>所以要解决问题，要么就在 dialog 的 open、close、closed 等回调函数中进行操作。要么，就得使用 <code>this.$nextTick(() =&gt; &#123;...&#125;)</code> ，等待 DOM 渲染完毕后再去调用。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="采用this-nextTick"><a href="#采用this-nextTick" class="headerlink" title="采用this.$nextTick"></a>采用<code>this.$nextTick</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123; </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">resetFields</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="利用-dialog-的回调函数"><a href="#利用-dialog-的回调函数" class="headerlink" title="利用 dialog 的回调函数"></a>利用 dialog 的回调函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">close</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&#x27;form&#x27;</span>].<span class="title function_">resetFields</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术文章</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
        <tag>ElementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：npm install报错</title>
    <url>/2022/03/17/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E7%AB%AF/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9Anpm%20install%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h2 id="pm-ERR-code-EINTEGRITY"><a href="#pm-ERR-code-EINTEGRITY" class="headerlink" title="pm ERR! code EINTEGRITY"></a>pm ERR! code EINTEGRITY</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">：pm ERR! code EINTEGRITY</span><br></pre></td></tr></table></figure>

<p><img src="http://img.puppetdev.top/image/note/0df6ae6fb0bd9e492fb05a3d8d15b2d3.png" alt="image-20220317132008831"></p>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><ol>
<li>删除本地的 package-lock.json 文件</li>
<li>【可选】更新自己的 npm 版本 （npm i -g npm）</li>
<li>【可选】清空 npm 缓存 （npm cache clean –force | npm cache verify）</li>
<li>重新安装 （npm install）</li>
</ol>
<h2 id="Can’t-find-Python-executable-python"><a href="#Can’t-find-Python-executable-python" class="headerlink" title="Can’t find Python executable python"></a>Can’t find Python executable python</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stack Error: Can&#x27;t find Python executable python</span><br></pre></td></tr></table></figure>

<h3 id="问题解决-1"><a href="#问题解决-1" class="headerlink" title="问题解决"></a>问题解决</h3><p>因为 node-gyp 的安装需要，它只能支持 python2，官方推荐 python2.7，</p>
<ol>
<li><p>下载安装 python 2.7，并设置系统路径</p>
</li>
<li><p>终端中进行设置：<code>npm config set python &quot;C:\Python27\python.exe&quot;</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术文章</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：van-cell的title和value宽度占比以及value内容过长时换行的问题</title>
    <url>/2022/10/21/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E7%AB%AF/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9Avan-cell%E7%9A%84title%E5%92%8Cvalue%E5%AE%BD%E5%BA%A6%E5%8D%A0%E6%AF%94%E4%BB%A5%E5%8F%8Avalue%E5%86%85%E5%AE%B9%E8%BF%87%E9%95%BF%E6%97%B6%E6%8D%A2%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<span id="more"></span>

<ol>
<li>van-cell 组件默认 title 和 value 宽度为各占 50%，如果想要增加 value 的宽度，可以给当前的组件的 <code>van-cell__value</code> 设置 min-width</li>
<li><code>van-cell__value</code> 本身是右对齐，但是换行之后，最后一行需要左对齐而不是右对齐，解决方法如下面的 span 样式</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.address-cell</span> &#123;</span><br><span class="line">    <span class="selector-class">.van-cell__value</span> &#123;</span><br><span class="line">      <span class="attribute">min-width</span>: <span class="number">70%</span>;</span><br><span class="line">      <span class="selector-tag">span</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">text-align</span>: left;</span><br><span class="line">        <span class="attribute">word-break</span>: break-all;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>技术文章</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vant</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：van-dialog内容过多时却不会变成滚动样式的问题</title>
    <url>/2022/09/21/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E7%AB%AF/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9Avan-dialog%E5%86%85%E5%AE%B9%E8%BF%87%E5%A4%9A%E6%97%B6%E5%8D%B4%E4%B8%8D%E4%BC%9A%E5%8F%98%E6%88%90%E6%BB%9A%E5%8A%A8%E6%A0%B7%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="解决van-dialog内容过多却没有滚动样式的问题"><a href="#解决van-dialog内容过多却没有滚动样式的问题" class="headerlink" title="解决van-dialog内容过多却没有滚动样式的问题"></a>解决van-dialog内容过多却没有滚动样式的问题</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>通过组件调用 Dialog 时，van-dialog 内嵌套其他组件，其内容过多，Dialog 不会自动出现滚动样式，导致无法显示底部按钮</p>
<p><img src="http://img.puppetdev.top/image/note/ef727b324fb70c17dba47541cc6a0ec8.png" alt="image-20210708143224495"></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在样式中做如下设置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">/deep/ <span class="selector-class">.van-dialog__content</span> &#123;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong>先设置最大行高，然后再给溢出部分设置 scroll 滚动样式。</p>
]]></content>
      <categories>
        <category>技术文章</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
        <tag>Vant</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：给el-select手动赋值后的事件触发（如change事件）</title>
    <url>/2022/04/13/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E7%AB%AF/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9A%E7%BB%99el-select%E6%89%8B%E5%8A%A8%E8%B5%8B%E5%80%BC%E5%90%8E%E7%9A%84%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91(%E5%A6%82change%E4%BA%8B%E4%BB%B6)/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>vue、elementUI、vscode</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在实现业务编辑时，采用 dialog 内嵌表单，当点击“编辑”按钮，数据传入 dialog 并回显到表单中，其中表单有一个select 下拉框，回显时，输入回显到下拉框中，select 选中的值由<code>&#39;&#39;</code> 变成具体的值，此时我的本意是监听这个变化，尝试调用el-select 的 change 事件，但结果发现，手动赋值并不会触发 el-select 的 change 事件</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>经查阅，尚未发现更好的解决方法，只能在进入的时候，手动触发事件。</p>
]]></content>
      <categories>
        <category>技术文章</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
        <tag>ElementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：van-radio判断当前radio是否被选中</title>
    <url>/2022/10/21/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%89%8D%E7%AB%AF/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9Avan-radio%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8Dradio%E6%98%AF%E5%90%A6%E8%A2%AB%E9%80%89%E4%B8%AD/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>当我点击 van-radio 时，我需要先判断当前点击的 van-radio 是否已经处于<strong>被选中的状态</strong></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li>给 van-radio 设置 click 事件，并绑定事件处理函数</li>
<li>将当前 van-radio 的 name 值传递进去</li>
<li>在事件处理函数中判断：<code>selectedRadioName === nameValue</code>，如果相等，说明当前 van-radio 已经处于被选中状态了，否则，未选中。</li>
</ol>
]]></content>
      <categories>
        <category>技术文章</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
        <tag>Vant</tag>
      </tags>
  </entry>
  <entry>
    <title>slf4j、Log4j、Log4j2与Logback关系详解和相关用法</title>
    <url>/2022/03/31/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%90%8E%E7%AB%AF/slf4j%E3%80%81log4j%E3%80%81log4j2%E4%B8%8Elogback%E5%85%B3%E7%B3%BB%E8%AF%A6%E8%A7%A3%E5%92%8C%E7%9B%B8%E5%85%B3%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>作为一名 Java 开发程序员，我们对项目中的日志打印肯定不会陌生，但是有没有发现，Java 的日志框架有很多，琳罗满目，这些框架有什么区别呢？有什么关系呢？在了解之后，仅以本文做一点粗浅的记录。</p>
<span id="more"></span>

<h2 id="I-slf4j"><a href="#I-slf4j" class="headerlink" title="I slf4j"></a>I slf4j</h2><p>slf4j 全称为：The Simple Logging Facade for Java</p>
<p>slf4j 是各种日志框架的简单门面或抽象（可以理解为类似 JPA 规范），而它的具体实现另有他人，例如 java.util.logging、Logback、Log4j 或 Log4j2。</p>
<p>我们的项目使用 SLF4J 仅需要添加一个强制依赖项，即 slf4j-api-1.x.xx.jar。</p>
<p>使用了 slf4j 之后，我们可以任意切换基于 slf4j 实现的日志框架（Log4j、Log4j2 或 Logback）</p>
<p>下面介绍的三种日志框架（Log4j、Log4j2 和 Logback）在编码中使用的方式都是一致的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoSlf4j</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(DemoSlf4j.class);</span><br><span class="line">        logger.info(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果项目只是引入了 slf4j，而没有引入具体的实现，则会报错，如下：</p>
<p>运行后，报了如下错误：</p>
<p><img src="http://img.puppetdev.top/image/note/0fd1e80416e526a14caf7f765cad0680.png" alt="img"></p>
<h2 id="II-Log4j"><a href="#II-Log4j" class="headerlink" title="II Log4j"></a>II Log4j</h2><p>Log4j 是 apache 实现的一个开源日志组件（Wrapped implementations，即对 slf4j 的包装实现）</p>
<p>由于 Log4j 不是对 slf4j 接口的直接实现，因此如果使用 Log4j + slf4j，是需要加适配层。 </p>
<p>此外，Log4j 目前已不再更新维护。</p>
<h3 id="II-1-依赖引入"><a href="#II-1-依赖引入" class="headerlink" title="II.1 依赖引入"></a>II.1 依赖引入</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加了上面的依赖后，会引入以下三个包</p>
<img src="http://img.puppetdev.top/image/note/3fca1c7dca1732392f8c00ffa657c435.png" alt="image-20220401102656101" style="zoom:50%;" />

<ul>
<li>log4j：适配层</li>
<li>slf4j-api：slf4j规范</li>
<li><code>slf4j-log4j12</code>：接口具体实现层</li>
</ul>
<p>其实只要引入 slf4j-log4j12，就会引入 slf4j-api，但是我们依旧推荐自己引入 slf4j-api，因为这样子我们可以自己控制日志门面版本，同时使我们具备在 Log4j、Log4j2 和 Logback 这类基于 slf4j 的日志框架间灵活的能力。</p>
<h3 id="II-2-配置文件"><a href="#II-2-配置文件" class="headerlink" title="II.2 配置文件"></a>II.2 配置文件</h3><blockquote>
<p>配置文件详解：<a href="https://www.iteye.com/blog/zengxiantao-1881700">Log4j配置详解之Log4j.properties</a></p>
</blockquote>
<p>Log4j 的正常运行需要配置文件（<strong>如果没有，则采用 Log4j 默认配置</strong>），配置文件类型： Log4j.xml 或 Log4j.properties。</p>
<p>需要为其配置 root、appender、layout 等信息。下面以 xml 的方式进行配置</p>
<p>注意事项：</p>
<ul>
<li>必须配置 root logger 和至少一个 appender。</li>
<li>日志输出级别，由高到低为：FATAL、ERROR、WARN、INFO、DEBUG</li>
</ul>
<p>具体配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>  encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--若干个appender的定义--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--org.apache.log4j.ConsoleAppender 输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;myConsole&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">value</span>=<span class="string">&quot;%-d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%c]-[%p] %m%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--org.apache.log4j.DailyRollingFileAppender 每天产生一个日志文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;myFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.DailyRollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;File&quot;</span> <span class="attr">value</span>=<span class="string">&quot;output.log&quot;</span>/&gt;</span><span class="comment">&lt;!--文件位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Append&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span><span class="comment">&lt;!--是否选择追加--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">value</span>=<span class="string">&quot;%-d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%c]-[%p] %m%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--org.apache.log4j.RollingFileAppender 滚动日志文件输出 文件大小到达一定尺寸时重新产生新的文件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;appender name=&quot;myFile&quot; class=&quot;org.apache.log4j.RollingFileAppender&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;param name=&quot;File&quot; value=&quot;D:/output.log&quot; /&gt;</span></span><br><span class="line"><span class="comment">        &lt;param name=&quot;Append&quot; value=&quot;true&quot; /&gt;</span></span><br><span class="line"><span class="comment">        &lt;param name=&quot;MaxFileSize&quot; value=&quot;500KB&quot;/&gt;</span></span><br><span class="line"><span class="comment">        &lt;param name=&quot;MaxBackupIndex&quot; value=&quot;10&quot; /&gt;</span></span><br><span class="line"><span class="comment">        &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;param name=&quot;ConversionPattern&quot; value=&quot;%p (%c:%L)- %m%n&quot; /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/layout&gt;</span></span><br><span class="line"><span class="comment">    &lt;/appender&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将各个包中的类日志输出到不同的日志文件中</span></span><br><span class="line"><span class="comment">        这样可以便于日志的分类。</span></span><br><span class="line"><span class="comment">        可以通过这个设置，把业务逻辑的日志添加到数据库。起到过滤的作用</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这段配置的就是说把包名为“com.zjut.a1”且优先级为debug的日志通过myFile这个appender来处理。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">name</span>=<span class="string">&quot;com.zjut.a1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">priority</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;myFile&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根logger的设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--优先级设置，假设设置为“info”，则无法输出debug级别的日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">priority</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;priority value=&quot;info&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;priority value=&quot;warn&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;priority value=&quot;error&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;priority value=&quot;fatal&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--添加刚才设置的appender--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;myConsole&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;myFile&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>仅用于控制台输出日志的配置文件（复制可以直接用）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>  encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;myConsole&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">value</span>=<span class="string">&quot;%-d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%c]-[%p] %m%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">priority</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;myConsole&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="III-Logback"><a href="#III-Logback" class="headerlink" title="III Logback"></a>III Logback</h2><p>Logback 同样是由 Log4j 的作者设计完成的，拥有更好的特性，用来取代 Log4j 的一个日志框架，是 slf4j 的原生实现。（Native implementations，即直接实现了 slf4j 的接口）</p>
<p>Logback 当前分成三个模块：logback-core、logback-classic 和 logback-access。</p>
<p>logback-core 是其它两个模块的基础模块。logback-classic 是 log4j 的一个改良版本。</p>
<h3 id="III-1-依赖引入"><a href="#III-1-依赖引入" class="headerlink" title="III.1 依赖引入"></a>III.1 依赖引入</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>添加以上依赖即可</strong>。网上很多还添加了以下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其实 logback-classic 这个项目本身就包含了 logback-core 和 slf4j-api，当我们引入 logback-classic，就会自动引入 logback-core 和 slf4j-api 了。</p>
<p>因此 logback-core 是可以不用引入的，但是我们依旧推荐自己引入 slf4j-api，因为这样子我们可以自己控制日志门面版本，同时使我们具备在 Log4j、Log4j2 和 Logback 这类基于 slf4j 的日志框架间灵活的能力。</p>
<p>例如从 logback 切换为 log4j2 我们只需要将 logback-classic 包替换为 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.17.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="III-2-配置文件"><a href="#III-2-配置文件" class="headerlink" title="III.2 配置文件"></a>III.2 配置文件</h3><blockquote>
<p>详细参见：<a href="http://logback.qos.ch/manual/index.html">官方文档</a></p>
</blockquote>
<p>Logback 支持编程方式和配置文件的方式进行配置，同时官方网站中还提供了将 <code>log4j.properties</code> 转换为 <code>logback.xml</code> 的 web 工具，方便 Log4j 用户切换为 Logback。</p>
<p>此外，如果只是学习，自定义配置并不是必须的。如果程序没有检测到任何自定义配置，则会将日志直接打印到控制台中。</p>
<p>下面是 logback.xml 配置文件的配置内容（<strong>如果没有，则采用 Log4j 默认配置</strong>）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- encoders are assigned the type</span></span><br><span class="line"><span class="comment">             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Insert the current time formatted as &quot;yyyyMMdd&#x27;T&#x27;HHmmss&quot; under</span></span><br><span class="line"><span class="comment">         the key &quot;bySecond&quot; into the logger context. This value will be</span></span><br><span class="line"><span class="comment">         available to all subsequent configuration elements. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timestamp</span> <span class="attr">key</span>=<span class="string">&quot;bySecond&quot;</span> <span class="attr">datePattern</span>=<span class="string">&quot;yyyyMMdd&#x27;T&#x27;HHmmss&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.FileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>testFile-$&#123;bySecond&#125;.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- encoders are assigned the type</span></span><br><span class="line"><span class="comment">             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;DAYFILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>logFile.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- daily rollover --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>logFile.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- keep 30 days&#x27; worth of history capped at 3GB total size --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>3GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DAYFILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="IV-Log4j2"><a href="#IV-Log4j2" class="headerlink" title="IV Log4j2"></a>IV Log4j2</h2><p>Log4j2 相对于 Log4j 和 Logback 是比较晚出现的。它由 Apache 推出，是对 Log4j 的升级，但与 Log4j 有很大的区别。</p>
<p>Log4j2 在 Log4j 上做了很多重大的改进，还吸取了 Logback 很多优良的设计，同时还修复了 Logback 架构上的一些问题。</p>
<p>可以说，Log4j2 是 slf4j 日志框架体系下的集大成者，是目前最优秀的 Java 日志框架，没有之一。</p>
<p>根据官方的测试表明，在多线程环境下，Log4j2 的异步日志表现更加优秀。在异步日志中，Log4j2 使用独立的线程去执行 I&#x2F;O 操作，可以极大地提升应用程序的性能。 </p>
<h3 id="IV-1-依赖引入"><a href="#IV-1-依赖引入" class="headerlink" title="IV.1 依赖引入"></a>IV.1 依赖引入</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--slf门面，可以省略，但是不建议--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--适配层--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.17.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Log4j2具体的日志实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.17.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因此 slf4j-api 是可以不用引入的，但是我们依旧推荐自己引入 slf4j-api，因为这样子我们可以自己控制日志门面版本，同时使我们具备在 Log4j、Log4j2 和 Logback 这类基于 slf4j 的日志框架间灵活的能力。</p>
<h3 id="IV-2-配置文件"><a href="#IV-2-配置文件" class="headerlink" title="IV.2 配置文件"></a>IV.2 配置文件</h3><p>（<strong>如果没有，则采用 Log4j 默认配置</strong>）</p>
<h2 id="V-Log4j-Logback-Log4j2性能比较"><a href="#V-Log4j-Logback-Log4j2性能比较" class="headerlink" title="V Log4j&#x2F;Logback&#x2F;Log4j2性能比较"></a>V Log4j&#x2F;Logback&#x2F;Log4j2性能比较</h2><h3 id="V-1-异步性能比较"><a href="#V-1-异步性能比较" class="headerlink" title="V.1 异步性能比较"></a>V.1 异步性能比较</h3><img src="http://img.puppetdev.top/image/note/46c4671dd720db36186b6c1e70d0ebe7.png" alt="image-20220401110328469" style="zoom:50%;" />

<p>其中，<code>Loggers all async</code> 是基于 <a href="http://lmax-exchange.github.com/disruptor/">LMAX Disruptor</a> 实现的，可见 Log4j2 的异步日志性能是最棒的。</p>
<h2 id="VI-Log4j-Logback-Log4j2选用总结"><a href="#VI-Log4j-Logback-Log4j2选用总结" class="headerlink" title="VI Log4j&#x2F;Logback&#x2F;Log4j2选用总结"></a>VI Log4j&#x2F;Logback&#x2F;Log4j2选用总结</h2><ul>
<li>对于项目而言</li>
</ul>
<p>由于 Log4j 已经停止更新维护，所以一般只会在 Logback 和 Log4j2 中进行选择。对日志的性能要求比较高的，可以选择 Log4j2。（所以现在一般都是采用 Log4j2 了，不再使用 Logback，因为相同的场景下，Log4j2 的 TPS 比 Logback 高好几倍）</p>
<p>试验参考：<a href="https://juejin.cn/post/6844903926777511943">日志框架选择Logback还是Log4j2？</a></p>
<ul>
<li>对于个人学习而言</li>
</ul>
<p>个人学习一般只是用于简单的日志记录，三个框架随意选择。</p>
<h2 id="VII-全篇总结与补充"><a href="#VII-全篇总结与补充" class="headerlink" title="VII 全篇总结与补充"></a>VII 全篇总结与补充</h2><ul>
<li><p>slf4j 是 Java 的一个日志门面，实现了日志框架一些通用的 api，Log4j、Log4j2 和 Logback 是具体的日志框架。</p>
</li>
<li><p>Log4j2 可以说是目前 Java 日志框架中最为优秀的一个。</p>
</li>
<li><p>Log4j、Log4j2 和 Logback 均可以通过配置来自定义日志输出规则（格式、方式和策略等），如果没有，则都会采用其默认的配置。</p>
</li>
<li><p>日志框架可以单独的使用，也可以结合 slf4j 一起使用。</p>
<ul>
<li>单独使用，分别调用框架自己的方法来输出日志信息。</li>
<li>结合 slf4j 一起使用，调用 slf4j 的 api 来输入日志信息，具体使用与底层日志框架无关（需要底层框架的配置文件）</li>
</ul>
</li>
</ul>
<p><strong>但是强烈推荐结合 slf4j 使用日志框架</strong>。这样子我们可以在 Log4j、Log4j2 和 Logback 这类基于 slf4j 的日志框架间随意切换，更加灵活。</p>
]]></content>
      <categories>
        <category>技术文章</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：SpringBoot-前端时间传递到后端少了8个小时的问题</title>
    <url>/2022/11/09/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%90%8E%E7%AB%AF/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9ASpringBoot-%E5%89%8D%E7%AB%AF%E6%97%B6%E9%97%B4%E4%BC%A0%E9%80%92%E5%88%B0%E5%90%8E%E7%AB%AF%E5%B0%91%E4%BA%868%E4%B8%AA%E5%B0%8F%E6%97%B6%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>前端向后端发送 POST 请求，请求数据为 JSON 格式，其中有个字段为日期，后端 SpringBoot 通过 Date 类型去接收入参，结果发现比当前时间少了 8 个小时。</p>
<p>初步分析是时区导致的。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>第一步：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">jackson:</span></span><br><span class="line">		<span class="string">//</span> <span class="string">注意格式不要写错了，例如</span> <span class="string">HH</span> <span class="string">不要写出</span> <span class="string">hh，否则可能会有其他问题</span></span><br><span class="line">	    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">	    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br></pre></td></tr></table></figure>

<p>第二步：时区用 <code>Asia/Shanghai</code> 或者 <code>GMT%2B8</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/aaaaa?</span></span><br><span class="line"><span class="string">useUnicode=true&amp;</span></span><br><span class="line"><span class="string">characterEncoding=utf-8&amp;</span></span><br><span class="line"><span class="string">useSSL=true&amp;</span></span><br><span class="line"><span class="string">serverTimezone=Asia/Shanghai</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术文章</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
        <tag>SpringBoot</tag>
        <tag>时区问题</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：使用@Async或@Transactional注解失效</title>
    <url>/2022/07/19/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%90%8E%E7%AB%AF/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9A%E4%BD%BF%E7%94%A8@Async%E6%88%96@Transactional%E6%B3%A8%E8%A7%A3%E5%A4%B1%E6%95%88/</url>
    <content><![CDATA[<p>本文记录个人在使用 @Async 和 @Transactional 注解时，遇到的问题及对应的解决方案</p>
<span id="more"></span>

<p>参考如下：</p>
<ul>
<li><a href="https://blog.csdn.net/Dongguabai/article/details/80788585">分析使用@Async或@Transactional注解失效（解决使用AopContext.currentProxy()出现”Cannot find current proxy“）_Dongguabai的博客-CSDN博客</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1497700">从@Async案例找到Spring框架的bug：exposeProxy&#x3D;true不生效原因大剖析+最佳解决方案【享学Spring】 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></li>
<li><a href="https://blog.csdn.net/lvxiucai/article/details/101758179">解决No thread-bound request found: Are you referring to request attributes outside of an actual web re_lvxiucai的博客-CSDN博客</a></li>
</ul>
]]></content>
      <categories>
        <category>技术文章</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案：在高版本jdk中使用cglib进行代理时的报错问题</title>
    <url>/2022/11/28/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E5%90%8E%E7%AB%AF/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9A%E5%9C%A8%E9%AB%98%E7%89%88%E6%9C%ACjdk%E4%B8%AD%E4%BD%BF%E7%94%A8cglib%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%90%86%E6%97%B6%E7%9A%84%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="Unable-to-make-protected-final-java-lang-Class-java-lang-ClassLoader-defineClass"><a href="#Unable-to-make-protected-final-java-lang-Class-java-lang-ClassLoader-defineClass" class="headerlink" title="Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass"></a>Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在使用 Spring 集成的 cglib 手动对某个类进行代理增强时报了以下错误：</p>
<p>Unable to make <a href="https://so.csdn.net/so/search?q=protected&spm=1001.2101.3001.7020">protected</a> final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not “opens java.lang” to unnamed module @5c29bfd</p>
<p>我的代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyForMultiInterfacesTest</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Service1</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Service2</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        enhancer.setInterfaces(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Service1.class, Service2.class&#125;);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;方法：&quot;</span> + method.getName());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> enhancer.create();</span><br><span class="line">        <span class="keyword">if</span> (proxy <span class="keyword">instanceof</span> Service1) &#123;</span><br><span class="line">            ((Service1) proxy).m1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (proxy <span class="keyword">instanceof</span> Service2) &#123;</span><br><span class="line">            ((Service2) proxy).m2();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(proxy.getClass());</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; anInterface : proxy.getClass().getInterfaces()) &#123;</span><br><span class="line">            System.out.println(anInterface);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>貌似是高版本的 JDK 禁用了反射权限，需要添加 JVM 参数去开启</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">--add-opens java.base/java.lang=ALL-UNNAMED  </span><br></pre></td></tr></table></figure>

<p><img src="http://img.puppetdev.top/image/note/26068c2c1d8b57fd7b41650b68e1086f.png" alt="image-20221128141538748"></p>
]]></content>
      <categories>
        <category>技术文章</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>JDK</tag>
        <tag>解决方案</tag>
      </tags>
  </entry>
</search>
